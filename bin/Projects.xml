<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Projects</name>
    </assembly>
    <members>
        <member name="T:OldW.Commands.cmd_ExcavSoilReCut">
            <summary> 修复开挖土体对模型土体的剪切关系，并将其放置到同一个组中。 </summary>
            <remarks>
            修改所有开挖土体对于基坑土体的剪切关系。
            在某些情况下（比如用新的模型土体替换了旧的模型土体时），
            开挖土体可能会失去对于模型土体的剪切关系，以致于开挖土体虽然位于模型土体的组中，但是模型土体并没有被切割。
            </remarks>
        </member>
        <member name="T:OldW.Commands.cmd_DeleteRedundantExcavations">
            <summary> 将模型土体或者开挖土体族中，没有对应实例的那些族及对应的族类型删除 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_FilterInstrums">
            <summary>
            监测数据管理系统
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ProjectInfo">
            <summary> 对项目信息进行设置与刷新 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ShowOldWModel">
            <summary> 查看Revit的Panel中指定的某一天的开挖工况 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ViewStage">
            <summary> 查看Revit的Panel中指定的某一天的开挖工况 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ViewStageManually">
            <summary> 手动查看指定日期的开挖工况 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ViewStageDynamically">
            <summary> 自动动态查看指定日期的开挖工况 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_ExcavationInfo">
            <summary> 提取模型中的开挖土体信息 </summary>
        </member>
        <member name="T:OldW.Commands.cmd_DataManager">
            <summary>
            监测数据管理系统
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_DataImport">
            <summary>
            从Excel中导入监测数据
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_DataExport">
            <summary>
            将数据导出到Excel
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceWallIncline">
            <summary>
            墙体测斜
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceSoilIncline">
            <summary>
            土体测斜
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceWallTop">
            <summary>
            墙顶位移
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceGroundSettlement">
            <summary>
            地表隆沉
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceColumnHeave">
            <summary>
            立柱隆沉
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceStrutForce">
            <summary>
            支撑轴力
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceWaterTable">
            <summary>
            水位
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceOtherPoint">
            <summary>
            其他点测点
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_PlaceOtherLine">
            <summary>
            其他线测点
            </summary>
        </member>
        <member name="T:OldW.Commands.cmd_SetWarning">
            <summary>
            test command
            </summary>
        </member>
        <member name="T:OldW.Excavation.frm_ExcavationInfo">
            <summary>
            提取并且操作基坑开挖的信息
            </summary>
        </member>
        <member name="T:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity">
            <summary> Datagridview 中的每一行数据所对应的实体类 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.Soil">
            <summary> 开挖土体对象 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.Id">
            <summary> 土体单元的Id值 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.Name">
            <summary> 开挖土体的名称 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.Depth">
            <summary> 开挖土体的深度 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.StartedDate">
            <summary> 开挖土体开挖完成的日期 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.CompletedDate">
            <summary> 开挖土体开挖完成的日期 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.Visible">
            <summary> 开挖土体在当前视图中是否可见 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.syncToDocument(Autodesk.Revit.DB.Transaction,Autodesk.Revit.DB.View)">
            <summary>
            将界面中设置的信息同步到Revit文档中
            </summary>
            <param name="tran"></param>
            <param name="View"></param>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.SetVisibility(Autodesk.Revit.DB.Transaction,System.Boolean,Autodesk.Revit.DB.View)">
            <summary>
            设置开挖土体的可见性
            </summary>
            <param name="tran"></param>
            <param name="show"> True代表设置其为可见 </param>
            <param name="view">当前视图对象</param>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.ExcavSoilEntity.DeleteExcavSoil(Autodesk.Revit.DB.Transaction)">
            <summary>
            设置开挖土体的可见性
            </summary>
            <param name="tran"></param>
        </member>
        <member name="T:OldW.Excavation.frm_ExcavationInfo.RequestParameter">
            <summary>
            每一个外部事件调用时所提出的需求
            </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.RequestParameter.Sender">
            <summary> 引发Form事件控件对象 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.RequestParameter.e">
            <summary> Form中的事件所对应的事件参数 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_ExcavationInfo.RequestParameter.Id">
            <summary> 具体的需求 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.RequestParameter.#ctor(OldW.Excavation.frm_ExcavationInfo.Request,System.EventArgs,System.Object)">
            <summary>
            定义事件需求与窗口中引发此事件的控件对象及对应的事件参数
            </summary>
            <param name="RequestId">具体的需求</param>
            <param name="e">Form中的事件所对应的事件参数</param>
            <param name="sender">引发Form事件控件对象</param>
            <remarks></remarks>
        </member>
        <member name="T:OldW.Excavation.frm_ExcavationInfo.Request">
            <summary>
            ModelessForm的操作需求，用来从窗口向IExternalEventHandler对象传递需求。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.DeleteExcavSoil">
            <summary> 将列表中的某一个开挖土体从整个模型中删除，同时也删除其所对应的族 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.GetExcavationInfo">
            <summary>
            从模型中提取开挖土体的信息，并显示在列表中
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.SynToElement">
            <summary> 将列表中的某一个开挖土体的信息同步到Revit文档中的对应元素中去。 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.SynToMultipleElements">
            <summary> 将列表中选中的多个开挖土体的信息同步到Revit文档中的对应元素中去。 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.SetVisibility">
            <summary> 设置选定图元在当前视图中的可见性 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.Request.SetMultiVisibility">
            <summary>
            设置列表中选择的每一行所对应的开挖土体的可见性。
            </summary>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.ExEvent">
            <summary>用来触发外部事件（通过其Raise方法） </summary>
            <remarks>ExEvent属性是必须有的，它用来执行Raise方法以触发事件。</remarks>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.RequestPara">
            <summary> Execute方法所要执行的需求 </summary>
            <remarks>在Form中要执行某一个操作时，先将对应的操作需求信息赋值为一个RequestId枚举值，然后再执行ExternalEvent.Raise()方法。
            然后Revit会在会在下个闲置时间（idling time cycle）到来时调用IExternalEventHandler.Excute方法，在这个Execute方法中，
            再通过RequestId来提取对应的操作需求，</remarks>
        </member>
        <member name="F:OldW.Excavation.frm_ExcavationInfo.ExcavSoilInfos">
            <summary> 用来与列表框进行交互的开挖土体信息集合 </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.#ctor(OldW.Excavation.ExcavationDoc)">
            <summary> 构造函数 </summary>
            <param name="ExcavDoc"></param>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.SetupDatagridview">
            <summary> 将列表框进行初始化 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.Execute(Autodesk.Revit.UI.UIApplication)">
            <summary>
            在执行ExternalEvent.Raise()方法之前，请先将操作需求信息赋值给其RequestHandler对象的RequestId属性。
            当ExternalEvent.Raise后，Revit会在下个闲置时间（idling time cycle）到来时调用IExternalEventHandler.Execute方法的实现。
            </summary>
            <param name="app">此属性由Revit自动提供，其值不是Nothing，而是一个真实的UIApplication对象</param>
            <remarks>由于在通过外部程序所引发的操作中，如果出现异常，Revit并不会给出任何提示或者报错，
            而是直接退出函数。所以要将整个操作放在一个Try代码块中，以处理可能出现的任何报错。</remarks>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.GetExcavSoilInfo">
            <summary> 将模型中的开挖土体信息同步到列表中 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.DozeOff">
            <summary> 在Revit执行相关操作时，禁用窗口中的控件 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_ExcavationInfo.WarmUp">
            <summary> 在外部事件RequestHandler中的Execute方法执行完成后，用来激活窗口中的控件 </summary>
        </member>
        <member name="T:OldW.Excavation.ExcavationDoc">
            <summary>
            用来执行基坑开挖模拟中的数据存储与绘制操作
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:OldW.Excavation.ExcavationDoc.Type">
            <summary> 用来创建此开挖土体族样板的类型 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationDoc.Type.GenericForm">
            <summary> 公制常规模型 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationDoc.Type.AutoAdapt">
            <summary> 自适应常规模型 </summary>
        </member>
        <member name="P:OldW.Excavation.ExcavationDoc.ModelSoil">
            <summary>
            文档中已经检索出来的模型土体，这个对象可能为空，也可能是一个无效的对象。
            </summary>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.#ctor(OldWDocument)">
            <summary>
            构造函数
            </summary>
            <param name="OldWDoc"></param>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.CreateModelSoil(System.Double,Autodesk.Revit.DB.CurveArrArray)">
            <summary>
            创建模型土体，此土体单元在模型中应该只有一个。
            </summary>
            <param name="CurveArrArr">要进行拉伸的平面轮廓（可以由多个封闭的曲线组成）</param>
            <param name="Depth">模型土体的深度，单位为m，数值为正表示向下的深度，反之表示向上的高度。</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.CreateExcavationSoil(OldW.Excavation.Soil_Model,System.Double,Autodesk.Revit.DB.CurveArrArray,System.String)">
            <summary>
            创建开挖土体，此土体单元在模型中可以有很多个。
            </summary>
            <param name="modelSoil">在创建开挖土体之前，请先确保已经创建好了模型土体。
            在此方法中，模型土体对象并不起任何作用，只是用来确保模型土体对象已经创建。</param>
            <param name="curveArrArr"> 要进行拉伸的平面轮廓（可以由多个封闭的曲线组成） </param>
            <param name="depth">开挖土体的深度，单位为m，数值为正表示向下的深度，反之表示向上的高度。</param>
            <param name="desiredName">此开挖土体实例的名称（推荐以开挖完成的日期）。如果此名称已经被使用，则以默认的名称来命名。</param>
            <returns></returns>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.CreateFamilyFromProfile(System.Double,Autodesk.Revit.DB.CurveArrArray)">
            <summary>
            根据输入的平面轮廓信息，以及对应的模型深度，创建出模型土体或者开挖土体族
            </summary>
            <param name="Depth"></param>
            <param name="CurveArrArr"></param>
            <returns></returns>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.ExtrusionAndBindingDimension(Autodesk.Revit.DB.Transaction,Autodesk.Revit.DB.Document,Autodesk.Revit.DB.CurveArrArray,System.Double)">
            <summary>
            绘制拉伸实体，并将其深度值与具体参数关联起来。
            </summary>
            <param name="tranFam"></param>
            <param name="famDoc">实体所在的族文档，此文档当前已经处于打开状态。</param>
            <param name="curveArrArr">用来绘制实体的闭合轮廓</param>
            <param name="depth">模型土体的深度，单位为m，数值为正表示向下的深度，反之表示向上的高度。</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.GetValidExcavationSoilName(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            在当前模型文档中，构造出一个有效的名称，来供开挖土体族使用。
            </summary>
            <param name="doc"></param>
            <param name="DesiredName">此开挖土体实例的名称（推荐以开挖完成的日期）。如果此名称已经被使用，则以默认的名称来命名。</param>
            <returns></returns>
            <remarks>其基本格式为：“开挖-01”或者“开挖-命名-01”</remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.HasSuffixNum(System.String,System.Int32@,System.String@)">
            <summary>
            检查一个字符串是否符合“字符-123456”的格式，如果符合，则将其分割为前缀Prefix与后面的数字两部分
            </summary>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.FindSoilModel(System.Int32)">
            <summary>
            模型中的土体单元
            </summary>
            <param name="SoilElementId">可能的土体单元的ElementId值，如果没有待选的，可以不指定，此时程序会在整个Document中进行搜索。</param>
            <returns>如果成功搜索到，则返回对应的土体单元，如果没有找到，则返回Nothing</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.GetModelSoil(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String@)">
            <summary>
            找到模型中的开挖土体单元
            </summary>
            <param name="doc">进行土体单元搜索的文档</param>
            <param name="SoilElementId">可能的土体单元的ElementId值</param>
            <returns>如果找到有效的土体单元，则返回对应的Soil_Model，否则返回Nothing</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.FindExcavSoils(OldW.Excavation.Soil_Model)">
            <summary> 搜索文档中与模型土体位于同一个Group中的所有的开挖土体。 </summary>
            <param name="soilM">文档中的模型土体单元，可以通过 ExcavationDoc.GetSoilModel 函数获得</param>
            <returns></returns>
            <remarks> 搜索的基本准则是开挖土体与模型土体位于同一个组中。但是开挖土体并不一定要剪切模型土体。 </remarks>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.FilterExcavSoils(System.Collections.Generic.IEnumerable{OldW.Excavation.Soil_Excav},System.DateTime)">
            <summary>
            根据施工日期来判断土体的开挖状态
            </summary>
            <param name="excavSoils">要进行过滤的开挖土体集合</param>
            <param name="constructionTime"> 要考查的施工日期 </param>
            <returns> excavSoils 集合中每一个开挖土体所对应的开挖状态 </returns>
        </member>
        <member name="M:OldW.Excavation.ExcavationDoc.DeleteEmptySoilFamily(Autodesk.Revit.DB.Transaction)">
            <summary>
            在Revit的项目浏览器中，土体族位于“族>场地”之中，常规情况下，每一个族中只有一个族类型，
            因为每一个模型土体或者开挖土体，都是通过唯一的曲线创建出来的（在后期的开发中，可能会将其修改为通过“自适应常规模型”来创建土体。）。
            当模型使用很长一段时间后，出于各种原因，一个模型中可能有很多的开挖土体族都已经没有实例了，这时就需要将这些没有实例的开挖土体族删除。
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:OldW.Excavation.frm_DrawExcavation">
            <summary>
            无模态窗口的模板
            此窗口可以直接通过Form.Show来进行调用
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.ExEvent">
            <summary>用来触发外部事件（通过其Raise方法） </summary>
            <remarks>ExEvent属性是必须有的，它用来执行Raise方法以触发事件。</remarks>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.RequestPara">
            <summary> Execute方法所要执行的需求 </summary>
            <remarks>在Form中要执行某一个操作时，先将对应的操作需求信息赋值为一个RequestId枚举值，然后再执行ExternalEvent.Raise()方法。
            然后Revit会在会在下个闲置时间（idling time cycle）到来时调用IExternalEventHandler.Excute方法，在这个Execute方法中，
            再通过RequestId来提取对应的操作需求，</remarks>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation._soilDepth">
            <summary> 要绘制的模型的深度，单位为m </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.CompletedDate">
            <summary> 开挖土体开挖完成的日期 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.StartedDate">
            <summary> 开挖土体开始开挖的日期 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.DesiredName">
            <summary>
            为开挖土体或者模型墙体预设的名称
            </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.#ctor(OldW.Excavation.ExcavationDoc)">
            <summary> 构造函数 </summary>
            <param name="ExcavDoc"></param>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation._forbiddenFormClosing">
            <summary> 禁止关闭窗口 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.DozeOff(OldW.Excavation.frm_DrawExcavation.Request)">
            <summary> 在Revit执行相关操作时，禁用窗口中的控件 </summary>
            <param name="req"> 当前正在执行的命令 </param>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.WarmUp(OldW.Excavation.frm_DrawExcavation.Request)">
            <summary> 在外部事件RequestHandler中的Execute方法执行完成后，用来激活窗口中的控件 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.CheckUiDataForDrawing">
            <summary>
            对窗口中的数据进行检测，并判断是否可以进行绘制
            </summary>
        </member>
        <member name="T:OldW.Excavation.frm_DrawExcavation.RequestParameter">
            <summary>
            每一个外部事件调用时所提出的需求，为了在Execute方法中充分获取窗口的需求，
            所以将调用外部事件的窗口控件以及对应的触发事件参数也传入Execute方法中。
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldW.Excavation.frm_DrawExcavation.RequestParameter.sender">
            <summary> 引发Form事件控件对象 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_DrawExcavation.RequestParameter.e">
            <summary> Form中的事件所对应的事件参数 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_DrawExcavation.RequestParameter.Id">
            <summary> 具体的需求 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.RequestParameter.#ctor(OldW.Excavation.frm_DrawExcavation.Request,System.EventArgs,System.Object)">
            <summary>
            定义事件需求与窗口中引发此事件的控件对象及对应的事件参数
            </summary>
            <param name="requestId">具体的需求</param>
            <param name="e">Form中的事件所对应的事件参数</param>
            <param name="sender">引发Form事件控件对象</param>
            <remarks></remarks>
        </member>
        <member name="T:OldW.Excavation.frm_DrawExcavation.Request">
            <summary>
            ModelessForm的操作需求，用来从窗口向IExternalEventHandler对象传递需求。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.DrawCurvesInUI">
            <summary> 通过在UI界面绘制模型线来作为土体的轮廓 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.PickCurves">
            <summary> 通过 Selection.PickObject() 来在界面上选择出一组封闭模型线 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.DrawCurvesFromFaceEdge">
            <summary> 通过在UI界面中选择一个水平面来绘制出对应的轮廓 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.DeleteCurves">
            <summary> 删除绘制好的模型线并清空曲线集合数据 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.StartModeling">
            <summary> 开始建模 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation.Request.CancelDraw">
            <summary> 取消模型线的绘制操作 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.Execute(Autodesk.Revit.UI.UIApplication)">
            <summary>
            在执行ExternalEvent.Raise()方法之前，请先将操作需求信息赋值给其RequestHandler对象的RequestId属性。
            当ExternalEvent.Raise后，Revit会在下个闲置时间（idling time cycle）到来时调用IExternalEventHandler.Execute方法的实现。
            </summary>
            <param name="uiApp">此属性由Revit自动提供，其值不是Nothing，而是一个真实的UIApplication对象</param>
            <remarks>由于在通过外部程序所引发的操作中，如果出现异常，Revit并不会给出任何提示或者报错，
            而是直接退出函数。所以要将整个操作放在一个Try代码块中，以处理可能出现的任何报错。</remarks>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.DrawSoilFromCurve(Autodesk.Revit.DB.CurveArrArray)">
            <summary>
            根据绘制或者选择出来的土体轮廓模型线来进行模型土体或者开挖土体的建模
            </summary>
            <param name="curveArrArr"></param>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation._closedCurveDrawer">
            <summary> 用来绘制封闭的模型线 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation._curvesToDrawSoil">
            <summary> 绘制好的模型线所对应的Curve对象，记录下来以用来绘制土体。
            此变量只应该在 成功地创建了封闭的模型线时为其赋值 </summary>
        </member>
        <member name="F:OldW.Excavation.frm_DrawExcavation._drawnCurveIds">
            <summary> 绘制好的模型线 </summary>
        </member>
        <member name="P:OldW.Excavation.frm_DrawExcavation.DrawnCurveIds">
            <summary> 通过界面绘制出来的模型线，记录下来以用来被删除 </summary>
        </member>
        <member name="M:OldW.Excavation.frm_DrawExcavation.ClosedCurveDrawer_DrawingCompleted(System.Collections.Generic.List{System.Collections.Generic.List{Autodesk.Revit.DB.ElementId}},System.Boolean,System.Boolean)">
            <summary> 在UI界面中绘制完模型线后，对其结果进行处理 </summary>
            <param name="addedCurves"></param>
            <param name="finishedExternally"></param>
            <param name="succeeded"></param>
        </member>
        <member name="T:OldW.Excavation.Soil_Element">
            <summary>
            土体单元对象。一个土体单元的族实例，必须满足的条件有：1. 族的名称限制；2. 实例类别为“场地”。
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldW.Excavation.Soil_Element.Soil">
            <summary> 模型土体或者开挖土体单元所对应的族实例对象 </summary>
        </member>
        <member name="P:OldW.Excavation.Soil_Element.ExcavDoc">
            <summary> 基坑开挖文档 </summary>
        </member>
        <member name="P:OldW.Excavation.Soil_Element.Document">
            <summary> 土体单元所在的 Revit 文档 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Element.#ctor(OldW.Excavation.ExcavationDoc,Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            构造函数
            </summary>
            <param name="excavDoc"></param>
            <param name="soilElement"></param>
        </member>
        <member name="M:OldW.Excavation.Soil_Element.IsSoilElement(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String@)">
            <summary>
            对于一个单元进行全面的检测，以判断其是否为一个模型土体单元或者开挖土体单元。
            </summary>
            <param name="doc">进行土体单元搜索的文档</param>
            <param name="SoilElementId">可能的土体单元的ElementId值</param>
            <param name="FailureMessage">如果不是，则返回不能转换的原因。</param>
            <returns>如果检查通过，则可以直接通过Create静态方法来创建对应的模型土体</returns>
            <remarks>一个土体单元的族实例，必须满足的条件有：1. 族的名称限制；2. 实例类别为“场地”。</remarks>
        </member>
        <member name="F:OldW.Excavation.Soil_Element._depth">
            <summary>
            模型土体或者开挖土体的深度值，单位为米
            </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Element.GetDepth">
            <summary> 提取模型土体或者开挖土体的深度参数。此参数是通过API添加的。 </summary>
            <returns> 返回深度值，单位为米 </returns>
        </member>
        <member name="M:OldW.Excavation.Soil_Element.SetDepth(Autodesk.Revit.DB.Transaction,System.Double)">
            <summary> 设置模型土体或者开挖土体的深度参数。此参数是通过API添加的。 </summary>
            <param name="tran">  </param>
            <param name="depth"> 模型的新的深度，单位为米 </param>
        </member>
        <member name="T:OldW.Excavation.Soil_Excav">
            <summary> 用来模拟分块开挖的土体元素。 </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.Soil_Excav.F_ModelSoil">
            <summary> 开挖土体单元所附着的模型土体 </summary>
        </member>
        <member name="P:OldW.Excavation.Soil_Excav.ModelSoil">
            <summary> 开挖土体单元所附着的模型土体 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.#ctor(Autodesk.Revit.DB.FamilyInstance,OldW.Excavation.Soil_Model)">
            <summary>
            构造函数：用来模拟分块开挖的土体元素。
            </summary>
            <param name="SoilRemove">用来模拟土体开挖的土体Element</param>
            <param name="BindedModelSoil">开挖土体单元所附着的模型土体。</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.IsExcavationModel(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String@)">
            <summary>
            对于一个单元进行全面的检测，以判断其是否为一个开挖土体单元。
            </summary>
            <param name="doc">进行土体单元搜索的文档</param>
            <param name="SoilElementId">可能的开挖土体单元的ElementId值</param>
            <param name="FailureMessage">如果不是，则返回不能转换的原因。</param>
            <returns>如果检查通过，则可以直接通过Create静态方法来创建对应的模型土体</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.Create(Autodesk.Revit.DB.FamilyInstance,OldW.Excavation.Soil_Model)">
            <summary>
            创建开挖土体。除非是在API中创建出来，否则。在创建之前，请先通过静态方法IsExcavationModel来判断此族实例是否可以转换为Soil_Model对象。
            否则，在程序运行过程中可能会出现各种报错。
            </summary>
            <param name="SoilElement">开挖土体单元</param>
            <param name="BindedModelSoil">开挖土体单元所附着的模型土体。</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.GetElevation(System.Boolean)">
            <summary>
            得到开挖土体的顶面或者底面的在模型中的标高
            </summary>
            <param name="Top">If true, obtain the elevation of the top surface. If false, obtain the elevation of the bottom surface.  </param>
            <returns>指定表面的标高值（单位为m）。the elevation of the specified surface, in the unit of meter.</returns>
            <remarks>不用Element.Geometry（）方法，因为此方法包含大量的数据结构转换，太消耗CPU。而应使用GetBoundingBox与GetTransform等方法。</remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.SetExcavatedDate(Autodesk.Revit.DB.Transaction,Autodesk.Revit.DB.Document,System.Boolean,System.Collections.Generic.Dictionary{OldW.Excavation.Soil_Excav,System.DateTime})">
            <summary>
            为多个开挖土体设置对应的开挖完成的时间
            </summary>
            <param name="Started">如果要设置土体开始开挖的时间，则设置为True，反之则是设置土体开挖完成的时间</param>
            <param name="Soil_Date">一个字典集合，其中包括要进行日期设置的所有开挖土体。土体开挖完成的时间，可以精确到分钟</param>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.Soil_Excav._completedDate">
            <summary> 每一个开挖土体都有一个开挖完成的时间。由于记录的不完整，这个时间可能暂时不知道，但是后期要可以指定。 </summary>
        </member>
        <member name="F:OldW.Excavation.Soil_Excav._completedDateInMemory">
            <summary> 开挖土体的开挖完成日期已经从Revit中刷新到内存中。 </summary>
        </member>
        <member name="F:OldW.Excavation.Soil_Excav._startedDate">
            <summary> 每一个开挖土体都有一个开始开挖的时间。由于记录的不完整，这个时间可能暂时不知道，但是后期要可以指定。 </summary>
        </member>
        <member name="F:OldW.Excavation.Soil_Excav._startedDateInMemory">
            <summary> 开挖土体的开挖开始日期已经从Revit中刷新到内存中。 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.SetExcavatedDate(Autodesk.Revit.DB.Transaction,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            为开挖土体设置对应的开挖完成的时间
            </summary>
            <param name="tran">Revit事务对象，在此函数中此事务并不会Start或者Commit，所以在调用此函数时，请确保此事务对象已经Started了。</param>
            <param name="Started">如果要设置土体开始开挖的时间，则设置为True，反之则是设置土体开挖完成的时间</param>
            <param name="ResDate">土体开挖开始或者完成的时间，可以精确到分钟。如果要清空日期字符，则设置其为Nothing。</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.GetExcavatedDate(System.Boolean)">
            <summary>
            从开挖土体的单元中读取开挖开始或者开挖完成的日期
            </summary>
            <param name="started">如果要提取土体开始开挖的时间，则设置为True，反之则是提取土体开挖完成的时间</param>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.GetName">
            <summary> 获取开挖土体的名称，这里取的是族实例所对应的族类型的名称 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.SetName(Autodesk.Revit.DB.Transaction,System.String)">
            <summary> 设置开挖土体的名称。默认情况下，一个开挖土体族中只有一个族类型，此族类型也只有一个实例单元。
            族实例所对应的族类型的名称 </summary>
            <param name="tran">  </param>
            <param name="newName"> 这里会将开挖土体对应所对应的族类型，以及其族都设置为此名称。 </param>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.Delete(Autodesk.Revit.DB.Transaction)">
            <summary> 将自身从整个模型文档中删除 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.RefreshByStage(Autodesk.Revit.DB.Transaction,Autodesk.Revit.DB.View,OldW.Excavation.ExcavationStage)">
            <summary>
            根据开挖土体当前的开挖状态来设置其在Revit中的显示样式
            </summary>
            <param name="tranDoc"></param>
            <param name="view"></param>
            <param name="stage">开挖土体当前的开挖状态</param>
        </member>
        <member name="M:OldW.Excavation.Soil_Excav.SetColor(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,Autodesk.Revit.DB.Color,System.Int32)">
            <summary>
            设置土体的显示颜色、透明度
            </summary>
            <param name="doc"></param>
            <param name="v"></param>
            <param name="fillColor">如果不指定颜色，则“按材质”显示</param>
            <param name="transparency"> 表面填充的透明度，0表示不透明，100表示全透明 </param>
        </member>
        <member name="T:OldW.Excavation.ExcavationStage">
            <summary> 开挖土体当前的开挖状态 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationStage.UnStarted">
            <summary> 还未开始开挖 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationStage.Excavating">
            <summary> 当前正在开挖 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationStage.Completed">
            <summary> 已经开挖完成 </summary>
        </member>
        <member name="F:OldW.Excavation.ExcavationStage.UnKown">
            <summary> 开挖状态未知 </summary>
        </member>
        <member name="T:OldW.Excavation.Soil_Model">
            <summary>
            基坑中的开挖土体，整个模型中，只有一个土体元素
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldW.Excavation.Soil_Model.Group">
            <summary>
            此模型土体所位于的组。
            注意：所有的土体开挖模型都会位于此组中，如果将开挖土体从此组中移除，则不会被识别为开挖土体。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Excavation.Soil_Model._isUnGrouped">
            <summary> 当前土体模型是否处于解组状态 </summary>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.RemoveSoil(Autodesk.Revit.DB.Transaction,OldW.Excavation.Soil_Excav)">
            <summary>
            从当前的开挖状态中，移除指定的一块土，用来模拟土体的开挖
            </summary>
            <param name="tranDoc"></param>
            <param name="soilToRemove"> 此开挖土体应该与模型土体位于同一个 Group 内，
            但是如果不在同一个组内，本方法也会将其转移到同一个组内。 </param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.RemoveSoils(Autodesk.Revit.DB.Transaction,System.Collections.Generic.List{OldW.Excavation.Soil_Excav})">
            <summary>
            从当前的开挖状态中，移除指定的开挖土体集合，用来模拟土体的开挖
            </summary>
            <param name="tranDoc"></param>
            <param name="soilsToRemove"> 集合中的开挖土体应该与模型土体位于同一个 Group 内，
            但是如果不在同一个组内，本方法也会将其转移到同一个组内。</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.RemoveSoils(Autodesk.Revit.DB.Transaction)">
            <summary>
            设置模型土体所在的 group 中所有的开挖土体集合与此模型土体的剪切关系
            </summary>
            <param name="tranDoc"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.FillSoil(OldW.Excavation.Soil_Excav)">
            <summary>
            从当前的开挖状态中，添加进指定的一块土，用来模拟土方的回填，或者反向回滚开挖状态
            </summary>
            <param name="SoilToRemove"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.#ctor(OldW.Excavation.ExcavationDoc,Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            构造函数：不要直接通过New Soil_Model来创建此对象，而应该用 OldWDocument.GetSoilModel，或者是Create静态方法来从模型中返回。
            </summary>
            <param name="excavDoc">模型土体单元所位于的文档</param>
            <param name="ModelSoil">模型中的开挖土体单元</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.IsSoildModel(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String@)">
            <summary>
            对于一个单元进行全面的检测，以判断其是否为一个模型土体单元。
            </summary>
            <param name="doc">进行土体单元搜索的文档</param>
            <param name="SoilElementId">可能的土体单元的ElementId值</param>
            <param name="FailureMessage">如果不是，则返回不能转换的原因。</param>
            <returns>如果检查通过，则可以直接通过Create静态方法来创建对应的模型土体</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.Create(OldW.Excavation.ExcavationDoc,Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            创建模型土体。除非是在API中创建出来，否则。在创建之前，请先通过静态方法IsSoildModel来判断此族实例是否可以转换为Soil_Model对象。否则，在程序运行过程中可能会出现各种报错。
            </summary>
            <param name="ExcavDoc"></param>
            <param name="SoilElement"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.UnGroup(Autodesk.Revit.DB.Transaction)">
            <summary>
            将模型土体所在的 group 进行解组操作，并返回其中的开挖土体。
            注意在解组后务必还要通过 ReGroup 方法进行重组。
            </summary>
            <param name="tranDoc"></param>
            <returns> 此组合中所有的开挖土体单元 </returns>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.ReGroup(Autodesk.Revit.DB.Transaction,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary>
            将通过 UnGroup 方法进行解组后的 group 重新组合起来
            </summary>
            <param name="tranDoc"></param>
            <param name="excavSoils"> 开挖土体单元的集合，集合中也可以包含模型土体单元。</param>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.ContainsExcavSoil(Autodesk.Revit.DB.ElementId)">
            <summary>
            模型土体所在的 Group 中是否包含指定的单元（除了模型土体单元本身）
            </summary>
            <param name="soilId"> 要搜索的开挖土体的 Id 值（可以包含模型土体，但是对应的值会返回 false）</param>
            <returns></returns>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.ContainsExcavSoils(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary>
            模型土体所在的 Group 中是否包含指定的单元（除了模型土体单元本身）
            </summary>
            <param name="soilIds">要搜索的开挖土体的 Id 值（可以包含模型土体，但是对应的值会返回 false）</param>
            <returns> 与 soilIds 集合相对应，表示每一个开挖土体是否包含在集合中。 </returns>
        </member>
        <member name="M:OldW.Excavation.Soil_Model.GetExcavSoilsInGroup(System.Boolean)">
            <summary> 获取模型土体所在的 group 中的其他所有的（开挖土体）单元 </summary>
            <param name="unGroup">只提取组合中的开挖土体，还是要附带将这个组合进行解组操作</param>
            <returns></returns>
        </member>
        <member name="T:OldW.Instrumentations.ExcelMapping">
            <summary>
            将不同的Excel工作表字段的名称映射到Revit对应的测点中去
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.ValidateSheetName(System.String)">
            <summary>
            验证给定的字符是否可以作为 Excel 的工作表的名称，如果不行，则按某种规则转换为有效的 Excel 工作表名称
            </summary>
            <param name="originalName"></param>
            <returns> 转换后的有效的 Excel 工作表名称 </returns>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.MultiPointsInSheet(System.String)">
            <summary> 指定的Excel工作表中是包含多个测点（点测点）还是只包含一个测点（线测点） </summary>
            <param name="excelSheetName"></param>
            <returns> 如果此工作表中有多个点测点，比如“地表隆沉”，则返回true；
            如果此工作表就代表一个线测点，则返回false。 </returns>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.IsRevitLine(System.String)">
            <summary> 此工作表名称所对应的测点类型在Revit中是否是一个线测点类型 </summary>
            <param name="excelSheetName"></param>
            <returns> 如果此工作表名称代表一类测点，比如“地表隆沉”，则返回true；
            如果此工作表就代表一个测斜测点，则返回false。 </returns>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.MapToType(System.String)">
            <summary>
            由字段名称来匹配出对应的测点类型
            </summary>
            <param name="excelSheetName"> Excel工作表的名称，不包含后缀$</param>
            <returns></returns>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.GetNumberFromField(System.String)">
            <summary> 根据给出的字段名匹配出对应的测点编号 </summary>
            <param name="excelPointOrLineName"> Excel中的测点编号，此编号可以了线测点的编号如CX01，也可以是点测点的编号如DB01。 </param>
            <returns> 如果能匹配出编号12或者编号2-12这两种模式，则返回对应的数值字符，如果不能匹配，则返回空字符</returns>
        </member>
        <member name="M:OldW.Instrumentations.ExcelMapping.GetDigitalNodeName(System.String)">
            <summary>
            将数值子节点型的线测点在Excel中的子节点名称转换为对应的数值。如果不能转换成功，则报错。
            </summary>
            <param name="digitalNodeName"> 对于测斜管这类线测点，其每一个字段都是有严格的数值意义的，即代表了此子节点距离管顶的深度，
            所以在Excel工作表中，这些子节点的字段名的格式为“123、0#50、0.5、0dot5”，这时就要将其转换为对应的可以表示数值的“2.50”。 </param>
            <returns> 进行转换后的数值字符，如"2.50" </returns>
        </member>
        <member name="T:OldW.Instrumentations.InstrumCollector">
            <summary>
            测点收集器，用来对测点集合进行分类管理以及过滤等操作
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumCollector._allInstrumentations">
            <summary> 所有的测点的集合 </summary>
        </member>
        <member name="P:OldW.Instrumentations.InstrumCollector.AllInstrumentations">
            <summary> 所有的测点的集合 </summary>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.#ctor(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation})">
            <summary>
            构造函数
            </summary>
            <param name="instrums"> 要进行测点分类的测点集合 </param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.Truncate(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation})">
            <summary>
            清空原测点集合中的元素，并重新添加新的元素
            </summary>
            <param name="instrums"></param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.Append(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation})">
            <summary>
            直接向集合中附加新的测点
            </summary>
            <param name="instrums"></param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.GetMonitors(OldW.Instrumentations.InstrumentationType)">
            <summary> 按指定的类型过滤出集合中所有的测点 </summary>
            <param name="type"> 多种监测类型的按位组合 </param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.GetLineMonitors">
            <summary> 过滤出集合中所有的线测点 </summary>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.GetLineMonitors(OldW.Instrumentations.InstrumentationType)">
            <summary> 按指定的选项过滤出集合中所有的线测点 </summary>
            <param name="type"> 多种监测类型的按位组合 </param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.GetPointMonitors">
            <summary> 过滤出集合中所有的线测点 </summary>
        </member>
        <member name="M:OldW.Instrumentations.InstrumCollector.GetPointMonitors(OldW.Instrumentations.InstrumentationType)">
            <summary> 按指定的选项过滤出集合中所有的点测点 </summary>
            <param name="type"> 多种监测类型的按位组合 </param>
        </member>
        <member name="T:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol.Symbol">
            <summary> 用户在界面中选择的那一个族类型，如果未成功选择，则默认为集合中的第一个族类型。 </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol.#ctor(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementId})">
            <summary> 构造函数 </summary>
            <param name="doc"></param>
            <param name="symbolIds"></param>
        </member>
        <member name="F:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ChooseFamilySymbol.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer">
            <summary> 在放置测点单元时，进行测点初始化，比如进行命名 </summary>
        </member>
        <member name="F:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer.MonitorName">
            <summary> 测点名称 </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.ElementInitializer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.Instrumentations.MonitorSetterGetter.PickInstrums">
            <summary>
            测点过滤器
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.FilterdInstrumentations">
            <summary> 最终决定要选择的测点单元 </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.#ctor(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation},OldW.Instrumentations.InstrumDoc)">
            <summary> 构造函数 </summary>
            <param name="eleIdCollection">所有要进行处理的测点元素的Id集合</param>
            <param name="document"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.ConstructTreeView(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation})">
            <summary> 构造树形控件。一共分两级，第一级是测点类型，第二级是每种类型下的测点集合 </summary>
            <param name="allInstrums"></param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.TreeViewIns_AfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            在选择或者取消选择父节点时，对其子节点进行相同的操作
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PickInstrums.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.Instrumentations.MonitorSetterGetter.PlaceMonitor">
            <summary> 放置任意类型的监测测点 </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PlaceMonitor.PlaceInstrumentation(Autodesk.Revit.UI.ExternalCommandData@,System.String@,Autodesk.Revit.DB.ElementSet@,OldW.Instrumentations.InstrumentationType)">
            <summary> 放置各种类型的监测测点 </summary>
            <param name="type"> 要放置的测点类型 </param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PlaceMonitor.idling_RenameAddedInstrums(System.Object,Autodesk.Revit.UI.Events.IdlingEventArgs)">
            <summary> 在闲置事件中对新添加的测点进行重命名。 </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorSetterGetter.PlaceMonitor.InitializeInstrumentation(OldW.Instrumentations.Instrumentation)">
            <summary>
            监测单元的初始化
            </summary>
            <param name="ins"></param>
        </member>
        <member name="T:OldW.Instrumentations.DataExport">
            <summary>
            测点过滤器
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.DataExport.InstrumentationsToBeExported">
            <summary> 最终决定要导出到Excel的测点单元。字典中的键为每一类测点，值为此测点类型下要导出的测点单元 </summary>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.#ctor(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation},OldW.Instrumentations.InstrumDoc)">
            <summary> 构造函数 </summary>
            <param name="eleIdCollection">所有要进行处理的测点元素的Id集合</param>
            <param name="document"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.ConstructTreeView(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation})">
            <summary> 构造树形控件。一共分两级，第一级是测点类型，第二级是每种类型下的测点集合 </summary>
            <param name="eleIdCollection"></param>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.TreeViewIns_AfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            在选择或者取消选择父节点时，对其子节点进行相同的操作
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:OldW.Instrumentations.DataExport._backgroundWorker">
            <summary> 执行数据导入操作的后台线程 </summary>
        </member>
        <member name="F:OldW.Instrumentations.DataExport._conn">
            <summary> 要导出数据的Excel工作簿 </summary>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.buttonOk_Click(System.Object,System.EventArgs)">
            <summary> 点击“导出-->”按钮 </summary>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.BackgroundWorkerOnDoWork_ImportFromExcel(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            开始在后台线程中实际执行测点数据从Excel导入Revit的操作
            </summary>
            <param name="sender"></param>
            <param name="e"> 输入前请确保 e.Argument所对应的集合的Count > 0 </param>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.ExportOneType(OldW.Instrumentations.InstrumentationType,System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation})">
            <summary>
            导出一类测点到一个或者多个 Excel 工作表
            </summary>
            <param name="type"></param>
            <param name="elems"></param>
        </member>
        <member name="F:OldW.Instrumentations.DataExport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.Instrumentations.DataExport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.Instrumentations.InstrumentationType">
            <summary>
            (位编码)监测仪器的族名称（也是族文件的名称），同时也作为监测仪器的类型判断
            </summary>
            <remarks>从枚举值返回对应的枚举字符的方法：GlobalSettings.InstrumentationType.沉降测点.ToString</remarks>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.未指定">
            <summary> 并不是任何一种已经指定的线测点或者点测点类型 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.其他点测点">
            <summary> 并不是任何一种已经特殊处理过的点测点类型 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.其他线测点">
            <summary> 并不是任何一种已经特殊处理过的线测点类型 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.墙体测斜">
            <summary> 比如地下连续墙的水平位移 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.土体测斜">
            <summary> 比如土体中的测斜管的水平位移，它与墙体测斜的区别在于墙体测斜是嵌在地下连续墙中，
            而且墙体测斜与土体测斜的安全警戒准则并不相同。 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.墙顶位移">
            <summary> 墙顶位移的监测数据包括水平位移与垂直位移。
            在Excel中通过两张表“墙顶水平位移”与“墙顶垂直位移”来保存。 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.地表隆沉">
            <summary> 比如基坑外地表的垂直位移 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.立柱隆沉">
            <summary> 比如基坑中立柱的垂直位移 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.支撑轴力">
            <summary> 比如基坑中支撑的轴力 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.水位">
            <summary> 比如基坑中水位测点处的水位高低 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.非数值线测点集合">
            <summary> 通过位运算进行组合的非数值线测点的集合。不包括墙体测斜这种子节点有数值意义的线测点 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.数值线测点集合">
            <summary> 通过位运算进行组合的数值线测点的集合。不包括墙顶位移这种子节点没有数值意义的线测点 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.线测点集合">
            <summary> 通过位运算进行组合的所有线测点的集合。包括墙顶位移 </summary>
        </member>
        <member name="F:OldW.Instrumentations.InstrumentationType.点测点集合">
            <summary> 通过位运算进行组合的所有点测点的集合。 </summary>
        </member>
        <member name="T:OldW.Instrumentations.InstrumDoc">
            <summary> 用来执行基坑中的测点布置，监测数据管理等操作 </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.InstrumDoc.#ctor(OldWDocument)">
            <summary> 构造函数 </summary>
            <param name="OldWDoc"></param>
        </member>
        <member name="M:OldW.Instrumentations.InstrumDoc.SetFamily(OldW.Instrumentations.InstrumentationType)">
            <summary>
            放置测点
            </summary>
            <param name="monitorType"> 要放置的测点类型 </param>
            <returns></returns>
        </member>
        <member name="M:OldW.Instrumentations.InstrumDoc.FillCombobox(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation},System.Object)">
            <summary>
            将指定的测点集合对象转换为组合列表框Combox控件的DataSource类型。
            </summary>
            <param name="elementCollection"></param>
            <param name="comboboxControl"> ComboBox 控件对象或者 DataGridViewComboBoxCell 控件对象  </param>
            <returns> </returns>
        </member>
        <member name="M:OldW.Instrumentations.InstrumDoc.GetComboboxDatasource(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrumentation})">
            <summary>
            将指定的测点集合对象转换为组合列表框Combox控件的DataSource类型。
            </summary>
            <param name="elementCollection"></param>
            <returns> </returns>
        </member>
        <member name="M:OldW.Instrumentations.InstrumDoc.PointsToDatatable(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{OldW.Instrumentations.MonitorData_Point}},System.String)">
            <summary> 将多个点测点（或者线测点中的多个子节点）的监测数据Revit中导出到Excel中。
            如果指定的点测点（或者线测点中的多个子节点）中没有数据，则返回的表格中只有一个“时间”字段 </summary>
            <param name="fieldPoints"> 字典中的每一键代表多个点测点（或者线测点中的多个子节点）的测点名称，值代表此测点或者子节点每一天的监测数据 </param>
            <param name="tableName"> 表格的标题名称，此名称在后期自然是可以修改的。 </param>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_WallTop">
            <summary>
            墙顶位移测点
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallTop.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary> 构造函数 </summary>
            <param name="inclinometerElement">测斜管所对应的图元</param>
        </member>
        <member name="F:OldW.Instrumentations.Instrum_WallTop.enteredTransactionHashCode">
            <summary> 假设 Revit 开启的事务的HashCode不可能为0。 </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallTop.ImportFromExcel(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary> 将Excel中墙顶位移监测数据（两个点测点的格式）导入Revit的测点单元（线测点）中 </summary>
            <param name="tran"> 已经start的Revit事务 </param>
            <param name="conn">连接到Excel工作簿</param>
            <param name="sheetName">监测数据所在的Excel工作表，表名称中应该包含后缀$ </param>
            <param name="fieldName">监测数据在工作表中的哪个字段下。对于线测点，其fieldName是不必要的。</param>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallTop.TruncateAndAddOneField(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String,System.Byte)">
            <summary> 采用先清空的方式导入第一个子节点的监测数据 </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallTop.AppendOneField(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String,System.Byte)">
            <summary> 采用附加的方式导入另一个子节点的监测数据 </summary>
        </member>
        <member name="T:OldW.Instrumentations.MonitorData_Point">
            <summary> 监测数据类，表示点测点（或者也可以表示线测点中的子节点）中的每一天的监测数据 </summary>
        </member>
        <member name="P:OldW.Instrumentations.MonitorData_Point.Date">
            <summary>
            监测日期
            </summary>
        </member>
        <member name="P:OldW.Instrumentations.MonitorData_Point.Value">
            <summary>
            监测数据，如果当天没有数据，则为null
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Point.#ctor(System.DateTime,System.Nullable{System.Single})">
            <summary>
            构造函数
            </summary>
            <param name="Date"></param>
            <param name="Value"></param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Point.FromDataTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            从 DataTable 对象中指定的两个字段提取出点测点的监测数据的实体类集合
            </summary>
            <param name="table"> 要进行数据提取的表格 </param>
            <param name="indexDate"> 日期数据在 table 中所在的列的列号 </param>
            <param name="indexValue"> 监测数据在 table 中所在的列的列号 </param>
            <returns> 实体类集合，用来作为 Instrum_Point.SetMonitorData 的输入参数 </returns>
        </member>
        <member name="T:OldW.Instrumentations.MonitorData_Line">
            <summary>
            线测点中的每一天的监测数据
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldW.Instrumentations.MonitorData_Line._nodes">
            <summary>
            因为从概念上来说，所谓的线测点，其子节点们不一定是表示深度的数值区分，而是指一个测点中有多个监测项目。
            比如测斜管是在一个测点中的不同深度下有多个监测数据，而墙顶位移是一个测点中有水平与竖直两个监测数据。
            </summary>
        </member>
        <member name="P:OldW.Instrumentations.MonitorData_Line.MonitorData">
            <summary>
            测斜管在每一天的监测数据。其中，SortedDictionary 中的Value项 为一个数组，
            它代表对应的日期下，Depths中每一个深度处所对应的监测数据值，
            所以，此数组中元素的个数必须要与Depths数组中元素的个数相同。
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.MonitorData_Line.NodesDigital">
            <summary>
            子节点的名称是否有数值意义
            </summary>
            <remarks> 线测点的子节点是广义上的同一个测点中所监测的不同类型的数据，比如墙顶位移测点就有“墙顶垂直位移”与 “墙顶水平位移”两个子节点。
            但是对于测斜管这类线测点，其每一个字段都是有严格的数值意义的，即代表了此子节点距离管顶的深度。</remarks>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Line.#ctor(System.String[],System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="nodes">线测点上的每一个子节点的深度（相对于线测点的顶端或起点而言）</param>
            <param name="nodesDigital">子节点的名称是否有数值意义</param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Line.#ctor(System.String[],System.Collections.Generic.SortedDictionary{System.DateTime,System.Nullable{System.Single}[]},System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="nodes">线测点上的每一个子节点的深度（相对于线测点的顶端或起点而言）</param>
            <param name="monitoredData">已经记录好的监测数据</param>
            <param name="nodesDigital">子节点的名称是否有数值意义</param>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Line.GetDigitalNodes">
            <summary> 获取线测点的子节点的名称所对应的数值。如果不能转换为数值，则给出报错。 </summary>
            <returns>对于测斜管这类线测点，其每一个字段都是有严格的数值意义的，即代表了此子节点距离管顶的深度。</returns>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Line.GetStringNodes">
            <summary> 获取线测点的子节点的名称 </summary>
        </member>
        <member name="M:OldW.Instrumentations.MonitorData_Line.FromDataTable(System.Data.DataTable,System.Boolean)">
            <summary>
            从 DataTable 对象提取出此线测点的所有监测数据
            </summary>
            <param name="table"> 要进行数据提取的表格的第一个字段必须是用来存储时间信息的主键 </param>
            <param name="convertStringToSingle"> 对于测斜管这类线测点，其每一个字段都是有严格的数值意义的，即代表了此子节点距离管顶的深度，
            所以在Excel工作表中，这些子节点的字段名的格式为“123、0#50、0.5、0dot5”，这时就要将其转换为对应的可以表示数值的“2.50”。 </param>
            <returns> 实体类，用来作为 Instrum_Line.SetMonitorData 的输入参数 </returns>
        </member>
        <member name="T:OldW.Instrumentations.Instrumentation">
            <summary>
            监测测点：包括线测点（测斜管）或点测点（地表沉降、立柱隆起、支撑轴力）等
            </summary>
            <remarks>
            对于点测点而言，其监测数据是在不同的时间记录的，每一个时间上都只有一个数据。所以其监测数据是一个两列的表格，第一列为时间，第二列为监测数据。
            对于线测点而言（比如测斜管），在每一个时间上都有两列数据，用来记录这一时间上，线测点中每一个位置的监测值。
            </remarks>
        </member>
        <member name="P:OldW.Instrumentations.Instrumentation.Document">
            <summary> 测点所在的Revit文档 </summary>
        </member>
        <member name="P:OldW.Instrumentations.Instrumentation.IdName">
            <summary> 测点的标志文字，一般格式为“墙体测斜（CX3）: 568742” </summary>
        </member>
        <member name="P:OldW.Instrumentations.Instrumentation.Monitor">
            <summary>
            监测仪器，对于点测点，其包括地表沉降、立柱隆起、支撑轴力等；
            对于线测点，包括测斜管
            </summary>
        </member>
        <member name="P:OldW.Instrumentations.Instrumentation.Type">
            <summary> 监测点的测点类型，也是测点所属的族的名称 </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.#ctor(Autodesk.Revit.DB.FamilyInstance,OldW.Instrumentations.InstrumentationType)">
            <summary>
            构造函数
            </summary>
            <param name="Instrumentation">所有类型的监测仪器，包括线测点（测斜管）或点测点（地表沉降、立柱隆起、支撑轴力）等</param>
            <param name="Type">监测点的测点类型，也是测点所属的族的名称</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.Lookup(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary> 从指定的Element集合中，找出所有的监测点元素 </summary>
            <param name="Elements"> 要进行搜索过滤的Element集合</param>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.Lookup(Autodesk.Revit.DB.Document)">
            <summary> 从整个文档中找出所有的监测点元素 </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.LookupFromCollector(Autodesk.Revit.DB.FilteredElementCollector)">
            <summary>
            从 FilteredElementCollector 集合中，找出所有的监测点元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.GetMonitorName">
            <summary>
            提取测点的名称，比如“CX1”。此参数是在测点族的设计时添加进去的，而不是通过API添加的。
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.SetMonitorName(Autodesk.Revit.DB.Transaction,System.String)">
            <summary>
            设置测点的名称，比如“CX1”。此参数是在测点族的设计时添加进去的，而不是通过API添加的。但是其值可以通过API设置。
            </summary>
            <summary>
            将测点数据类序列化之后的字符保存到测点对象的参数中。
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.GetMonitorDataString">
            <summary>
            提取测点监测数据所对应的序列化字符。即测点族中“监测数据”参数中的字符。
            如果要提取监测数据为对应的数据类，可以去调用具体派生类的 GetMonitorData 函数
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.SetMonitorDataString(Autodesk.Revit.DB.Transaction,System.String)">
            <summary>
            将测点数据类序列化之后的字符保存到测点对象的参数中。
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrumentation.ImportFromExcel(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary> 从Excel中导入监测数据 </summary>
            <param name="tran"> 已经start的Revit事务 </param>
            <param name="conn">连接到Excel工作簿</param>
            <param name="sheetName">监测数据所在的Excel工作表，表名称中应该包含后缀$ </param>
            <param name="fieldName">监测数据在工作表中的哪个字段下。对于线测点，其fieldName是不必要的。</param>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_ColumnHeave">
            <summary>
            测点_立柱垂直位移
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_ColumnHeave.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary> 构造函数 </summary>
            <param name="ColumnHeaveElement">立柱垂直位移测点所对应的图元</param>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_GroundSettlement">
            <summary>
            测点_地表垂直位移
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_GroundSettlement.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary> 构造函数 </summary>
            <param name="GroundSettlementElement">地表垂直位移测点所对应的图元</param>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_WallIncline">
            <summary>
            测点_测斜管
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Instrumentations.Instrum_WallIncline._isInsideEarth">
            <summary> 测斜管的位置是在模型中的开挖土体的内部还是外部，即测斜管与开挖土体的Element是否相交。 </summary>
            <remarks>True if the inclinometer is inside the excavation earth,
            and False if the inclinometer is outside the excavation earth.</remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallIncline.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary> 构造函数 </summary>
            <param name="inclinometerElement">测斜管所对应的图元</param>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallIncline.FindAdjacentEarthElevation(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            找到距离此测斜管最近的土体开挖面的标高值
            </summary>
            <param name="SoilElement">模型中的土体单元，即此测斜管附近的开挖土体单元</param>
            <returns>如果没有找到对应的标高值，则返回 null</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_WallIncline.FindBottomPoint(Autodesk.Revit.DB.XYZ,System.Boolean,Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.ReferenceIntersector)">
            <summary>
            搜索一个底部坐标点，有了此点后，只要向上发射一条射线，即可以找到此时的开挖面
            </summary>
            <param name="ptInclinometerBottom">测斜管的底部坐标点</param>
            <param name="IsInside">测斜管是否在开挖土体Element的内部</param>
            <param name="Earth">开挖土体单元</param>
            <param name="IntersectedEarth">用来搜索相交面的开挖土体</param>
            <returns></returns>
            <remarks>  如果测斜管就在土体内部，那么测斜管的底部点就可以直接用来向上发射射线了。
            如果测斜管在土体外部，那么需要以测斜管的底部点为中心，向四周发射多条射线，
            这些射线分别都与土体相交，找到距离土体最近的那一条射线所对应的相交点与相交面，然后将相交点向面内偏移一点点，即可以作为寻找开挖面的射线的原点了。</remarks>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_Line">
            <summary>
            所有类型的线监测，包括测斜管
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Instrumentations.Instrum_Line._monitorData">
            <summary>
            线测点的整个施工阶段中的监测数据
            </summary>
        </member>
        <member name="F:OldW.Instrumentations.Instrum_Line.NodesDigital">
            <summary>
            子节点的名称是否有数值意义
            </summary>
            <remarks> 线测点的子节点是广义上的同一个测点中所监测的不同类型的数据，比如墙顶位移测点就有“墙顶垂直位移”与 “墙顶水平位移”两个子节点。
            但是对于测斜管这类线测点，其每一个字段都是有严格的数值意义的，即代表了此子节点距离管顶的深度。</remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.#ctor(Autodesk.Revit.DB.FamilyInstance,OldW.Instrumentations.InstrumentationType,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="MonitorLine">所有类型的监测管线，包括测斜管，但不包括地表沉降、立柱隆起、支撑轴力等</param>
            <param name="Type">监测点的测点类型，也是测点所属的族的名称</param>
            <param name="nodesDigital"> 子节点的名称是否有数值意义 </param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.Lookup(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary>
            从指定的Element集合中，找出所有的点测点元素
            </summary>
            <param name="elements"> 要进行搜索过滤的Element集合</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.GetMonitorData">
            <summary>
            将测点对象中的监测数据提取为具体的序列化类。
            其中包括线测点的每一个子节点的数据，以及整个线测点在整个施工过程中所有的测点数据。
            </summary>
            <returns>如果在派生类中将此方法进行重写，则一定要对应地对 <see cref="M:OldW.Instrumentations.Instrum_Line.SetMonitorData(Autodesk.Revit.DB.Transaction,OldW.Instrumentations.MonitorData_Line)"/> 方法进行重写。</returns>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.SetMonitorData(Autodesk.Revit.DB.Transaction,OldW.Instrumentations.MonitorData_Line)">
            <summary>
            将监测数据以序列化字符串保存到对应的Parameter对象中。
            </summary>
            <remarks>如果在派生类中将此方法进行重写，则一定要对应地对 <see cref="M:OldW.Instrumentations.Instrum_Line.GetMonitorData"/> 方法进行重写。</remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.ImportFromExcel(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary> 从Excel中导入监测数据 </summary>
            <param name="tran"> 已经start的Revit事务 </param>
            <param name="conn">连接到Excel工作簿</param>
            <param name="sheetName">监测数据所在的Excel工作表，表名称中应该包含后缀$ </param>
            <param name="fieldName">监测数据在工作表中的哪个字段下。对于线测点，其fieldName是不必要的。</param>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.ConvertToDatatable(System.Data.OleDb.OleDbConnection)">
            <summary> 将Revit中的线测点的监测数据导出到Excel工作表中。 </summary>
            <param name="conn">连接到Excel工作簿</param>
            <returns> 如果此测点中没有监测数据，则返回 null </returns>
            <remarks>对于线测点的子节点有数值意义的情况（墙体测斜），每一个线测点都对应一个工作表；
            对于线测点的子节点无数值意义的情况（墙顶位移），每一个子节点类型对应一个工作表；</remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Line.ConvertToDatatables(System.Collections.Generic.IList{OldW.Instrumentations.Instrum_Line})">
            <summary> 将Revit中的线测点的监测数据导出到Excel工作表中。 </summary>
            <param name="lines"> <see cref="F:OldW.Instrumentations.Instrum_Line.NodesDigital"/>属性为false的线测点的集合。
            集合中的测点必须是同一种测点类型，而且每个测点中的子节点数目要相同。因为要将其放到同一个Excel工作表内 </param>
            <remarks>对于线测点的子节点有数值意义的情况（墙体测斜），每一个线测点都对应一个工作表；
            对于线测点的子节点无数值意义的情况（墙顶位移），每一个子节点类型对应一个工作表；</remarks>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_Point">
            <summary>
            所有类型的监测点，包括地表沉降、立柱隆起、支撑轴力等，但不包括测斜管
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.#ctor(Autodesk.Revit.DB.FamilyInstance,OldW.Instrumentations.InstrumentationType)">
            <summary>
            构造函数
            </summary>
            <param name="MonitorPoint">所有类型的监测点，包括地表沉降、立柱隆起、支撑轴力等，但不包括测斜管</param>
            <param name="Type">监测点的测点类型，也是测点所属的族的名称</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.Lookup(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary>
            从指定的Element集合中，找出所有的点测点元素
            </summary>
            <param name="Elements"> 要进行搜索过滤的Element集合</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:OldW.Instrumentations.Instrum_Point._monitorData">
            <summary>
            点测点的整个施工阶段中的监测数据
            </summary>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.GetMonitorData">
            <summary>
            将测点对象中的监测数据提取为具体的序列化类
            </summary>
            <returns>如果在派生类中将此方法进行重写，则一定要对应地对 <see cref="M:OldW.Instrumentations.Instrum_Point.SetMonitorData(Autodesk.Revit.DB.Transaction,System.Collections.Generic.List{OldW.Instrumentations.MonitorData_Point})"/> 方法进行重写。</returns>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.SetMonitorData(Autodesk.Revit.DB.Transaction,System.Collections.Generic.List{OldW.Instrumentations.MonitorData_Point})">
            <summary>
            将监测数据以序列化字符串保存到对应的Parameter对象中。
            </summary>
            <remarks>如果在派生类中将此方法进行重写，则一定要对应地对 <see cref="M:OldW.Instrumentations.Instrum_Point.GetMonitorData"/> 方法进行重写。</remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.ImportFromExcel(Autodesk.Revit.DB.Transaction,System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary> 从Excel中导入监测数据 </summary>
            <param name="tran"> 已经start的Revit事务 </param>
            <param name="conn">连接到Excel工作簿</param>
            <param name="sheetName">监测数据所在的Excel工作表，表名称中应该包含后缀$ </param>
            <param name="fieldName">监测数据在工作表中的哪个字段下。对于线测点，其fieldName是不必要的。</param>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_Point.ConvertToDatatable(System.Collections.Generic.IEnumerable{OldW.Instrumentations.Instrum_Point})">
            <summary> 将多个点测点的监测数据Revit中导出到Excel中  </summary>
            <param name="points">监测数据在工作表中的哪个字段下。对于线测点，其fieldName是不必要的。</param>
        </member>
        <member name="T:OldW.Instrumentations.Instrum_StrutAxialForce">
            <summary>
            测点_支撑轴力
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.Instrumentations.Instrum_StrutAxialForce.#ctor(Autodesk.Revit.DB.FamilyInstance)">
            <summary> 构造函数 </summary>
            <param name="StrutAxialForceElement"> 支撑轴力测点所对应的图元</param>
        </member>
        <member name="E:OldW.DynamicStages.ViewStageDynamicallyHandler1.CurrentTimeChanged">
            <summary> 当前播放和进度 CurrentTime 属性改变时触发 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler1.SpanValue">
            <summary> 每一帧动画所对应的施工日期跨度 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler1._intervals">
            <summary> 每一帧动画之间的时间间隔，单位为毫秒 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler1.Intervals">
            <summary> 每一帧动画之间的时间间隔，单位为毫秒 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler1.CurrentTime">
            <summary> 当前动画正在展示的时间 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler1.LoopPlay">
            <summary> 循环播放，在播放到结尾时，再转到开始时间继续播放 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler1.BackPlay">
            <summary> 倒退播放，从最后面的时间向最开始的时间播放 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler1._timer">
            <summary> 用来展示动画的计时器 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler1._exEvent">
            <summary> 用来在Revit中进行施工工况的动画刷新的外部事件 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.#ctor(Autodesk.Revit.UI.UIApplication)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.Finalize">
            <summary> 析构函数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.SetBackPlay">
            <summary> 设置为倒退播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.GetTimeBasedOnRatio(System.Int32)">
            <summary> 根据指定的比例返回对应的施工日期 </summary>
            <param name="ratio">输入的值范围为[0,100]，0代表开始时间，100代表结束时间</param>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.GetRatioBasedOnTime(System.DateTime)">
            <summary> 根据指定的日期返回其在 StartTime 与 EndTime 之间的比例 </summary>
            <param name="time"> 某一个施工日期 </param>
            <returns>返回一个位于[0,100]的整数值</returns>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.Play">
            <summary> 开始播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.Pause">
            <summary> 暂停播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.Stop">
            <summary> 停止播放 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler1._isPlaying">
            <summary> 当前正在执行Revit动画展示，此时不能再次进行触发。 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.TimerOnTick(System.Object,System.EventArgs)">
            <summary> 在每一次计时器脉冲时，进行动画的刷新。 </summary>
            <param name="sender"></param>
            <param name="e"></param> 
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.CheckProgress(System.DateTime,System.DateTime@)">
            <summary> 检查当前播放进度，并按需要（是否超出指定的起止界限）调整实际播放的工况日期 </summary>
            <param name="desiredTime"> 想要播放的工况日期，但是此日期有可能超出了指定的起止界限 </param>
            <param name="playTime"> 实际要播放的工况日期 </param>
            <returns>如果返回true，则继续播放，如果返回false，则表示可以停止播放了。</returns>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.ExternalRefreshView(System.DateTime)">
            <summary> 根据指定的施工日期来刷新 Revit 界面 </summary>
            <param name="currentTime"> 此 currentTime 必须是位于 StartTime 与 EndTime 之间的一个有效日期 </param>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler1.RefreshView(System.DateTime)">
            <summary> 根据指定的施工日期来刷新 Revit 界面 </summary>
        </member>
        <member name="E:OldW.DynamicStages.ViewStageDynamicallyHandler.CurrentTimeChanged">
            <summary> 当前播放和进度 CurrentTime 属性改变时触发 </summary>
        </member>
        <member name="E:OldW.DynamicStages.ViewStageDynamicallyHandler.PlayerStopped">
            <summary> 播放器停止播放 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler.SpanValue">
            <summary> 每一帧动画所对应的施工日期跨度 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler._intervals">
            <summary> 每一帧动画之间的时间间隔，单位为毫秒 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler.Intervals">
            <summary> 每一帧动画之间的时间间隔，单位为毫秒 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler.CurrentTime">
            <summary> 当前动画正在展示的时间 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler.LoopPlay">
            <summary> 循环播放，在播放到结尾时，再转到开始时间继续播放 </summary>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageDynamicallyHandler.BackPlay">
            <summary> 倒退播放，从最后面的时间向最开始的时间播放 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler._exEvent">
            <summary> 用来在Revit中进行施工工况的动画刷新的外部事件 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.#ctor(Autodesk.Revit.UI.UIApplication)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.PlayOptionsInitialize">
            <summary> 对播放器的播放属性进行初始化 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.Finalize">
            <summary> 析构函数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.GetTimeBasedOnRatio(System.Int32)">
            <summary> 根据指定的比例返回对应的施工日期 </summary>
            <param name="ratio">输入的值范围为[0,100]，0代表开始时间，100代表结束时间</param>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.GetRatioBasedOnTime(System.DateTime)">
            <summary> 根据指定的日期返回其在 StartTime 与 EndTime 之间的比例 </summary>
            <param name="time"> 某一个施工日期 </param>
            <returns>返回一个位于[0,100]的整数值</returns>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.Play">
            <summary> 开始播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.Pause">
            <summary> 暂停播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.Stop">
            <summary> 停止播放 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.StopFromScroll(System.DateTime)">
            <summary>  </summary>
            <param name="currentTime"> 此 currentTime 必须是位于 StartTime 与 EndTime 之间的一个有效日期 </param>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler._isPlaying">
            <summary> 当前正在执行Revit动画展示，此时不能再次进行触发。 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.UiAppOnIdling(System.Object,Autodesk.Revit.UI.Events.IdlingEventArgs)">
            <summary> 在每一次 Iding 事件时，进行动画的刷新。 </summary>
            <param name="sender"></param>
            <param name="idlingEventArgs"></param>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamicallyHandler._lastPulseTime">
            <summary>上一次成功发出Idling脉冲以及进行动画显示的时间 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.CheckIntervals">
            <summary>
            检查两次 Idling 事件之间的时间间隔是否满足指定的速度Interval的要求。
            </summary>
            <returns></returns>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.CheckProgress(System.DateTime,System.DateTime@)">
            <summary> 检查当前播放进度，并按需要（是否超出指定的起止界限）调整实际播放的工况日期 </summary>
            <param name="desiredTime"> 想要播放的工况日期，但是此日期有可能超出了指定的起止界限 </param>
            <param name="playTime"> 实际要播放的工况日期 </param>
            <returns>如果返回true，则继续播放，如果返回false，则表示可以停止播放了。</returns>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamicallyHandler.RefreshView(System.DateTime)">
            <summary> 根据指定的施工日期来刷新 Revit 界面 </summary>
            <param name="currentTime"> 此 currentTime 必须是位于 StartTime 与 EndTime 之间的一个有效日期 </param>
        </member>
        <member name="T:OldW.DynamicStages.PlayOption">
            <summary> 控件播放器的播放选项 </summary>
        </member>
        <member name="F:OldW.DynamicStages.PlayOption.PlayAndStop">
            <summary> 在指定的时间下显示一次，然后停止播放 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageManuallyHandler.ExternalEventArgs">
            <summary> Execute 的参数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageManuallyHandler.OnConstructionDateChanged(Autodesk.Revit.DB.Transaction,Autodesk.Revit.DB.View,System.DateTime)">
            <summary> 根据施工日期刷新模型 </summary>
            <param name="tranDoc"></param>
            <param name="uiApp"></param>
            <param name="constructionTime"></param>
        </member>
        <member name="T:OldW.DynamicStages.ReviewDoc">
            <summary> 在基坑开挖模拟中，对 指定的开挖土体集合 进行不同时间下的动态开挖展示 </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.DynamicStages.ReviewDoc._excavSoils">
            <summary> 用来进行开挖预览的开挖土体单元 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ReviewDoc._excavDoc">
            <summary> 用来进行开挖模拟 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ReviewDoc.#ctor(OldWDocument,System.Collections.Generic.ICollection{OldW.Excavation.Soil_Excav})">
            <summary> 构造函数 </summary>
            <param name="oldWDoc"></param>
            <param name="excavSoils">用来进行开挖预览的开挖土体单元</param>
        </member>
        <member name="M:OldW.DynamicStages.ReviewDoc.CreateFromActiveDocument(Autodesk.Revit.UI.UIApplication,Autodesk.Revit.DB.Document)">
            <summary> 将指定的文档中的 所有开挖土体 都进行开挖工况的动画展示 </summary>
            <param name="uiApp"></param>
            <param name="doc">将会提取此文档中的所有开挖土体所组成的集合，来进行开挖工况的动画展示</param>
            <returns></returns>
        </member>
        <member name="M:OldW.DynamicStages.ReviewDoc.ShowExcavation(Autodesk.Revit.DB.Transaction,System.DateTime,Autodesk.Revit.DB.View)">
            <summary>
            根据指定的时间在Revit视图中显示出每一个开挖分块的开挖状态
            </summary>
            <param name="constructionTime"></param>
            <param name="view"></param>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamically.ScrollBarMaximumValue">
            <summary>
            正常情况下，这个值应该是和 hScrollBar1.Maximum 相等的，但是的 Win 10 系统下，
            即使设置Maximum = 100，而不论滚动条的UI尺寸大小如何，在界面上可能滚动出来的最大值却竟然都是只有91。
            </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamically.#ctor(OldWDocument)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamically.InitializeUI">
            <summary> 在构造完成 _VSDHandler 之后进行其他的界面设置 </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageDynamically.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamically.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageDynamically.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.DynamicStages.ViewStageManually">
            <summary>
            
            </summary>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageManually._exEvent">
            <summary>用来触发外部事件（通过其Raise方法） </summary>
            <remarks>ExEvent属性是必须有的，它用来执行Raise方法以触发事件。</remarks>
        </member>
        <member name="F:OldW.DynamicStages.ViewStageManually.ReqHandler">
            <summary> 用来响应外部事件中的不同需求（通过其Execute方法）。 </summary>
            <remarks>由于RequestHandler 对象是在构造ExternalEvent对象时就已经保存在ExternalEvent中的了，
            所以，如果Execute方法中并不需要判断到底要实现哪一个需求，则此属性是不必要的。</remarks>
        </member>
        <member name="P:OldW.DynamicStages.ViewStageManually.ActiveTime">
            <summary>
            当前的施工日期。通过指定此属性，即可以自动执行Revit中视图的刷新。
            </summary>
        </member>
        <member name="M:OldW.DynamicStages.ViewStageManually.#ctor(Autodesk.Revit.UI.UIApplication)">
            <summary> 构造函数 </summary>
        </member>
        <member name="T:OldW.DataManager.ElementDataManager">
            <summary>
            模型中的测点的监测数据的添加，删除，导入导出等
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData">
            <summary>
            与一个线测点相关的所有数据，包括测点信息，所有的监测数据，以及对应表格实体类的信息
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.Monitor">
            <summary> 线测点对象 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.Assembly">
            <summary> 此线测点的实体类所对应的程序集 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.DatagridViewData">
            <summary>
            在DataGridView中记录的监测数据，这些数据并不一定完全符合监测数据实体类的数据格式，
            只是存储下来以供后面再次切换到此测点时可以直接将数据恢复到Datagridview中，
            而不用每一次都去构造对应的实体类并且为每一天的实例数据赋值。
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.Nodes">
            <summary>
            此测点的节点数据。如果在DataGridView中修改了一个测点的节点信息，则其最新的节点数据会体现在这里。
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.EntityName">
            <summary> Datagridview 所绑定 表示线测点监测数据的实体类的名称，其所在的命名空间保存在常数 <see cref="F:OldW.DataManager.ElementDataManager.DgvLine.NamespaceName"/> 中</summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.#ctor(OldW.Instrumentations.Instrum_Line,System.Reflection.Assembly,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="monitor"></param>
            <param name="assemblyData"></param>
            <param name="entityName"> 实体类的名称 </param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.GetEntityClass">
            <summary>
            返回此测点所对应的实体类
            </summary>
            <returns></returns>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.GetMonitorData(System.Int32[],System.DateTime[]@)">
            <summary>
            返回指定数据行的监测数据
            </summary>
            <param name="rowIndexes"> 要提取的数据在BindingList中的行号
            （正常情况下其值应该与Datagridview中的行号相同，但是如果出现不同，以Bindinglist为准） </param>
            <param name="date"> 指定行中所对应的时间数据 </param>
            <returns> 指定行中所对应的监测数据 </returns>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.TableBindedData.CreateInstance">
            <summary>
            生成一个实体类的实例对象
            </summary>
            <returns></returns>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.CompiledAssemlies">
            <summary>
            已经编译好的实体类对象
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.activeInstruId">
            <summary> 表格中当前处理的那个测点。在为此属性赋值的过程中，会执行相关的刷新操作 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.OpenedTableSet">
            <summary>
            当前以经打开并且提取过监测数据的线测点对象。
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.#ctor(Autodesk.Revit.DB.Document,eZstd.UserControls.eZDataGridView)">
            <summary>
            构造函数
            </summary>
            <param name="doc"></param>
            <param name="dataGridViewLine"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ConstructDataGridView">
            <summary>
            创建 DataGridView 为点测点监测数据类型
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ShiftToNewElement(OldW.Instrumentations.Instrum_Line)">
            <summary> 与表格数据进行绑定的点测点监测数据集合 </summary>
            <summary>
            切换到新的线监测点
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ChangeNodes">
            <summary>
            设置当前活动节点的数据
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.SaveTableToElement">
            <summary>
            将表格中的数据保存到Element的对应参数中。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.InitialMonitorLine(OldW.Instrumentations.Instrum_Line)">
            <summary>
            对于还没有打开过的element，将其在 Datagridview 中打开，同时初始化相应的 TableBindedData 数据。
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.RefreshNodes(System.String[])">
            <summary>
            为指定的单元设置新的节点信息，并同时刷新 Datagridview 控件中的数据
            </summary>
            <param name="ele"></param>
            <param name="newNodes"> 节点修改前后，重新绑定数据集合与界面的刷新 </param>
            <remarks> 当节点信息改变后，有以下几种情况：
             1、 如果节点数目没有变，则 DataSource 不用变，只需要修改表格的表头文字而已
             2、 如果节点数目发生了变化，则 DataSource 所绑定的集合中的泛型将要发生改变，此时需要重新构造BindingList集合，并且将原来的数据行转换到新的集合中去。</remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ConvertBindingList(OldW.DataManager.ElementDataManager.DgvLine.TableBindedData)">
            <summary> 将 DataGridView 控件中绑定的数据集合转换为实体类 <see cref="T:OldW.Instrumentations.MonitorData_Point"/> 的集合。 </summary>
            <remarks> BindingList 中的元素如果有测点的监测日期为null，则进行剔除。</remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.FillBindingListFromParameter(OldW.DataManager.ElementDataManager.DgvLine.TableBindedData)">
            <summary> 将指定单元中的监测数据参数中的监测数据提取出来并 填充到 BindingList 集合中。</summary>
            <param name="monitorDataSet"> 某线测点的监测数据 </param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.FillBindingListFromList(System.ComponentModel.BindingList{System.Object},OldW.DataManager.ElementDataManager.DgvLine.TableBindedData)">
            <summary> 将Datagridview的DataSource进行重新绑定，并刷新事件AddingNew事件关联。</summary>
            <param name="sourceData"> 用来填充 Datagridview 的数据集合  </param>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvLine.NamespaceName">
            <summary> Datagridview 所绑定 表示线测点监测数据的实体类所在的命名空间的名称</summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.GetEntityAssembly(System.Int32,System.String@)">
            <summary> 返回指定节点数据所对应的实体类 </summary>
            <param name="nodesCount"> 如果nodesCount的值为0，则返回的实体类中只有一个属性“Date”</param>
            <param name="entityName"> 编译的实体类的名称，即“Nodes_3” </param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ChangeColumns(System.Int32,System.String[])">
            <summary>
            修改表格的列数。表格中的第一列始终是日期列，这一列是永远不会被删除的。
            </summary>
            <param name="nodesCount"> 新表格中有多少个节点 </param>
            <param name="nodes"> 可选参数，表示每一个节点的位置，用来显示在表格的表头处。 </param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.CompileEntity(System.String,System.Int32)">
            <summary> 编译对应的实体类的Dll </summary>
            <param name="EntityName">实体类的名称。此实体类会被放置在OldW.LineMonitorEntity命名空间下。
            对应的dll文件的名称为“EntityName + ".dll" ”。</param>
            <param name="nodesCount">此类中的属性个数，即线测点中的节点个数。</param>
            <returns></returns>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.ConstructEntityByNodes(System.String,System.Int32)">
            <summary>
            示例代码：生成CodeDOM图，这一步是最复杂的部分，后面生成代码与编译都是以这里的东西为蓝本
            </summary>
            <returns>此函数仅为示例，并不在此类中执行。外部代码可以参数本函数来创建出对应的 CodeCompileUnit 源代码结构 </returns>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.GetNewConstructedDataSource(OldW.DataManager.ElementDataManager.DgvLine.TableBindedData,System.Reflection.Assembly,System.String)">
            <summary>
            
            </summary>
            <param name="sourceObject"></param>
            <param name="desAssembly"></param>
            <param name="desEntityName"></param>
            <returns></returns>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.DrawData">
            <summary>
            绘制图表
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvLine.MyDataGridView1_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            表格中输入的数据不能进行正常转换时的异常处理
            </summary>
        </member>
        <member name="T:OldW.DataManager.ElementDataManager.FormNodes">
            <summary>
            打开窗口以设置最新的节点数据。
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.FormNodes.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="Nodes"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.FormNodes.Initialize">
            <summary>
            界面初始化
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.FormNodes._dataGridView_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            表格中输入的数据不能进行正常转换时的异常处理
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvPoint.activeInstru">
            <summary>
            表格中当前处理的那个测点。在为此属性赋值的过程中，会执行相关的刷新操作
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.#ctor(Autodesk.Revit.DB.Document,eZstd.UserControls.eZDataGridView)">
            <summary>
            构造函数
            </summary>
            <param name="doc"></param>
            <param name="dataGridViewLine"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.ConstructDataGridView">
            <summary>
            创建 DataGridView 为点测点监测数据类型
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.SaveTableToElement">
            <summary>
            将表格中的数据保存到Element的对应参数中。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.ShiftToNewElement(OldW.Instrumentations.Instrum_Point)">
            <summary>
            将元素的数据从Revit中提取出来并写入表格
            </summary>
            <param name="ele">要进行数据提取的监测单元</param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.DrawData">
            <summary>
            绘制图表
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.DgvPoint.bindedTableData">
            <summary> 与表格数据进行绑定的点测点监测数据集合 </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.ConvertBindingList(System.ComponentModel.BindingList{OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData})">
            <summary> 将 DataGridView 控件中绑定的数据集合转换为实体类 <see cref="T:OldW.Instrumentations.MonitorData_Point"/> 的集合。 </summary>
            <remarks> BindingList 中的元素如果有测点的监测日期为null，则进行剔除。</remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.FillBindingList(System.Collections.Generic.List{OldW.Instrumentations.MonitorData_Point},System.ComponentModel.BindingList{OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData}@)">
            <summary> 将 实体类 <see cref="T:OldW.Instrumentations.MonitorData_Point"/> 的集合中的数据填充到 BindingList 集合中。</summary>
        </member>
        <member name="T:OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData">
            <summary> 用来绑定到 DataGridView 的DataSource属性的监测数据类，表示点测点中的每一天的监测数据 </summary>
            <remarks>如果属性中包含有[System.ComponentModel.Browsable(false)]，则不计入表格项 </remarks>
        </member>
        <member name="P:OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData.Date">
            <summary>
            监测日期
            </summary>
        </member>
        <member name="P:OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData.Value">
            <summary>
            监测数据，如果当天没有数据，则为null
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.DgvBindingPointData.#ctor(System.Nullable{System.DateTime},System.Nullable{System.Single})">
            <summary>
            构造函数
            </summary>
            <param name="Date"></param>
            <param name="Value"></param>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DgvPoint.MyDataGridView1_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            表格中输入的数据不能进行正常转换时的异常处理
            </summary>
        </member>
        <member name="T:OldW.DataManager.ElementDataManager.MonitorMode">
            <summary> 当前操作的测点模式，比如是线测点（测斜管）、点测点等 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.MonitorMode.MonitorPoint">
            <summary> 点测点，比如地表沉降、立柱垂直位移测点等 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager.MonitorMode.MonitorLine">
            <summary> 线测点，比如测斜管 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager._activeInstru">
            <summary> 当前活动的测点对象 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager._selectedInstrum">
            <summary> 进入测点监测数据管理窗口时，所有选择的测点 </summary>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager._checkBoxex">
            <summary> 复选框集合 </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.#ctor(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation},OldW.Instrumentations.InstrumDoc)">
            <summary> 构造函数 </summary>
            <param name="eleIdCollection">所有要进行处理的测点元素的Id集合</param>
            <param name="document"></param>
            <remarks></remarks>
        </member>
        <member name="F:OldW.DataManager.ElementDataManager._activeMonitorMode">
            <summary> 当前操作的测点模式，比如是线测点（测斜管）、点测点等 </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.btnActivateDatagridview_Click(System.Object,System.EventArgs)">
            <summary>
            激活 Datagridview 控件
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.ComboBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            在组合框中改变了选择的测点后，去更新DataGridView中的数据为指定测点的监测数据。
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.SaveTableToElement(System.Object,System.EventArgs)">
            <summary>
            将表格中的数据保存到Element的对应参数中。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.btnDraw_Click(System.Object,System.EventArgs)">
            <summary>
             绘制监测曲线图
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.btnSetNodes_Click(System.Object,System.EventArgs)">
            <summary> 设置线测点的节点信息 </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.DataGrid_pointMonitor_Resize(System.Object,System.EventArgs)">
            <summary>
             在表格框宽度发生变化时，自动调整窗口的宽度
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementDataManager.RenameElement(System.Object,System.EventArgs)">
            <summary>
            测点单元的重命名
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:OldW.DataManager.ElementInitialize">
            <summary>
            对测点的编号进行重命名
            </summary>
        </member>
        <member name="F:OldW.DataManager.ElementInitialize.MonitorName">
            <summary>
            测点的新名称
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementInitialize.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="oldName"></param>
        </member>
        <member name="F:OldW.DataManager.ElementInitialize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.DataManager.ElementInitialize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.DataManager.ElementInitialize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.DataManager.DataImport.MonitorEntityExcel">
            <summary>
            DataGridViewExcel中每一个测点记录所对应的实体类
            </summary>
        </member>
        <member name="F:OldW.DataManager.DataImport.MonitorEntityExcel._transport">
            <summary> 数据库中的此测点是否要进行传输，即导入或者导出 </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.Transport">
            <summary> 数据库中的此测点是否要进行传输，即导入或者导出 </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.SheetName">
            <summary> 此测点在Excel的哪一个工作表内，工作表名称包含后缀$ </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.FieldName">
            <summary> 此测点在Excel工作表内对应哪一个字段 </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.MappedItem">
            <summary> 此测点在Revit中绑定的对应测点。也是后面要进行实际的数据导入的对应测点 </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.StoredInField">
            <summary>  如果此测点的数据是保存在一整张工作表中（比如测斜数据），则为 false，
            而如果此测点的数据是保存在一个工作表的某字段下，则为true。 </summary>
        </member>
        <member name="P:OldW.DataManager.DataImport.MonitorEntityExcel.MonitorType">
            <summary> 此测点的类型 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.MonitorEntityExcel.#ctor(System.String,System.String,System.Boolean,OldW.Instrumentations.InstrumCollector)">
            <summary>
            构造函数
            </summary>
            <param name="sheetName">此测点在Excel的哪一个工作表内，工作表名称包含后缀$</param>
            <param name="fieldName">此测点在Excel工作表内对应哪一个字段</param>
            <param name="storedInField"> 如果此测点的数据是保存在一整张工作表中（比如测斜数据），则为 false，
            而如果此测点的数据是保存在一个工作表的某字段下，则为true。 </param>
            <param name="possibleMatches"> 在进行字段匹配时，此测点可能匹配到的所有测点的集合。 </param>
        </member>
        <member name="F:OldW.DataManager.DataImport.MonitorEntityExcel._possibleMatches">
            <summary> 在进行字段匹配时，此测点可能匹配到的所有测点的集合。 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.MonitorEntityExcel.MatchInstrum(OldW.Instrumentations.InstrumCollector)">
            <summary>
            将此数据库对象在Revit中找到一个可能的匹配测点单元
            </summary>
            <param name="instrumsToMatch"> 在Revit中要进行匹配的测点集合 </param>
            <remarks> 在修改完与Datagridview绑定的属性后，记得通过Datagridview.Refresh()方法刷新界面。 </remarks>
        </member>
        <member name="F:OldW.DataManager.DataImport._selectedInstrum">
            <summary> 进入测点监测数据管理窗口时，所有选择的测点 </summary>
        </member>
        <member name="F:OldW.DataManager.DataImport._BindedExcelPoints">
            <summary> 与DataGridView相绑定的数据源集合 </summary>
        </member>
        <member name="F:OldW.DataManager.DataImport._excelConnection">
            <summary> Excel数据库的连接 </summary>
        </member>
        <member name="F:OldW.DataManager.DataImport._backgroundWorker">
            <summary> 执行数据导入操作的后台线程 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.#ctor(System.Collections.Generic.ICollection{OldW.Instrumentations.Instrumentation},OldW.Instrumentations.InstrumDoc)">
            <summary> 构造函数 </summary>
            <param name="eleIdCollection">所有要进行处理的测点元素的Id集合</param>
            <param name="document"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.DataImport.buttonMapping_Click(System.Object,System.EventArgs)">
            <summary> 准备将选择的工作表中的监测数据输入Datagridview控件，并重新刷新界面 </summary>
            <param name="sender"></param> <param name="e"></param>
        </member>
        <member name="M:OldW.DataManager.DataImport.Mapping(System.String)">
            <summary> 将选择的工作表中的监测数据输入Datagridview控件，并重新刷新界面 </summary>
            <param name="WorkbookName"> 监测数据工作簿的绝对路径 </param>
        </member>
        <member name="M:OldW.DataManager.DataImport.GetPointNames(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            检查工作表中的字段是否符合要求，并获取工作表中除第一个字段“时间”以外的所有字段的名称
            </summary>
            <param name="conn"></param>
            <param name="tableName"> 要在哪一个工作表中提取字段信息，表名的格式为“Sheet1$”</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.DataImport.buttonCheckMultiple_Click(System.Object,System.EventArgs)">
            <summary> 选择多个 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.buttonUnCheckMultiple_Click(System.Object,System.EventArgs)">
            <summary> 取消选择多个 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.DataGridViewExcelOnCellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            点击表格中的任意单元格，包括表头或者列头
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OldW.DataManager.DataImport.DataGridViewExcelOnCurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
            <summary> 修改 Checkbox 是否要导入 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.DrawMonitorData(System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary>
            临时绘制监测曲线图
            </summary>
            <param name="conn"></param>
            <param name="sheetName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="F:OldW.DataManager.DataImport._tranImport">
            <summary> 事务：将Excel中的监测数据导入Revit中的测点单元 </summary>
        </member>
        <member name="M:OldW.DataManager.DataImport.CheckDuplicated(System.ComponentModel.BindingList{OldW.DataManager.DataImport.MonitorEntityExcel},System.Int32@)">
            <summary>
            检查列表框中有没有出现Revit中的一个元素（除了“墙顶位移”外）对应的Excel中的多个数据字段的情况。
            </summary>
            <param name="datasource"></param>
            <param name="row"> 在执行到第row行时退出了循环 </param>
            <returns></returns>
        </member>
        <member name="M:OldW.DataManager.DataImport.BackgroundWorkerOnDoWork_ImportFromExcel(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            开始在后台线程中实际执行测点数据从Excel导入Revit的操作
            </summary>
            <param name="sender"></param>
            <param name="e"> 输入前请确保 e.Argument所对应的集合的Count > 0 </param>
        </member>
        <member name="M:OldW.DataManager.DataImport.DataImport_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary> 关闭窗口事件 </summary>
        </member>
        <member name="F:OldW.DataManager.Chart_MonitorData.Chart">
            <summary> 数据图表 </summary>
        </member>
        <member name="M:OldW.DataManager.Chart_MonitorData.#ctor(OldW.Instrumentations.InstrumentationType)">
            <summary>
            构造函数
            </summary>
            <param name="type">窗口的标题：监测类型</param>
            <remarks></remarks>
        </member>
        <member name="M:OldW.DataManager.Chart_MonitorData.SetupChart">
            <summary>
            图表的初始化
            </summary>
        </member>
        <member name="M:OldW.DataManager.Chart_MonitorData.AddLineSeries(System.String,System.String)">
            <summary>
            添加一条监测曲线，并设置曲线的基本样式
            </summary>
            <param name="seriesName"></param>
            <param name="chartAreaName"></param>
            <returns></returns>
        </member>
        <member name="T:OldW.ProjectInfo.frm_ProjectInfo">
            <summary>
            与整个基坑相关的信息设置
            </summary>
        </member>
        <member name="M:OldW.ProjectInfo.frm_ProjectInfo.#ctor(OldWDocument)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:OldW.ProjectInfo.frm_ProjectInfo.LoadProjectInfo(OldW.ProjectInfo.OldWProjectInfo)">
            <summary> 将Revit文档中保存的项目信息加载到UI界面中 </summary>
        </member>
        <member name="F:OldW.ProjectInfo.frm_ProjectInfo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.ProjectInfo.frm_ProjectInfo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.ProjectInfo.frm_ProjectInfo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OldW.ProjectInfo.OldWProjectInfo">
            <summary>
            一个OldWDocument的模型中，与基坑相关的一些信息，这些信息是被序列化到模型的项目信息中的参数“OldW_Project”中的。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldW.ProjectInfo.OldWProjectInfo.ExcavStart">
            <summary> 基坑开挖的开始日期 </summary>
        </member>
        <member name="F:OldW.ProjectInfo.OldWProjectInfo.ExcavFinish">
            <summary> 基坑开挖的结束日期 </summary>
        </member>
        <member name="M:OldW.ProjectInfo.OldWProjectInfo.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:OldW.SafetyWarning.FormSetWarning.getFormValve">
            <summary>
            读取界面上的值，创建WarningValue对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:OldW.SafetyWarning.FormSetWarning.updatecbInput">
            <summary>
            更新cbInput
            </summary>
        </member>
        <member name="M:OldW.SafetyWarning.FormSetWarning.checkNum(System.Windows.Forms.TextBox@,System.Windows.Forms.KeyPressEventArgs@)">
            <summary>
            判断输入是否合理
            </summary>
            <param name="tb"></param>
            <param name="e"></param>
        </member>
        <member name="F:OldW.SafetyWarning.FormSetWarning.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OldW.SafetyWarning.FormSetWarning.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OldW.SafetyWarning.FormSetWarning.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningSumVelo.sum">
            <summary>
            累计值
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningSumVelo.velo">
            <summary>
            速率
            </summary>
        </member>
        <member name="T:OldW.SafetyWarning.WarningIncli">
            <summary>
            测斜警戒值
            </summary>
        </member>
        <member name="T:OldW.SafetyWarning.WarningGSettle">
            <summary>
            地表沉降警戒值
            </summary>
        </member>
        <member name="T:OldW.SafetyWarning.WarningForce">
            <summary>
            轴力警戒值
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningForce.ratio">
            <summary>
            系数
            </summary>
        </member>
        <member name="T:OldW.SafetyWarning.WarningValue">
            <summary>
            警戒值设定类
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningValue.name">
            <summary>
            警戒值设定的名称
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningValue.rate">
            <summary>
            警戒值设定的等级
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningValue.warningForc">
            <summary>
            轴力警戒值
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningValue.warningGSetle">
            <summary>
            地表沉降警戒值
            </summary>
        </member>
        <member name="F:OldW.SafetyWarning.WarningValue.warningIncli">
            <summary>
            测斜警戒值
            </summary>
        </member>
        <member name="M:OldW.SafetyWarning.WarningValue.getId">
            <summary>
            返回该警戒值设定的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:DllActivator.DllActivator_Projects.ActivateReferences">
            <summary>
            激活本DLL所引用的那些DLLs
            </summary>
        </member>
        <member name="T:OldWApplication">
            <summary>
            OldW程序中的应用程序级的操作。通常用来存储或者处理Document或者Element之上的对象。比如程序中所有打开的OldWDocument对象。
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldWApplication.UIApplication">
            <summary> 当前正在运行的Revit的Application程序对象 </summary>
            <remarks>在每一次通过IExternalCommand接口执行的外部命令中，都可以从中提取出一个Application对象，
            从变量上来说，每次的这个Application之间都是 not equal的，但是，这些Application对象都是代表Revit当前正在运行的应用程序，即其本质上是相同的。</remarks>
        </member>
        <member name="P:OldWApplication.Application">
            <summary> 当前正在运行的Revit的Application程序对象 </summary>
            <remarks>在每一次通过IExternalCommand接口执行的外部命令中，都可以从中提取出一个Application对象，
            从变量上来说，每次的这个Application之间都是 not equal的，但是，这些Application对象都是代表Revit当前正在运行的应用程序，即其本质上是相同的。</remarks>
        </member>
        <member name="F:OldWApplication._openedDocuments">
            <summary>
            整个系统中，所有打开的 OldWDocument 文档
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:OldWApplication.OpenedDocuments">
            <summary> 整个系统中，所有打开的 OldWDocument 文档 </summary>
            <remarks></remarks>
        </member>
        <member name="F:OldWApplication._uniqueApplication">
            <summary> 程序中已经加载进来的唯一的OldWApplication实例 </summary>
        </member>
        <member name="M:OldWApplication.GetUniqueApplication(Autodesk.Revit.UI.UIApplication)">
            <summary>
            OldWApplication类在整个程序中只有一个实例，为了保证这一点，会在Create方法中进行判断，
            看在程序中是否已经存在对应的OldWApplication实例，如果有，则直接返回，如果没有，则创建一个新的。
            </summary>
            <param name="uiApp"></param>
            <returns>返回程序中唯一的那一个OldWApplication对象，如果不能正常返回，则抛出异常。</returns>
            <remarks>
            1.   由于OldWApplication中，对Revit的Application对象进行了很多事件处理，
                 所以，如果程序中有n个OldWApplication实例，那么，每一次触发Revit的Application中的事件，
                 在OldWApplication中，每一个实例都会对此事件进行一次操作，这会极大地造成程序的混乱。
            2..  即使同时开启多个Revit进程，每个进程中的内存信息肯定是相互独立的，所以不用担心
                 出现两个Revit进程对应同一个 OldWApplication 对象的情况。</remarks>
        </member>
        <member name="M:OldWApplication.#ctor(Autodesk.Revit.UI.UIApplication)">
            <summary> 构造函数。 为了确保程序中只有唯一的OldWApplication实例，应该将其New方法设置为Private，然后将Create设置为Shared。 </summary>
            <param name="uiApp"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldWApplication.SearchOrCreateOldWDocument(Autodesk.Revit.DB.Document)">
            <summary> 在OldWApplication.OpenedDocuments 集合中，搜索是否有与指定的Document相对应的OldWDocument对象 </summary>
            <returns>有相对应的对象，则返回之，否则则抛出异常。</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWApplication.MatchOldWDocument(Autodesk.Revit.DB.Document,System.Int32@)">
            <summary> 在整个系统的集合中，搜索是否有与指定的Document相对应的OldWDocument对象，如果没有，则返回Nothing。 </summary>
            <param name="doc"></param>
            <param name="matchedOldDocumentIndex"> OpenedDocuments 集合中匹配的 OldWDocument 的下标位置，
            如果此Document文档不在OpenedDocuments集合中，则其值为-1。</param>
            <returns>有相对应的对象，则返回之，否则返回Nothing。</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWApplication.ValidateOpenedOldWDocuments">
            <summary> 对 _openedDocuments 中的元素进行验证，以剔除其中因为被关闭或者其他原因而成为非 IsValidObject 的文档。 </summary>
        </member>
        <member name="T:OldWDocument">
            <summary>
            将Revit中与基坑开挖相关的Document对象转换为OldW程序中的OldWDocument对象。
            此OldWDocument对象的标志性特征在于：此Document对象所对应的项目，在其“管理-项目信息”中，有一个参数：OldW_Project。
            在此OldWDocument中，可以在Revit的Document中进行与基坑相关的操作，比如搜索基坑开挖土体，记录测点信息等。
            此对象可以通过静态函数 Create进行构造。
            此类中没有具体的操作方法，要进行具体的操作，请创建对应的的派生类，比如ExcavationDoc用来进行与基坑开挖相关的模拟。
            </summary>
        </member>
        <member name="F:OldWDocument._doc">
            <summary> 每一个OldWDocument对象都绑定了一个Revit的Document对象。 </summary>
        </member>
        <member name="P:OldWDocument.Document">
            <summary> 每一个OldWDocument对象都绑定了一个Revit的Document对象。 </summary>
        </member>
        <member name="F:OldWDocument.uiDoc">
            <summary> 每一个OldWDocument对象都绑定了一个Revit的 UIDocument 对象。 </summary>
        </member>
        <member name="M:OldWDocument.#ctor(Autodesk.Revit.DB.Document)">
            <summary> 直接构造 OldWDocument 对象，但是不保证此文档的有效性，即是否有对应的项目参数。
            推荐使用  OldWApplication.SearchOrCreateOldWDocument(doc) 来获取有效的 OldWDocument 对象 </summary>
            <param name="doc"></param>
        </member>
        <member name="M:OldWDocument.Create(OldWApplication,Autodesk.Revit.DB.Document)">
            <summary> 不在OldWApplication.OpenedDocuments 集合中进行搜索，而直接创建一个OldWDocument对象，并添加到OpenedDocuments集合中。 </summary>
            <param name="OldWApp">整个系统的OldWApplication对象</param>
            <param name="Doc">用户应该非常确信此Doc并不在OldWApplication的OpenedDocuments集合中，
            否则，会将一个重复的OldWDocument对象再次添加进OpenedDocuments集合。
            这样虽然不会报错，但是不利于程序的高效。</param>
            <returns>有相对应的对象，则返回之，否则则抛出异常。</returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWDocument.CreateNewAndBindParameter(Autodesk.Revit.DB.Document)">
            <summary>
            将一个非OldWDocument类型的文档创建成为一个OldWDocument对象，并在其项目信息中添加参数OldW_Project
            </summary>
            <param name="doc">注意默认OldWDocument.IsOldWDocument(Doc)为false，如果此Doc的项目信息中有参数OldW_Project，则重新进行绑定可能会出错。</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWDocument.IsOldWDocument(Autodesk.Revit.DB.Document)">
            <summary>
            判断一个Document文档是否是一个OldW的项目文档，其判断的依据是：：此Document对象所对应的项目，在其“管理-项目信息”中，有一个参数：OldW_Project。
            </summary>
            <param name="doc">要进行判断的Revit的Document文档</param>
            <returns></returns>
        </member>
        <member name="F:OldWDocument._oldWProjectInfo">
            <summary> OldWDocument中保存的与基坑开挖有关的信息 </summary>
        </member>
        <member name="M:OldWDocument.SetProjectInfo(Autodesk.Revit.DB.Transaction,OldW.ProjectInfo.OldWProjectInfo)">
            <summary>
            将与基坑开挖有关的信息保存到Document的相关参数中
            </summary>
            <param name="transDoc">可以设置其值为null，这种情况下函数内部会开启一个事务，以将项目信息保存到文档中。</param>
            <param name="projInfo"></param>
            <remarks></remarks>
        </member>
        <member name="M:OldWDocument.GetProjectInfo">
            <summary>
            从Document中提取OldWDocument中保存的与基坑开挖有关的信息
            </summary>
            <returns>返回值不可能会是 null </returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWDocument.Equals(Autodesk.Revit.DB.Document)">
            <summary>
            比较指定的Document对象与此OldWDocument对象中的Document对象是否是同一个Revit文档
            </summary>
            <returns>如果这两个Document对象是同一个Revit文档，则返回True，否则返回False。</returns>
        </member>
        <member name="M:OldWDocument.CompareDocuments(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document)">
            <summary>
            比较两个Document对象是否是同一个Revit文档。
            如果这两个Document对象是同一个Revit文档，则返回True，否则返回False。
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:OldWDocument.GetOldWDefinitionGroup(Autodesk.Revit.ApplicationServices.Application)">
            <summary>
            获取外部共享参数文件中的参数组“OldW”，然后可以通过DefinitionGroup.Definitions.Item(name As String)来索引其中的共享参数，
            也可以通过DefinitionGroup.Definitions.Create(name As String)来创建新的共享参数。
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
