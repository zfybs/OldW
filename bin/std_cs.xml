<?xml version="1.0"?>
<doc>
    <assembly>
        <name>std_cs</name>
    </assembly>
    <members>
        <member name="T:std_zw.classTemplate">
            <summary>
            一个基本的类的模板
            </summary>
        </member>
        <member name="F:std_zw.classTemplate.Tfiled">
            <summary>
            字段模板
            </summary>
        </member>
        <member name="F:std_zw.classTemplate.Tconstant">
            <summary>
            常数模板
            </summary>
        </member>
        <member name="E:std_zw.classTemplate.Tevent">
            <summary>
            事件模板
            </summary>
        </member>
        <member name="M:std_zw.classTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:std_zw.classTemplate.Finalize">
            <summary>
            析构函数 Destructor
            </summary>
            <remarks>
            析构函数(destructor) 与构造函数相反，当对象脱离其作用域时（例如对象所在的函数已调用完毕），系统自动执行析构函数。
            析构函数往往用来做“清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。
             程序员不能控制解构器何时将被执行因为这是由垃圾收集器决定的。解构器也在程序退出时被调用。
            </remarks>
        </member>
        <member name="P:std_zw.classTemplate.Tproperty">
            <summary>
            可读可写属性模板
            </summary>
            <remarks>
            也可以直接简写为：public int Tproperty{get;set;} 
            当取消属性中的get或者set块的时候，此属性就成了只写或者只读属性。
            </remarks>
        </member>
        <member name="P:std_zw.classTemplate.TwriteOnlyProperty">
            <summary>
            只写属性
            </summary>
        </member>
        <member name="M:std_zw.classTemplate.Tmethod(System.String[])">
            <summary>
            方法模板
            </summary>
            <param name="paraParam">参考</param>
        </member>
        <member name="M:std_zw.classTemplate.Tfunction(System.String,System.String@,System.String@)">
            <summary>
            函数模板
            </summary>
            <param name="paraValue">一般的参数，默认为值传递</param>
            <param name="paraRef">地址传递，在调用时要在输入实参前面加上 ref 。</param>
            <param name="paraOut">用来输出的参数，在调用时要在输入实参前面加上 out 。</param>
        </member>
        <member name="M:std_zw.classTemplate.Main(System.String[])">
            <summary>
            主程序入口
            </summary>
        </member>
        <member name="M:std_zw.ExtensionMethods.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds range of items into collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:std_zw.ExtensionMethods.ClearAndAddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clears collection and adds range of items into it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:std_zw.ExtensionMethods.Clone``1(``0)">
            <summary>
            Strong-typed object cloning for objects that implement <see cref="T:System.ICloneable"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OldW.DllActivator.DllActivator_std_cs.OldW#DllActivator#IDllActivator#ActivateReferences">
            <summary>
            激活本DLL所引用的那些DLLs
            </summary>
        </member>
    </members>
</doc>
