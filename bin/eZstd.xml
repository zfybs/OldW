<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eZstd</name>
    </assembly>
    <members>
        <member name="T:eZstd.API.Dll">
            <summary>
            与DLL的加载、卸载等相关的操作
            </summary>
        </member>
        <member name="M:eZstd.API.Dll.SetDllDirectoryW(System.String)">
            <summary>
            将指定的文件夹添加到此程序的DLL文件的搜索路径中.
            adds a directory to the search path used to locate DLLs for the application.
            </summary>
            <param name="lpPathName">要添加的文件夹路径</param>
            <remarks>Pretty straight-forward to use. Obviously, is usually going to be called before calling LoadLibraryEx().
            另外,在PInvoke中,只有SetDllDirectory这个函数,但是它的真实的名称是SetDllDirectoryW.</remarks>
        </member>
        <member name="M:eZstd.API.Dll.LoadLibraryEx(System.String,System.IntPtr,eZstd.API.LoadLibraryFlags)">
            <summary>
            装载指定的动态链接库，并为当前进程把它映射到地址空间。一旦载入，就可以访问库内保存的资源。一旦不需要，用FreeLibrary函数释放DLL
            </summary>
            <param name="lpFileName">指定要载入的动态链接库的名称。采用与CreateProcess函数的lpCommandLine参数指定的同样的搜索顺序</param>
            <param name="hReservedNull">未用，设为零</param>
            <param name="dwFlags"></param>
            <returns>成功则返回库模块的句柄，零表示失败。会设置GetLastError</returns>
            <remarks>参考 http://www.pinvoke.net/default.aspx/kernel32/LoadLibraryEx.html .
            If you only want to load resources from the library, specify LoadLibraryFlags.LoadLibraryAsDatafile as dwFlags.
            In this case, nothing is done to execute or prepare to execute the mapped file.</remarks>
        </member>
        <member name="T:eZstd.API.Hook.HookProc">
            <summary>
            Represents the method called when a hook catches a monitored event.
            </summary>
        </member>
        <member name="M:eZstd.API.Hook.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            在安装钩子后要记得卸载钩子
            </summary>
            <param name="hhk"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Hook.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            将hook信息传递到链表中下一个hook处理过程
            </summary>
            <param name="hhk">注：hhk is ignored, so you can use IntPtr.Zero</param>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Hook.CallNextHookEx(System.IntPtr,System.Int32,eZstd.API.WindowsMessages,eZstd.API.MSLLHOOKSTRUCT)">
            <summary>
            CallNextHookEx 鼠标 将hook信息传递到链表中下一个hook处理过程。
            overload for use with LowLevelMouseProc
            </summary>
            <param name="hhk"></param>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Hook.CallNextHookEx(System.IntPtr,System.Int32,eZstd.API.WindowsMessages,eZstd.API.KBDLLHOOKSTRUCT)">
            <summary>
            CallNextHookEx 键盘 将hook信息传递到链表中下一个hook处理过程。
            overload for use with LowLevelKeyboardProc
            </summary>
            <param name="hhk"></param>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.IO.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,eZstd.API.ShowCommands)">
            <summary>
            以不同的显示方式执行指定的文件。
            </summary>
            <param name="hwnd"></param>
            <param name="lpOperation"></param>
            <param name="lpFile"></param>
            <param name="lpParameters"></param>
            <param name="lpDirectory"></param>
            <param name="nShowCmd"></param>
            <returns> 若ShellExecute函数调用成功，则返回值为被执行程序的实例句柄。若返回值小于32，则表示出现错误。 </returns>
            <remarks> 比如要以隐藏的方式打开某文件，则可能使用语句：ShellExecute(IntPtr.Zero, "open", FileFullName, "", "", ShowCommands.SW_HIDE); </remarks>
        </member>
        <member name="T:eZstd.API.Message">
            <summary>
            wParam和lParam指定了与消息有关的附加信息。
            wParam和lParam是Windows消息机制的两个最重要参数，整个Windows依靠这两个参数传递各种各样的消息。
            首先是wParam，它表示此次的消息类型是什么。是键盘？是鼠标？键盘里又分按下还是抬起，鼠标里又分是单击还是双击，等等。
            lParam是一个指针，它指向本条消息所存储的信息的内存区域的首地址，很显然，这个地址存放的东西是很灵活的，比如鼠标消息，那么这里可能存放的是各键的状态或者光标的X,Y座标。换成键盘消息，则是键码等等。
            总之，在Windows系统消息处理中，wParam参数区分了类别，lParam参数存放了该类别所存储的信息。
            </summary>
        </member>
        <member name="M:eZstd.API.Message.CallWindowProc(eZstd.API.Message.WndProcDelegate,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            将指定消息信息传送给指定的窗口过程。
            CallWindowProc 是发送某个消息给某个处理函数(包括自定义消息处理函数),
            而DefWindowProc 是发送某个消息给Windows默认的消息处理函数。
            </summary>
            <param name="lpPrevWndFunc">窗口消息处理函数指针(函数名)</param>
            <param name="hWnd">接受窗体句柄.</param>
            <param name="Msg">指定消息类型</param>
            <param name="wParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关.</param>
            <param name="lParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关。</param>
            <returns>返回值指定了消息处理结果，它与发送的消息有关。</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Message.DefWindowProc(System.IntPtr,eZstd.API.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
            让Windows的默认消息处理函数处理消息。
            该函数调用默认的窗口过程来为应用程序没有处理的任何窗口消息提供默认的处理。
            该函数确保每一个消息得到处理。调用DefWindowProc函数时使用窗口过程接收的相同参数。
            </summary>
            <param name="hWnd"></param>
            <param name="uMsg">指定消息类型</param>
            <param name="wParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关.</param>
            <param name="lParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关。</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Message.SendMessage(System.IntPtr,eZstd.API.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
            调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。
            SendMessageBynum， SendMessageByString是该函数的“类型安全”声明形式
            参考：<see cref="!:https://msdn.microsoft.com/en-us/library/ms644950(v=vs.85).aspx"/>
            </summary>
            
            <param name="hWnd">要接收消息的那个窗口的句柄,窗口可以是任何类型的屏幕对象。
            如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，包括无效或不可见的非自身拥有的窗口、被覆盖的窗口和弹出式窗口，但消息不被发送到子窗口。</param>
            
            <param name="msg">指定要发送的消息。此函数的原型中，msg参数的类别为 UInt32，这里将其改成 WindowsMessages 枚举</param>
            
            <param name="wParam">通常是一个与消息有关的常量值，也可能是窗口或控件的句柄。
            可选参数，有的消息要，有的不需要，比如单击就不需要这个参数，别的消息，比如鼠标移动的可能需要在这里加上一些鼠标的参数；</param>
            
            <param name="lParam"> 通常是一个指向内存中数据的指针。
            wParam和lParam指定了与消息有关的附加信息。
            wParam和lParam是Windows消息机制的两个最重要参数，整个Windows依靠这两个参数传递各种各样的消息。
            首先是wParam，它表示此次的消息类型是什么。是键盘？是鼠标？键盘里又分按下还是抬起，鼠标里又分是单击还是双击，等等。
            lParam是一个指针，它指向本条消息所存储的信息的内存区域的首地址，很显然，这个地址存放的东西是很灵活的，比如鼠标消息，那么这里可能存放的是各键的状态或者光标的X,Y座标。换成键盘消息，则是键码等等。
            总之，在Windows系统消息处理中，wParam参数区分了类别，lParam参数存放了该类别所存储的信息。</param>
            
            <returns>返回值反映了此函数执行的结果.它是由接收消息的窗口的窗口函数返回的值。这个返回值取决于被发送的消息。</returns>
            <remarks>如果接收消息的窗口是同一应用程序的一部分，那么这个窗口的窗口函数就被作为-个子程序马上被调用。
            如果接收消息的窗口是被另外的线程所创建的，那么窗口系统就切换到相应的线程并且调用相应的窗口函数，这条消息不放在目标应用程序队列中。
            </remarks>
        </member>
        <member name="M:eZstd.API.Message.PostMessage(System.IntPtr,eZstd.API.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
            将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送
            </summary>
            <param name="hWnd">接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考<see cref="M:eZstd.API.Message.PostThreadMessage(System.UInt32,eZstd.API.WindowsMessages,System.IntPtr,System.IntPtr)"/>)</param>
            <param name="msg">指定要发送的消息。此函数的原型中，msg参数的类别为 UInt32，这里将其改成 WindowsMessages 枚举</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Message.PostThreadMessage(System.UInt32,eZstd.API.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
            将一条消息投递给应用程序。这条消息由应用程序的内部GetMessage循环获得，但不会传给一个特定的窗口
            </summary>
            <param name="idThread">用于接收消息的那个线程的标识符</param>
            <param name="msg">指定要发送的消息。此函数的原型中，msg参数的类别为 UInt32，这里将其改成 WindowsMessages 枚举</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns>如消息投递成功，则返回TRUE（非零）。会设置GetLastError</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Message.GetMessage(eZstd.API.MSG@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            GetMessage不会提取属性其他线程或者程序的窗口的消息。
            The GetMessage function retrieves a message from the calling thread's message queue and places it in the specified structure. This function can retrieve both messages associated with a specified window and thread messages posted via the PostThreadMessage function.
            The function retrieves messages that lie within a specified range of message values.
            GetMessage does not retrieve messages for windows that belong to other threads or applications.
            </summary>
            <param name="lpMsg">Points to an MSG structure that receives message information from the thread's message queue.</param>
            <param name="hWnd">Identifies the window whose messages are to be retrieved. The value NULL means that GetMessage retrieves messages for any window that belongs to the calling thread and thread messages posted to the calling thread via PostThreadMessage.</param>
            <param name="wMsgFilterMin">Specifies the integer value of the lowest message value to be retrieved.If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
            <param name="wMsgFilterMax">Specifies the integer value of the highest message value to be retrieved.If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
            <returns>If the function retrieves a message other than WM_QUIT, the return value is nonzero.
            If the function retrieves the WM_QUIT message, the return value is zero.
            If there is an error, the return value is -1. For example, the function fails if hWnd is an invalid window handle.
            </returns>
            <remarks>
            参考：http://www.pinvoke.net/default.aspx/user32/GetMessage.html
            An application typically uses the return value to determine whether to end the main message loop and exit the program.
            The GetMessage function only retrieves messages associated with the window identified by the hWnd parameter or any of its children as specified by the IsChild function,
            and within the range of message values given by the wMsgFilterMin and wMsgFilterMax parameters.
            GetMessage does not retrieve messages for windows that belong to other threads nor for threads other than the calling thread.
            Thread messages, posted by the PostThreadmessage function, have a message hWnd value of NULL.
            </remarks>
        </member>
        <member name="M:eZstd.API.Message.PeekMessage(eZstd.API.NativeMessage@,System.IntPtr,System.UInt32,System.UInt32,eZstd.API.PeekMessageParams)">
            <summary>
            该函数查看应用程序的消息队列，如果其中有消息就将其放入lpMsg所指的结构中，
            与GetMessage函数不同，PeekMessage函数不会等到有消息放入队列时才返回。
            </summary>
            <param name="message">
            指向NativeMessage结构的指针，用来接收函数从Windows应用程序队列中取来的消息。
            Do not use System.Windows.Forms.Message for the first argument - this is a different data structure.</param>
            <param name="hWnd">指定其消息等检验的窗口</param>
            <param name="wMsgFilterMin">指定待检消息号的最小值</param>
            <param name="wMsgFilterMax">指定待检消息号的最大值</param>
            <param name="wRemoveMsg">其值为下面二者之一：PM_MOREMOVE / PM_REMOVE</param>
            <returns></returns>
            <remarks>PeekMessage函数只检索与由hWnd指定的窗口或由IsChild函数指定的子窗口相关的, 范围在
            wMsgFiltcrMin和wMsgFiherMax之间的消息。如果hWnd为NULL,那么PeckMessage检索属于当前
            调用线程的所有窗口的消息（不检索属于其他线程的窗口消息如果hWnd为-1,那么函数只返回把
            hWnd 参数置为 NULL 的 PostAppMessage 函数送去的消息。如果 wMsgFilterMin 和 wMsgFilterMax 都
            是零.那么PeekMessagc返回所有可用消息，不再对消息进行范围上的过滤。
            用WM_KEYFIRST和WMJCEYLAST作为过滤范围可以检索到所有键盘消息。用
            WM_MOUSEFIRST和WM_MOUSSLAST可检索到所有鼠标消息.
            返回值表明是否找到了消息。如果有消息可用则返回TRUE,否则返冋FALSE。
            PeekMessage消息不会从队列中删除WM_ PA丨NT消息.该消息在被处理之前一直留在队列中。
            但是如果WM—PAINT消息中更新区域为NULL,则函数将删除该消息。</remarks>
        </member>
        <member name="M:eZstd.API.Message.TranslateMessage(eZstd.API.MSG@)">
            <summary>
            将虚拟键消息转换成字符信息。函数TranslateMessage并不修改由参数IpMsg指定的消息，它仅仅为由键盘驱动器产生出ASCII字符的键产生WM_CHAR消息。
            该函数按照下列方式将虚拟键消息转换成字符信息：
            1、WM KEYDOWN 与 WMJCEYUP 组合产生一个 WM—CHAR 或 WM_DEADCHAR 消息；
            2、WM_SYSKEYDOWN 与 WM—SYSKEYUP 组合产生一个 WM_SYSCHAR 或 WM_SYSDEADCHAR消息。
            字符消息被发送给应用程序消息队列.为了获取该消息.应用程序可调用GetMessage或PeekMessage.
            </summary>
            <param name="lpMsg">指向一个由函数GetMessage或PeekMessage恢复的MSG类型的数据结构.
            该结构包含有Windows应用程序队列中的消息.</param>
            <returns></returns>
            <remarks>返回值表明了函数执行结果。若消息被转换（即是指字符消息被发送到应用程序队列）则返回True；否则返回False。
            函数TranslateMessage并不修改由参数IpMsg指定的消息，它仅仅为由键盘驱动器产生出ASCII字符的键产生WM_CHAR消息。若应用程序为其他目的而处理虚拟控消息时，不应调用函数TranslateMessage.
            例如，当TranslateMessage函数返回非零值时，用户不应该再调用TranslateMessage函数。</remarks>
        </member>
        <member name="M:eZstd.API.Message.DispatchMessage(eZstd.API.MSG@)">
            <summary>
            该函数将lpmsg参数指定的MSG数据结构中的消息传送给指定窗口的窗口函数。
            </summary>
            <param name="lpmsg">指向一个MSG数据结构.其中包含来自Windows应用程序队列的消息信息.
            此数据结构必须包含有效的消息值.如果lpmsg指向一条WM_TIMER消息,而WM_TIMER消息的lParam参数又非NULL,
            则lParam参数是一个函数的地址，该函数被用来代替窗口函数而被调用。</param>
            <returns></returns>
            <remarks>返回值给出窗口函数返回的值.它的意义取决于被发送的消息，但返回值通常被忽略。</remarks>
        </member>
        <member name="M:eZstd.API.Message.keybd_event(System.Byte,System.Byte,System.UInt32,System.UIntPtr)">
             <summary>
             向任意进程发送键盘消息
             </summary>
             <param name="bVk">按键的虚拟键值，如回车键为vk_return, tab键为vk_tab,可以参考常用模拟键的键值对照表，也可以通过System.Windows.Forms.Keys枚举来查看。</param>
             <param name="bScan">扫描码，一般不用设置，用0代替就行；</param>
             <param name="dwFlags">选项标志，如果为keydown则置0即可，如果为keyup则设成数值2，即常数 KEYEVENTF_KEYUP；</param>
             <param name="dwExtraInfo">一般也是置0即可。</param>
             <remarks>
              调用案例1：
             keybd_event(System.Windows.Forms.Keys.Escape, 0, 0, 0)  ' 按下 ESCAPE键
             keybd_event(System.Windows.Forms.Keys.NumLock, 0, KEYEVENTF_KEYUP, 0)  ' 按键弹起，其中 KEYEVENTF_KEYUP=2
              调用案例2：    模拟按下 'ALT+F4'键
             keybd_event(18, 0, 0, 0);
             keybd_event(115, 0, 0, 0);
             keybd_event(115, 0, KEYEVENTF_KEYUP, 0);
             keybd_event(18, 0, KEYEVENTF_KEYUP, 0);
            </remarks>
        </member>
        <member name="M:eZstd.API.Message.mouse_event(eZstd.API.Message.MouseOperation,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary> 发送鼠标消息 </summary>
            <param name="dwFlags"> (位编码)要如何操作鼠标。如果不指定 MOUSEEVENTF_ABSOLUTE，则是相对于当前的鼠标位置。
            You cannot specify both MOUSEEVENTF_WHEEL and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP simultaneously in the dwFlags parameter, because they both require use of the dwData field. </param>
            <param name="dx">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置（Coordinate (0,0) maps onto the upper-left corner of the display surface, (65535,65535) maps onto the lower-right corner）
            或相对位置（正值表示向右下移动，负值表示向左上移动） </param>
            <param name="dy">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置（Coordinate (0,0) maps onto the upper-left corner of the display surface, (65535,65535) maps onto the lower-right corner）
            或相对位置（正值表示向右下移动，负值表示向左上移动） </param>
            <param name="dwData">没有使用，直接赋值为0。
            If dwFlags contains MOUSEEVENTF_WHEEL, then dwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.
            If dwFlags contains MOUSEEVENTF_HWHEEL, then dwData specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left.
            If dwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then dwData specifies which X buttons were pressed or released. This value may be any combination of the following flags.
            If dwFlags is not MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then dwData should be zero.</param>
            <param name="dwExtraInfo">没有使用，直接赋值为0。
            An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information. </param>.
            <remarks>帮助文档：<see cref="!:https://msdn.microsoft.com/en-us/library/ms646260(VS.85).aspx"/></remarks>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_Absolute">
            <Summary> 标示是否采用绝对坐标。
            1、If MOUSEEVENTF_ABSOLUTE value is specified, dx and dy contain normalized absolute coordinates between 0 and 65,535.
               The event procedure maps these coordinates onto the display surface.
               Coordinate (0,0) maps onto the upper-left corner of the display surface, (65535,65535) maps onto the lower-right corner.
            2、If the MOUSEEVENTF_ABSOLUTE value is not specified, dx and dy specify relative motions from when the last mouse event  was generated (the last reported position). 
               Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). </Summary>
            
            <remarks>The dx and dy parameters contain normalized absolute coordinates. If not set, those parameters contain relative data: the change in position since the last reported position. 
            This flag can be set, or not set, regardless of what kind of mouse or mouse-like device, if any, is connected to the system.</remarks>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_Move">
            <Summary> 移动鼠标 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_LeftDown">
            <Summary> 模拟鼠标左键按下 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_LeftUp">
            <Summary> 模拟鼠标左键抬起 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_RightDown">
            <Summary> 模拟鼠标右键按下 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_RightUp">
            <Summary> 模拟鼠标右键抬起 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_MiddleDown">
            <Summary> 模拟鼠标中键按下 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MouseEventF_MiddleUp">
            <Summary> 模拟鼠标中键抬起 </Summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MOUSEEVENTF_WHEEL">
            <summary>
            The wheel has been moved, if the mouse has a wheel. The amount of movement is specified in dwData
            </summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MOUSEEVENTF_XDOWNL">
            <summary>
            An X button was pressed.
            </summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MOUSEEVENTF_XUP">
            <summary>
            An X button was released.
            </summary>
        </member>
        <member name="F:eZstd.API.Message.MouseOperation.MOUSEEVENTF_HWHEEL">
            <summary>
            The wheel button is tilted.
            </summary>
        </member>
        <member name="T:eZstd.API.Windows">
            <summary>
            与界面中的窗口相关的函数
            最关键的是对windows操作系统中窗口本质的认识，使用Spy++工具，查找窗口就可以发现，其实对于给定的对话框窗口，
            其中的任何控件，如图标、文本、确定、取消按钮等都是它的子窗口，本质上还是窗口，所不同的只是，顶级父窗口查找时，用FindWindow函数，而查找子窗口时用FindWindowEx。   
            另外比较有用的是EnumWindows，可以遍历所有的顶级父窗口，而EnumChildWindows则是遍历其子窗口。
            所以问题的解决思路就是使用EnumWindows遍历所有的顶级父窗口，对每个顶级父窗口使用EnumChildWindows遍历它的所有控件，
            每个控件其实也是窗口，拿到该控件的句柄后，就可以调用GetWindowText来获取文本信息了。
            </summary>
        </member>
        <member name="M:eZstd.API.Windows.IsWindow(System.IntPtr)">
            <summary>
            判断一个窗口句柄是否有效
            </summary>
            <param name="hwnd">待检查窗口的句柄</param>
            <returns>True表示成功，False表示失败</returns>
            <remarks>如在一个程序变量里容纳了窗口句柄，为了解它是否仍然有效，就可考虑使用这个函数</remarks>
        </member>
        <member name="M:eZstd.API.Windows.FindWindow(System.String,System.String)">
            <summary>
            搜索指定类型或标题名的窗口句柄
            </summary>
            <param name="lpClassName">指向包含了窗口类名的空中止（C语言）字串的指针；或设为vbNullString（或C#中的null），表示接收任何类</param>
            <param name="lpWindowName">指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为vbNullString（或C#中的null），表示接收任何窗口标题</param>
            <returns>找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError</returns>
            <remarks>寻找窗口列表中第一个符合指定条件的顶级窗口
            （在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。
            获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）。
            很少要求同时按类与窗口名搜索。为向自己不准备参数传递一个零，最简便的办法是传递vbNullString常数</remarks>
        </member>
        <member name="M:eZstd.API.Windows.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            在窗口列表中寻找与指定条件相符的第一个子窗口
            </summary>
            <param name="parentHandle">在其中查找子的父窗口。如设为零，表示使用桌面窗口
            （通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）</param>
            <param name="childAfter">从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。
            如设为零，表示从第一个子窗口开始搜索</param>
            <param name="lclassName">欲搜索的类名。或设为vbNullString（或C#中的null），表示忽略。</param>
            <param name="windowTitle">欲搜索的窗口名。或设为vbNullString（或C#中的null），表示忽略。</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetForegroundWindow">
            <summary>获得前台窗口的句柄。这里的“前台窗口”是指前台应用程序的活动窗口。
            系统将生成前台窗口的线程给予较高的优先级。
            The GetForegroundWindow function returns a handle to the foreground window.</summary>
            <returns>The return value is a handle to the foreground window.
            The foreground window can be NULL in certain circumstances, such as when a window is losing activation.
            如果函数调用失败，则返回零值。 </returns>
            <remarks>windows nt支持多个桌面，它们相互间是独立的。每个桌面都有自己的前台窗口</remarks>
        </member>
        <member name="M:eZstd.API.Windows.WindowFromPoint(System.Drawing.Point)">
            <summary>
            获得包含指定点的窗口的句柄
            </summary>
            <param name="p">指定一个被检测的点，该点为struct类型</param>
            <returns> 包含了指定点的窗口的句柄。如指定的点处没有窗口存在，则返回零  </returns>
        </member>
        <member name="T:eZstd.API.Windows.EnumWindowsProc">
            <summary>
            该函数是一个与EnumWindows、EnumChildWindows或EnumDesktopWindows一起使用的应用程序定义的回调函数。它接收顶层窗口句柄。如果要停止遍历，请返回 false。
            </summary>
            <param name="hwnd"> 顶层窗口的句柄 </param>
            <param name="lParam"> 应用程序定义的一个值(即EnumWindows中lParam) </param>
            <returns>如果为 false，则停止遍历</returns>
            <remarks> 调用时，先定义一个与此委托相同签名的函数，然后将此函数（函数名后面不能有括号）作为参数赋值给 EnumWindows 等API函数 </remarks>
        </member>
        <member name="M:eZstd.API.Windows.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            为窗体设置父窗体
            </summary>
            <param name="hWndChild"></param>
            <param name="hWndNewParent"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetWindow(System.IntPtr,eZstd.API.GetWndConsts)">
            <summary>
            获得一个窗口的句柄，该窗口与某源窗口有特定的关系
            </summary>
            <param name="hWnd">源窗口</param>
            <param name="uCmd">指定结果窗口与源窗口的关系，它们建立在下述常数基础上：</param>
            <returns>由wCmd决定的一个窗口的句柄。如没有找到相符窗口，或者遇到错误，则返回零值。会设置GetLastError</returns>
            <remarks>兄弟或同级是指在整个分级结构中位于同一级别的窗口。如某个窗口有五个子窗口，那五个窗口就是兄弟窗口。
            尽管GetWindow可用于枚举窗口，但倘若要在枚举过程中重新定位、创建和清除窗口，那么EnumWindows和EnumChildWindows更为可靠</remarks>
        </member>
        <member name="M:eZstd.API.Windows.EnumChildWindows(System.IntPtr,eZstd.API.Windows.EnumWindowsProc,System.IntPtr)">
            <summary>
            枚举一个父窗口的所有子窗口。(父窗口中的button，slider、ComboBox、windows标准的对话框类（#32770）等控件其本质都是窗口对象)
            </summary>
            <param name="hwndParent">父窗口句柄</param>
            <param name="lpEnumFunc">回调函数的委托,注意：回调函数的返回值将会影响到这个API函数的行为。
            如果回调函数返回true，则枚举继续直到枚举完成；如果返回false，则将会中止枚举。</param>
            <param name="lParam"> 自定义的参数，无参数则输入null或者0即可。 </param>
            <returns></returns>
        </member>
        <member name="M:eZstd.API.Windows.EnumWindows(eZstd.API.Windows.EnumWindowsProc,System.IntPtr)">
            <summary>
                遍历屏幕中的所有top-level windows。
                Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an
                application-defined callback function. <see cref="M:eZstd.API.Windows.EnumWindows(eZstd.API.Windows.EnumWindowsProc,System.IntPtr)" /> continues until the last top-level window is
                enumerated or the callback function returns FALSE.
            </summary>
            <param name="lpEnumFunc">指向一个应用程序定义的回调函数指针，请参看EnumWindowsProc。</param>
            <param name="lParam">An application-defined value to be passed to the callback function. 无参数则输入null或者0即可。</param>
            <returns>
                <c>true</c> if the return value is nonzero., <c>false</c> otherwise. If the function fails, the return value
                is zero.<br />To get extended error information, call GetLastError.<br />If <see cref="T:eZstd.API.Windows.EnumWindowsProc" /> returns
                zero, the return value is also zero. In this case, the callback function should call SetLastError to obtain a
                meaningful error code to be returned to the caller of EnumWindows.
            </returns>
            <remarks>
               EnumWindows函数不列举子窗口。function does not enumerate child windows, with the exception of a few top-level windows owned by the system that have the WS_CHILD style.
               在循环体中调用这个函数比调用GetWindow函数更可靠。调用GetWindow函数中执行这个任务的应用程序可能会陷入死循环或指向一个已被销毁的窗口的句柄。 This function is more reliable than calling the GetWindow function in a loop. An application that calls the GetWindow function to perform this task risks being caught in an
                infinite loop or referencing a handle to a window that has been destroyed.<br />Note For Windows 8 and later,
                EnumWindows enumerates only top-level windows of desktop apps.
            </remarks>
        </member>
        <member name="M:eZstd.API.Windows.EnumDesktopWindows(System.IntPtr,eZstd.API.Windows.EnumWindowsProc,System.IntPtr)">
            <summary>
            枚举与指定桌面相关联的所有顶级窗口。它把每个窗口的句柄，依次传递到应用程序定义回调函数。
            </summary>
            <param name="hDesktop"> 要枚举其顶级窗口的桌面句柄，此句柄由CreateDesktop、 GetThreadDesktop、 OpenDesktop或OpenInputDesktop函数返回。并且必须拥有 DESKTOP_READOBJECTS 的访问权。 </param>
            <param name="lpfn">回调函数的委托,注意：回调函数的返回值将会影响到这个API函数的行为。如果回调函数返回true，则枚举继续直到枚举完成；如果返回false，则将会中止枚举。</param>
            <param name="lParam">要传递给回调函数应用程序定义的值。</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.API.Windows.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,eZstd.API.SetWindowPosFlags)">
            <summary>
            设置或获取窗口的位置与相对位置
            </summary>
            <param name="hwnd">欲定位的窗口</param>
            <param name="hWndInsertAfter">窗口句柄。在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。也可以选用枚举SWP_HWND中的值。 </param>
            <param name="x">窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示</param>
            <param name="y">窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示</param>
            <param name="cx">指定新的窗口宽度</param>
            <param name="cy">指定新的窗口高度</param>
            <param name="uFlags">SetWindowPosFlags枚举 </param>
            <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
            <remarks>窗口成为最顶级窗口后，它下属的所有窗口也会进入最顶级。
            一旦将其设为非最顶级，则它的所有下属和物主窗口也会转为非最顶级。
            Z序列用垂直于屏幕的一根假想Z轴量化这种从顶部到底部排列的窗口顺序</remarks>
        </member>
        <member name="M:eZstd.API.Windows.SetForegroundWindow(System.IntPtr)">
            <summary>
            设置窗口为前台窗口，这个函数可用于改变用户目前正在操作的应用程序。但是它是可以通过鼠标点击其他窗口而被覆盖的。
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
            <remarks>不应随便使用它，因为一旦程序突然从后台进入前台，可能会使用户产生迷惑</remarks>
        </member>
        <member name="M:eZstd.API.Windows.SetActiveWindow(System.IntPtr)">
            <summary>
            激活指定的窗口。
            在vb里使用这个函数要小心，它不会改变输入焦点，所以焦点可能设向一个不活动窗口，
            最好换用SetFocus API函数来激活窗口。如指定的窗口不从属于当前输入线程，则没有任何效果
            </summary>
            <param name="hWnd">待激活窗口的句柄</param>
            <returns>前一个活动窗口的句柄</returns>
            <remarks> SetActiveWindow函数激活一个窗口，但当应用程序处于后台时，将不激活指定窗口。当应用程序激活窗口时处于前台，则窗口将被放到前台。
            SetActiveWindow不会改变输入焦点，所以焦点可能设向一个不活动窗口，最好换用SetFocusAPI函数来激活窗口。如指定的窗口不从属于当前输入线程，则没有任何效果
            从另一方面讲，SetForegroundWindow窗口函数激活一个窗口并将其强制为前台的。当应用程序要显示关键错误或需要用户立即注意的信息时，应只能调用SetForegroundWindow函数。</remarks>
        </member>
        <member name="M:eZstd.API.Windows.SetFocus(System.IntPtr)">
            <summary>
            对指定的窗口设置键盘焦点。该窗口必须与调用线程的消息队列相关。
            在vb里对窗体和控件最好使用SetFocus方法。如指定的窗口不属于当前输入线程，则该函数是没有效果的。它用SetFocusAPI这个别名避免与vb的SetFocus方法发生冲突。
            </summary>
            <param name="hWnd"> 接收键盘输入的窗口指针。若该参数为NULL，则击键被忽略。 </param>
            <returns> 若函数调用成功，则返回原先拥有键盘焦点的窗口句柄。若hWnd参数无效或窗口未与调用线程的消息队列相关，则返回值为NULL。若想要获得更多错误信息，可以调用GetLastError函数。 </returns>
            <remarks>SetFocus函数发送WM_KILLFOCUS消息到失去键盘焦点的窗口，并且发送WM_SETFOCUS消息到接受键盘焦点的窗口。
            它也激活接受键盘焦点的窗口或接受键盘焦点的窗口的父窗口。</remarks>
        </member>
        <member name="M:eZstd.API.Windows.BringWindowToTop(System.IntPtr)">
            <summary>
            将指定的窗口带至窗口列表顶部。倘若它部分或全部隐藏于其他窗口下面，则将隐藏的部分完全显示出来。
            将窗口显示在窗口顶部后，还可以通过鼠标点击其他窗口而将此窗口覆盖。
            该函数也对弹出式窗口、顶级窗口以及MDI子窗口产生作用
            </summary>
            <param name="hwnd">欲带至顶部的那个窗口的句柄</param>
            <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
            <remarks>这个函数也许能随同子窗口使用。函数对一个特定的输入线程来说是“本地的”——换言之，倘若某窗口并非前台应用程序的一部分，
            那么一旦随同该窗口调用本函数，仍会将窗口带至它自己那个应用程序的窗口列表顶部。
            但是，不会同时使那个应用成为前台应用程序。这意味着在调用了本函数后，窗口仍会保持隐藏状态</remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetWindowRect(System.IntPtr,eZstd.API.RECT@)">
            <summary>
            获得整个窗口（或控件）的范围矩形。此矩形在屏幕坐标系中，屏幕左上角点为原点(0,0)。
            窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
            </summary>
            <param name="hwnd">想获得范围矩形的那个窗口的句柄，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内</param>
            <param name="lpRect">屏幕坐标中随同窗口装载的矩形</param>
            <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetClientRect(System.IntPtr,eZstd.API.RECT@)">
            <summary>
            返回指定窗口（或控件）客户区矩形的大小。此矩形在窗口客户坐标系中，客户区的左上角为原点(0,0)。
            </summary>
            <param name="hwnd">欲计算大小的目标窗口</param>
            <param name="lpRect">指定一个矩形，用客户区域的大小载入（以像素为单位）</param>
            <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
            <remarks>lpRect的左侧及顶部区域肯定会被这个函数设为零</remarks>
        </member>
        <member name="M:eZstd.API.Windows.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            在指定的窗口里允许或禁止所有鼠标及键盘输入（在vb里使用：在vb窗体和控件中使用Enabled属性）。
            当被禁止时，窗口不响应鼠标和按键的输入，允许时，窗口接受所有的输入。
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="bEnable">True允许窗口，False禁止</param>
            <returns>True表示成功，False表示失败</returns>
            <remarks>zengfy注：如果将Excel或Visio等的窗口禁用后，再去调用其Application属性，则会报错：应用程序正在使用中。</remarks>
        </member>
        <member name="M:eZstd.API.Windows.UpdateWindow(System.IntPtr)">
            <summary>
            强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法
            </summary>
            <param name="hWnd">欲更新窗口的句柄</param>
            <returns>True表示成功，False表示失败</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.ShowWindow(System.IntPtr,eZstd.API.ShowWindowCommands)">
            <summary>
            根据参数nCmdShow显示或改变指定的窗口
            </summary>
            <param name="hWnd">窗口句柄，要向这个窗口应用由nCmdShow指定的命令</param>
            <param name="nCmdShow">为窗口指定可视性方面的一个命令。</param>
            <returns></returns>
            <remarks>如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）</remarks>
        </member>
        <member name="M:eZstd.API.Windows.RedrawWindow(System.IntPtr,eZstd.API.RECT@,System.IntPtr,eZstd.API.RedrawWindowFlags)">
            <summary>
            根据fuRedraw旗标的设置，重画全部或部分窗口
            </summary>
            <param name="hwnd">要重画的窗口的句柄。零表示更新整个桌面窗口</param>
            <param name="lprcUpdate">窗口中需要重画的一个矩形区域，如果hrgnUpdate指定的是一个合法的区域句柄，则此参数被忽略。</param>
            <param name="hrgnUpdate">一个“区”的句柄，这个区描述了要重画的窗口区域。“区”：Region。
            如果<paramref name="lprcUpdate"/>和<paramref name="hrgnUpdate"/>都是Null，则整个用户区域被加入到更新区域中。</param>
            <param name="flags">规定具体重画操作的旗标。这些值可组合使用，从而进行复杂的重画行动</param>
            <returns>True表示成功，False表示失败</returns>
            <remarks>如针对桌面窗口应用这个函数，则应用程序必须用RDW_ERASE旗标重画桌面</remarks>
        </member>
        <member name="M:eZstd.API.Windows.IsWindowEnabled(System.IntPtr)">
            <summary>
            判断窗口是否处于活动状态（在vb里使用：针对vb窗体和控件，请用enabled属性）
            </summary>
            <param name="hWnd">待检查窗口的句柄</param>
            <returns>True表示成功，False表示失败</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetWindowThreadProcessId(System.Int32,System.Int32@)">
            <summary>
            获取与指定窗口关联在一起的一个进程和线程标识符
            </summary>
            <param name="handle">指定窗口句柄</param>
            <param name="processId">指定一个变量，用于装载拥有那个窗口的一个进程的标识符</param>
            <returns></returns>
            <remarks>拥有窗口的线程的标识符</remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            该函数获得指定窗口(或控件)所属的类的类名
            </summary>
            <param name="hWnd">窗口的句柄及间接给出的窗口所属的类</param>
            <param name="className">[out]得到的类名会保存在此参数中。</param>
            <param name="nMaxCount">指定由参数lpClassName指示的缓冲区的字节数。如果类名字符串大于缓冲区的长度，则多出的部分被截断</param>
            <remarks>
              在C#中调用时，请严格按照如下格式调用：
              StringBuilder className = new StringBuilder(255);
              Windows.GetClassName(hwnd, className, className.Capacity);</remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            如果目标窗口属于当前进程，GetWindowText函数给指定的窗口或控件发送WM_GETTEXT消息。
            如果目标窗口属于其他进程，并且有一个窗口标题，则GetWindowText返回窗口的标题文本，如果窗口无标题，则函数返回空字符串。
            </summary>
            <param name="hWnd"></param>
            <param name="lpString">[out] 得到的窗口文本会保存在此参数中。 If the string is as long or longer than the buffer, the string is truncated and terminated with a NULL character.</param>
            <param name="nMaxCount">[in] Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.</param>
            <returns>如果目标窗口属于当前进程，GetWindowText函数给指定的窗口或控件发送WM_GETTEXT消息。如果目标窗口属于其他进程，并且有一个窗口标题，则GetWindowText返回窗口的标题文本，如果窗口无标题，则函数返回空字符串。</returns>
            <remarks>If the hWnd object is a control, the GetWindowText member function copies the text within the control instead of copying the caption.
              在C#中调用时，请严格按照如下格式调用：
              StringBuilder windowText = new StringBuilder(255);
              Windows.GetWindowText(hwnd, windowText, windowText.Capacity);</remarks>
        </member>
        <member name="M:eZstd.API.Windows.GetWindowLong(System.IntPtr,eZstd.API.WindowLongFlags)">
            <summary>
            从指定窗口的结构中取得信息
            </summary>
            <param name="hwnd">欲为其获取信息的窗口的句柄</param>
            <param name="nIndex">欲取回的信息</param>
            <returns>由nIndex决定。零表示出错。会设置GetLastError</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.API.Windows.SetWindowLong(System.IntPtr,eZstd.API.WindowLongFlags,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs..</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To set any other value, specify one of the following values: GWL_EXSTYLE, GWL_HINSTANCE, GWL_ID, GWL_STYLE, GWL_USERDATA, GWL_WNDPROC </param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="T:eZstd.API.WindowsMessages">
            <summary>
            响应窗口的消息
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ACTIVATE">
             <summary>
            The WM_ACTIVATE message is sent when a window is being activated or deactivated. This message is sent first to the window procedure of the top-level window being deactivated; it is then sent to the window procedure of the top-level window being activated.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ACTIVATEAPP">
             <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_AFXFIRST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_AFXLAST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_APP">
             <summary>
            The WM_APP constant is used by applications to help define private messages usually of the form WM_APP+X where X is an integer value.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ASKCBFORMATNAME">
             <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CANCELJOURNAL">
             <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CANCELMODE">
             <summary>
            The WM_CANCELMODE message is sent to cancel certain modes such as mouse capture. For example the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example the EnableWindow function sends this message when disabling the specified window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CAPTURECHANGED">
             <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CHANGECBCHAIN">
             <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CHANGEUISTATE">
             <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CHAR">
             <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CHARTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CHILDACTIVATE">
             <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated moved or sized.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CLEAR">
             <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection if any from the edit control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CLOSE">
             <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_COMMAND">
             <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu when a control sends a notification message to its parent window or when an accelerator keystroke is translated.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_COMPACTING">
             <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_COMPAREITEM">
             <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CONTEXTMENU">
             <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_COPY">
             <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_COPYDATA">
             <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CREATE">
             <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created but before the window becomes visible.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORBTN">
             <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However only owner-drawn buttons respond to the parent window processing this message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORDLG">
             <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message the dialog box can set its text and background colors using the specified display device context handle.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLOREDIT">
             <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message the parent window can use the specified device context handle to set the text and background colors of the edit control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORLISTBOX">
             <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message the parent window can set the text and background colors of the list box by using the specified display device context handle.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORMSGBOX">
             <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message the owner window can set the text and background colors of the message box by using the given display device context handle.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORSCROLLBAR">
             <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message the parent window can use the display context handle to set the background color of the scroll bar control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CTLCOLORSTATIC">
             <summary>
            A static control or an edit control that is read-only or disabled sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message the parent window can use the specified device context handle to set the text and background colors of the static control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_CUT">
             <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection if any in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DEADCHAR">
             <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character such as the umlaut (double-dot) that is combined with another character to form a composite character. For example the umlaut-O character (?) is generated by typing the dead key for the umlaut character and then typing the O key.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DELETEITEM">
             <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING LB_RESETCONTENT CB_DELETESTRING or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DESTROY">
             <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message it can be assumed that all child windows still exist.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DESTROYCLIPBOARD">
             <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DEVICECHANGE">
             <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DEVMODECHANGE">
             <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DISPLAYCHANGE">
             <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DRAWCLIPBOARD">
             <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DRAWITEM">
             <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button combo box list box or menu when a visual aspect of the button combo box list box or menu has changed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_DROPFILES">
             <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ENABLE">
             <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns but after the enabled state (WS_DISABLED style bit) of the window has changed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ENDSESSION">
             <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ENTERIDLE">
             <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ENTERMENULOOP">
             <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ENTERSIZEMOVE">
             <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ERASEBKGND">
             <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_EXITMENULOOP">
             <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_EXITSIZEMOVE">
             <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_FONTCHANGE">
             <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETDLGCODE">
             <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETFONT">
             <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETHOTKEY">
             <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETICON">
             <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog and the small icon in the window caption.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETMINMAXINFO">
             <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position or its default minimum or maximum tracking size.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETOBJECT">
             <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint AccessibleObjectFromEvent or AccessibleObjectFromWindow. However server applications handle this message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETTEXT">
             <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_GETTEXTLENGTH">
             <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length in characters of the text associated with a window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HANDHELDFIRST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HANDHELDLAST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HELP">
             <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed WM_HELP is sent to the window associated with the menu; otherwise WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus WM_HELP is sent to the currently active window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HOTKEY">
             <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HSCROLL">
             <summary>
            This message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_HSCROLLCLIPBOARD">
             <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_ICONERASEBKGND">
             <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_CHAR">
             <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_COMPOSITION">
             <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_COMPOSITIONFULL">
             <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_CONTROL">
             <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message the application calls the SendMessage function with the following parameters.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_ENDCOMPOSITION">
             <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_KEYDOWN">
             <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_KEYLAST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_KEYUP">
             <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_NOTIFY">
             <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_REQUEST">
             <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_SELECT">
             <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_SETCONTEXT">
             <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_IME_STARTCOMPOSITION">
             <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_INITDIALOG">
             <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_INITMENU">
             <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_INITMENUPOPUP">
             <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed without changing the entire menu.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_INPUTLANGCHANGE">
             <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows and so on.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_INPUTLANGCHANGEREQUEST">
             <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_KEYDOWN">
             <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_KEYFIRST">
             <summary>
            This message filters for keyboard messages.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_KEYLAST">
             <summary>
            This message filters for keyboard messages.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_KEYUP">
             <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed or a keyboard key that is pressed when a window has the keyboard focus.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_KILLFOCUS">
             <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_LBUTTONDBLCLK">
             <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_LBUTTONDOWN">
             <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_LBUTTONUP">
             <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MBUTTONDBLCLK">
             <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MBUTTONDOWN">
             <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MBUTTONUP">
             <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIACTIVATE">
             <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDICASCADE">
             <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDICREATE">
             <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIDESTROY">
             <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIGETACTIVE">
             <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIICONARRANGE">
             <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIMAXIMIZE">
             <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDINEXT">
             <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIREFRESHMENU">
             <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDIRESTORE">
             <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDISETMENU">
             <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window to replace the window menu of the frame window or both.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MDITILE">
             <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MEASUREITEM">
             <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box list box list view control or menu item when the control or menu is created.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENUCHAR">
             <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENUCOMMAND">
             <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENUDRAG">
             <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENUGETOBJECT">
             <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENURBUTTONUP">
             <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MENUSELECT">
             <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEACTIVATE">
             <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEFIRST">
             <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEHOVER">
             <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSELAST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSELEAVE">
             <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEMOVE">
             <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured the message is posted to the window that contains the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEWHEEL">
             <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOUSEHWHEEL">
             <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOVE">
             <summary>
            The WM_MOVE message is sent after a window has been moved.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_MOVING">
             <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message an application can monitor the position of the drag rectangle and if needed change its position.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCACTIVATE">
             <summary>
            Non Client Area Activated Caption(Title) of the Form
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCCALCSIZE">
             <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message an application can control the content of the window's client area when the size or position of the window changes.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCCREATE">
             <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCDESTROY">
             <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCHITTEST">
             <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves or when a mouse button is pressed or released. If the mouse is not captured the message is sent to the window beneath the cursor. Otherwise the message is sent to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCLBUTTONDBLCLK">
             <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCLBUTTONDOWN">
             <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCLBUTTONUP">
             <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCMBUTTONDBLCLK">
             <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCMBUTTONDOWN">
             <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCMBUTTONUP">
             <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCMOUSEMOVE">
             <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCPAINT">
             <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCRBUTTONDBLCLK">
             <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCRBUTTONDOWN">
             <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NCRBUTTONUP">
             <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NEXTDLGCTL">
             <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NEXTMENU">
             <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NOTIFY">
             <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NOTIFYFORMAT">
             <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_NULL">
             <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PAINT">
             <summary>
            Occurs when the control needs repainting
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PAINTCLIPBOARD">
             <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PAINTICON">
             <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows except in unusual circumstances explained in the Remarks.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PALETTECHANGED">
             <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PALETTEISCHANGING">
             <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PARENTNOTIFY">
             <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed the system sends the message before any processing to destroy the window takes place.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PASTE">
             <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PENWINFIRST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PENWINLAST">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_POWER">
             <summary>
            Notifies applications that the system typically a battery-powered personal computer is about to enter a suspended mode. Obsolete : use POWERBROADCAST instead
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_POWERBROADCAST">
             <summary>
            Notifies applications that a power-management event has occurred.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PRINT">
             <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context most commonly in a printer device context.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_PRINTCLIENT">
             <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context most commonly in a printer device context.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUERYDRAGICON">
             <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUERYENDSESSION">
             <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero. After processing this message the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUERYNEWPALETTE">
             <summary>
            This message informs a window that it is about to receive the keyboard focus giving the window the opportunity to realize its logical palette when it receives the focus.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUERYOPEN">
             <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUEUESYNC">
             <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_QUIT">
             <summary>
            Once received it ends the application's Message Loop signaling the application to end. It can be sent by pressing Alt+F4 Clicking the X in the upper right-hand of the program or going to File->Exit.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_RBUTTONDBLCLK">
             <summary>
            he WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_RBUTTONDOWN">
             <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_RBUTTONUP">
             <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_RENDERALLFORMATS">
             <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications the clipboard owner must render data in all the formats it is capable of generating and place the data on the clipboard by calling the SetClipboardData function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_RENDERFORMAT">
             <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETCURSOR">
             <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETFOCUS">
             <summary>
            When the controll got the focus
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETFONT">
             <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETHOTKEY">
             <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key the system activates the window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETICON">
             <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box and the small icon in the window caption.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETREDRAW">
             <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETTEXT">
             <summary>
            Text / Caption changed on the control. An application sends a WM_SETTEXT message to set the text of a window.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SETTINGCHANGE">
             <summary>
            An application sends the WM_SETTINGCHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SHOWWINDOW">
             <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SIZE">
             <summary>
            The WM_SIZE message is sent to a window after its size has changed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SIZECLIPBOARD">
             <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SIZING">
             <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message an application can monitor the size and position of the drag rectangle and if needed change its size or position.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SPOOLERSTATUS">
             <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_STYLECHANGED">
             <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_STYLECHANGING">
             <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYNCPAINT">
             <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSCHAR">
             <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is a character key that is pressed while the ALT key is down.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSCOLORCHANGE">
             <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSCOMMAND">
             <summary>
            A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button minimize button restore button or close button.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSDEADCHAR">
             <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is a dead key that is pressed while holding down the ALT key.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSKEYDOWN">
             <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_SYSKEYUP">
             <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_TCARD">
             <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_TIMECHANGE">
             <summary>
            A message that is sent whenever there is a change in the system time.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_TIMER">
             <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_UNDO">
             <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control the previously deleted text is restored or the previously added text is deleted.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_UNINITMENUPOPUP">
             <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_USER">
             <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes usually of the form WM_USER+X where X is an integer value.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_USERCHANGED">
             <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off the system updates the user-specific settings. The system sends this message immediately after updating the settings.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_VKEYTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_VSCROLL">
             <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_VSCROLLCLIPBOARD">
             <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_WINDOWPOSCHANGED">
             <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size position or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_WINDOWPOSCHANGING">
             <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size position or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_WININICHANGE">
             <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI. Note The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_XBUTTONDBLCLK">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_XBUTTONDOWN">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowsMessages.WM_XBUTTONUP">
             <summary>
            Definition Needed
             </summary>
             <remarks></remarks>
        </member>
        <member name="T:eZstd.API.SysCommands">
            <summary>
            System command values used in the WM_SYSCOMMAND notification.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_SIZE">
            <summary>Sizes the window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_MOVE">
            <summary>Moves the window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_MINIMIZE">
            <summary>Minimizes the window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_MAXIMIZE">
            <summary>Maximizes the window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_NEXTWINDOW">
            <summary>Moves to the next window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_PREVWINDOW">
            <summary>Moves to the previous window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_CLOSE">
            <summary>Closes the window.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_VSCROLL">
            <summary>Scrolls vertically.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_HSCROLL">
            <summary>Scrolls horizontally.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_MOUSEMENU">
            <summary>Retrieves the window menu as a result of a mouse click.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_KEYMENU">
            <summary>
            Retrieves the window menu as a result of a keystroke.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_ARRANGE">
            <summary>TODO</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_RESTORE">
            <summary>Restores the window to its normal position and size.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_TASKLIST">
            <summary>Activates the Start menu.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_SCREENSAVE">
            <summary>Executes the screen saver application specified in the [boot] section of the System.ini file.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_HOTKEY">
            <summary>
            Activates the window associated with the application-specified hot key.
            The lParam parameter identifies the window to activate.
            </summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_DEFAULT">
            <summary>Selects the default item; the user double-clicked the window menu.</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_MONITORPOWER">
            <summary>
            Sets the state of the display. This command supports devices that
            have power-saving features, such as a battery-powered personal computer.
            The lParam parameter can have the following values: -1 = the display is powering on,
            1 = the display is going to low power, 2 = the display is being shut off
            </summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_CONTEXTHELP">
            <summary>
            Changes the cursor to a question mark with a pointer. If the user
            then clicks a control in the dialog box, the control receives a WM_HELP message.
            </summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SC_SEPARATOR">
            <summary>TODO</summary>
        </member>
        <member name="F:eZstd.API.SysCommands.SCF_ISSECURE">
            <summary>Indicates whether the screen saver is secure.</summary>
        </member>
        <member name="F:eZstd.API.PeekMessageParams.PM_NOREMOVE">
            <summary>
            经过PeekMessage处理后，消息依然留在队列中
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.PeekMessageParams.PM_REMOVE">
            <summary>
            经过PeekMessage处理后，消息被从队列中删除
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.SWP_HWND">
            <summary>
            传递给SetWindowPos函数
            参考： http://www.pinvoke.net/default.aspx/Constants/HWND.html
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_BOTTOM">
            <summary>
            将窗口置于窗口列表底部
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_BROADCAST">
             <summary>
            
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_DESKTOP">
             <summary>
            
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_MESSAGE">
             <summary>
            
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_NOTOPMOST">
            <summary>
            将窗口置于列表顶部，并位于任何最顶部窗口的后面
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_TOP">
            <summary>
            将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SWP_HWND.HWND_TOPMOST">
            <summary>
            窗体置于屏幕最顶端，可以缩小移动，而且不会被其他窗口覆盖。但是用户可以编辑后面窗口。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.SynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window. This prevents the calling thread from
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid
            contents of the client area are saved and copied back into the client area after the window is sized or
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent
            window uncovered as a result of the window being moved. When this flag is set, the application must
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:eZstd.API.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
        <member name="T:eZstd.API.GetWndConsts">
            <summary>
            Specifies the relationship between the specified window and the window whose handle is to be retrieved.
            </summary>
            <remarks>兄弟或同级是指在整个分级结构中位于同一级别的窗口。如某个窗口有五个子窗口，那五个窗口就是兄弟窗口。
            尽管GetWindow可用于枚举窗口，但倘若要在枚举过程中重新定位、创建和清除窗口，那么EnumWindows和EnumChildWindows更为可靠</remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_HWNDFIRST">
            <summary>
            为一个源子窗口寻找第一个兄弟（同级）窗口，或寻找第一个顶级窗口
            要获取的窗口与原窗口处于同一级别，但它的Z序最大。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_HWNDLAST">
            <summary>
            为一个源子窗口寻找最后一个兄弟（同级）窗口，或寻找最后一个顶级窗口。
            要获取的窗口与原窗口处于同一级别，但它的Z序最小。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_HWNDNEXT">
            <summary>
            为源窗口寻找下一个兄弟窗口。
            要获取的窗口与原窗口处于同一级别，并且它的Z序恰好在原窗口之上。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_HWNDPREV">
            <summary>
            为源窗口寻找前一个兄弟窗口。
            要获取的窗口与原窗口处于同一级别，并且它的Z序恰好在原窗口之下。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_OWNER">
            <summary>
            寻找窗口的所有者
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.GetWndConsts.GW_CHILD">
            <summary>
            寻找源窗口的第一个子窗口
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.ShowWindowCommands">
            <summary>
            Used with ShowWindow and WINDOWPLACEMENT.specifying how the window is to be shown
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Normal">
            <summary>
            Activates and displays a window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window
            for the first time.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value
            is similar to <see cref="F:eZstd.API.ShowWindowCommands.Normal"/>, except
            the window is not actived.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level
            window in the Z order.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to
            <see cref="F:eZstd.API.ShowWindowCommands.ShowMinimized"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is
            similar to <see cref="F:eZstd.API.ShowWindowCommands.Show"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ShowDefault">
            <summary>
            Sets the show state based on the SW_* value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.
            </summary>
        </member>
        <member name="F:eZstd.API.ShowWindowCommands.ForceMinimize">
            <summary>
             <b>Windows 2000/XP:</b> Minimizes a window, even if the thread
            that owns the window is not responding. This flag should only be
            used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:eZstd.API.WindowLongFlags">
            <summary>
            Flags for GetWindowLong, GetWindowLongPtr, SetWindowLong and SetWindowLongPtr
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_EXSTYLE">
            <summary>
            窗口的扩展样式
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_STYLE">
            <summary>
            窗口样式
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_WNDPROC">
            <summary>
            该窗口的窗口函数的地址，即指向窗口函数的指针。
            用GWL_WNDPROC索引调用函数<see cref="!:apiWindows.SetWindowLong"/>可以创建窗口类的一个子类。
            应用程序不要试图为其他进程创建的窗口产生子类，那样不起作用。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_HINSTANCE">
            <summary>
            拥有窗口的实例的句柄
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_HWNDPARENT">
            <summary>
            该窗口之父的句柄。不要用SetWindowWord来改变这个值。
            SetParent函数修改子窗口的父窗口。应用程序不应调用SetWindowLong函数来修改子窗口的父窗口。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_ID">
            <summary>
            对话框中一个子窗口的标识符
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.GWL_USERDATA">
            <summary>
            含义由应用程序规定。此索引可以用来存取一个保存在每一个窗口结构中的Long值。这个Long值是特意为应用程序保留的。
            通过，窗口是被另外的应用程序创建的话，那么应用程序不应该在这个窗口的Long值中存储东西。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.DWL_DLGPROC">
            <summary>
            这个窗口的对话框函数地址
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.DWL_MSGRESULT">
            <summary>
            在对话框函数中处理的一条消息返回的值
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.WindowLongFlags.DWL_USER">
            <summary>
            含义由应用程序规定
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.WindowStyle">
            <summary>
            Window Styles.
            The following styles can be specified wherever a window style is required.
            After the control has been created, these styles cannot be modified, except as noted.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_ACCEPTFILES">
            <summary>Specifies a window that accepts drag-drop files.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_CLIENTEDGE">
            <summary>Specifies a window that has a border with a sunken edge.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_COMPOSITED">
            <summary>
            Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. This style is not supported in Windows 2000.
            </summary>
            <remarks>
            With WS_EX_COMPOSITED set, all descendants of a window get bottom-to-top painting order using double-buffering.
            Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
            but only if the descendent window also has the WS_EX_TRANSPARENT bit set.
            Double-buffering allows the window and its descendents to be painted without flicker.
            </remarks>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_CONTEXTHELP">
            <summary>
            Specifies a window that includes a question mark in the title bar. When the user clicks the question mark,
            the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_CONTROLPARENT">
            <summary>
            Specifies a window which contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing navigation operations
            such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_DLGMODALFRAME">
            <summary>Specifies a window that has a double border.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_LAYERED">
            <summary>
            Specifies a window that is a layered window.
            This cannot be used for child windows or if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_LAYOUTRTL">
            <summary>
            Specifies a window with the horizontal origin on the right edge. Increasing horizontal values advance to the left.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_LEFT">
            <summary>Specifies a window that has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_LEFTSCROLLBAR">
            <summary>
            Specifies a window with the vertical scroll bar (if present) to the left of the client area.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_LTRREADING">
            <summary>
            Specifies a window that displays text using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_MDICHILD">
            <summary>
            Specifies a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_NOACTIVATE">
            <summary>
            Specifies a top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_NOINHERITLAYOUT">
            <summary>
            Specifies a window which does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_OVERLAPPEDWINDOW">
            <summary>Specifies an overlapped window.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_PALETTEWINDOW">
            <summary>Specifies a palette window, which is a modeless dialog box that presents an array of commands.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_RIGHT">
            <summary>
            Specifies a window that has generic "right-aligned" properties. This depends on the window class.
            The shell language must support reading-order alignment for this to take effect.
            Using the WS_EX_RIGHT style has the same effect as using the SS_RIGHT (static), ES_RIGHT (edit), and BS_RIGHT/BS_RIGHTBUTTON (button) control styles.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_RIGHTSCROLLBAR">
            <summary>Specifies a window with the vertical scroll bar (if present) to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_RTLREADING">
            <summary>
            Specifies a window that displays text using right-to-left reading-order properties.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_STATICEDGE">
            <summary>Specifies a window with a three-dimensional border style intended to be used for items that do not accept user input.</summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_TOOLWINDOW">
            <summary>
            Specifies a window that is intended to be used as a floating toolbar.
            A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font.
            A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
            If a tool window has a system menu, its icon is not displayed on the title bar.
            However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_TOPMOST">
            <summary>
            Specifies a window that should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_TRANSPARENT">
            <summary>
            Specifies a window that should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:eZstd.API.WindowStyle.WS_EX_WINDOWEDGE">
            <summary>Specifies a window that has a border with a raised edge.</summary>
        </member>
        <member name="T:eZstd.API.RedrawWindowFlags">
            <summary>
            Used with the RedrawWindow function.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            禁用（屏蔽）重画区域。把矩形或区域加入窗口的无效区。
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.InternalPaint">
             <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.
             即使窗口并非无效，也向其投递一条WM_PAINT消息
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            重画前，先清除重画区域的背景。也必须指定RDW_INVALIDATE。
            重画操作包括了所有的子窗口
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            检验重画区域。把矩形或区域从窗口的更新区域中删除。
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.NoInternalPaint">
            <summary>
            禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.NoErase">
             <summary>Suppresses any pending WM_ERASEBKGND messages.
             禁止删除重画区域的背景。重画操作不包括子窗口。
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.NoChildren">
             <summary>Excludes child windows, if any, from the repainting operation.
             重画操作排除子窗口（前提是它们存在于重画区域）
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.AllChildren">
             <summary>Includes child windows, if any, in the repainting operation.
             重画操作包括子窗口（前提是它们存在于重画区域）
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.UpdateNow">
             <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.
             立即更新指定的重画区域
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            立即删除指定的重画区域
            </summary>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.Frame">
            <summary>
            如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW_INVALIDATE。
            在窗口重画时使窗口收到一条WM_ERASEBKGND消息。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.RedrawWindowFlags.NoFrame">
            <summary>
            禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW_VALIDATE
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.HookType">
            <summary>
            枚举传递给SetWindowsHookEx函数的有效的hook类型值
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.LoadLibraryFlags">
            <summary>
            用在 LoadLibraryEx 函数中
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.API.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
            <summary> 不对DLL进行初始化，仅用于NT </summary>
        </member>
        <member name="F:eZstd.API.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
            <summary> 不准备DLL执行。如装载一个DLL只是为了访问它的资源，就可以改善一部分性能 </summary>
        </member>
        <member name="F:eZstd.API.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
            <summary> 指定搜索的路径 </summary>
        </member>
        <member name="T:eZstd.API.ShowCommands">
            <summary>
            ShellExecute()函数的枚举参数
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_HIDE">
            <summary>
            隐藏窗口，活动状态给另一个窗口
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_NORMAL">
            <summary>
            与SW_RESTORE相同
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_SHOWMINIMIZED">
            <summary>
            最小化窗口，并将其激活
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_SHOWMAXIMIZED">
            <summary>
            最大化窗口，并将其激活
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_MAXIMIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_SHOWNOACTIVATE">
            <summary>
            最小化一个窗口，同时不改变活动窗口
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_SHOW">
            <summary>
            用当前的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_MINIMIZE">
            <summary>
            最小化窗口，活动状态给另一个窗口
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_SHOWNA">
            <summary>
            用当前的大小和位置显示一个窗口，不改变活动窗口
            </summary>
        </member>
        <member name="F:eZstd.API.ShowCommands.SW_RESTORE">
            <summary>
            用原来的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="T:eZstd.API.MSG">
            <summary>
            The MSG structure contains message information from a thread's message queue.
            Alternative Managed API: Use the <see cref="T:System.Windows.Forms.Message"/> or System.Windows.Interop.MSG struct.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.NativeMessage">
            <summary>
            This is a different data structure from <see cref="T:System.Windows.Forms.Message"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.API.RECT">
            <summary>
            这是windows广泛采用的一种数据结构，通常作为参数传递给许多api函数。
            RECT结构表示一个矩形区域，left和top字段描叙了矩形第一个角（通常是左上角），
            right和bottom字段描叙了矩形的第二个角（通常是右下角）。这两个位置决定了矩形的大小与位置。
            这些字段采用的单位及坐标系统取决于当前的有效缩放比例、准备表示的对象以及准备调用的api函数。
            并不要求bottom字段的绝对值大于top字段，而且也可以为负数。
            </summary>
            <remarks>由right及bottom字段指定的点通常不是矩形的一部分；矩形对象描叙的是个空矩形（其中不包含像素）；
            RECT结构要求按引用传递给windows函数，不要试图使用ByVal </remarks>
        </member>
        <member name="M:eZstd.API.UnClassified.CallWindowProc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             将消息信息传送给指定的窗口过程的函数。
             </summary>
             <param name="lpPrevWndFunc">指向前一个窗口过程的指针。如果该值是通过调用GetWindowLong函数，
             并将该函数中的nlndex参数设为GWL_WNDPROC或DWL_DLGPROC而得到的，那么它实际上要么是窗口或者对话框的地址，要么就是代表该地址的句柄。</param>
             <param name="hWnd">指向接收消息的窗口过程的句柄。</param>
             <param name="Msg">指定消息类型。</param>
             <param name="wParam"></param>
             <param name="lParam"></param>
             <returns></returns>
             <remarks>使用函数CallWindowsProc可进行窗口子分类。通常来说，同一类的所有窗口共享一个窗口过程。子类是一个窗口或者相同类的一套窗口，在其消息被传送到该类的窗口过程之前，这些消息是由另一个窗口过程进行解释和处理的。
            SetWindowLong函数通过改变与特定窗口相关的窗口过程，使系统调用新的窗口过程来创建子类，
             新的窗口过程替换了以前的窗口过程。应用程序必须通过调用CallWindowsProc来将新窗口过程没有处理的任何消息传送到以前的窗口过程中，
             这样就允许应用程序创建一系列窗口过程。  It is possible to execute an array of bytes. lpPrevWndFunc is equal to the address of the byte array.</remarks>
        </member>
        <member name="M:eZstd.APIUtils.IO.KillFileByBat(System.String)">
            <summary>
            通过生成.bat文件的方式来删除指定的文件，包括某正在执行的.exe或.dll文件。
            </summary>
            <param name="executableFile">要删除的文件的绝对路径。
            如果要删除当前正在运行的程序文件，可以将 System.Reflection.Assembly.GetExecutingAssembly().Location 作为参数。</param>
            <returns> 返回生成的那个.bat文件的绝对路径。但是当此函数执行完成时，此.bat文件应该已经被删除了。 </returns>
            <remarks>此函数是通过先在同文件夹下生成一个.bat命令文件，然后再通过.bat中的命令来删除.exe文件的。 </remarks>
        </member>
        <member name="T:eZstd.APIUtils.Windows">
            <summary>
            在windows API中，已经有大量的函数可以直接调用，但是在某些特殊的情况下，还是要通过一些复杂的操作流程才能对窗口进行处理。
            此类对于这些复杂操作进行进一步封装。
            </summary>
        </member>
        <member name="M:eZstd.APIUtils.Windows.FindChildWindow(System.IntPtr,System.String,System.String)">
            <summary>
            搜索父窗口（或控件）中指定类名与窗口文本的子窗口。如果没有匹配到指定类名与文本的子窗口，则返回 new IntPtr(0)
            </summary>
            <param name="hwndParent">父窗口（或控件）的句柄</param>
            <param name="className">要匹配的窗口类名，如果不需要匹配，则输入null</param>
            <param name="windowText">要匹配的窗口文本，如果不需要匹配，则输入null</param>
            <returns>如果没有匹配到指定类名与文本的子窗口，则返回 new IntPtr(0)</returns>
        </member>
        <member name="T:eZstd.APIUtils.Windows.ChildWindowFinder">
            <summary>
            搜索父窗口（或控件）中指定类名与窗口文本的子窗口
            </summary>
        </member>
        <member name="M:eZstd.APIUtils.Windows.ChildWindowFinder.FindChild(System.IntPtr,System.String,System.String)">
            <summary>
            搜索父窗口（或控件）中指定类名与窗口文本的子窗口
            </summary>
            <param name="hwndParent">父窗口（或控件）的句柄 </param>
            <param name="className">要匹配的窗口类名，如果不需要匹配，则输入null</param>
            <param name="windowText">要匹配的窗口文本，如果不需要匹配，则输入null</param>
            <returns> 如果没有匹配到指定类名与文本的子窗口，则返回 new IntPtr(0) </returns>
        </member>
        <member name="M:eZstd.APIUtils.Windows.ChildWindowFinder.FindGraphicalViewProc(System.IntPtr,System.IntPtr)">
            <summary>
            对 Revit 主窗口下的所有子窗口进行遍历，以找到 绘图View的那个子窗口
            </summary>
            <param name="hwnd"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Data.BinarySerializer">
            <summary>
            在.NET中，我们可以将对象序列化从而保存对象的状态到内存或者磁盘文件中，或者分布式应用程序中用于系统通信，，这样就有可能做出一个“对象数据库”了。
            一般来说，二进制序列化的效率要高，所获得的字节数最小。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.BinarySerializer.EnCode(System.IO.Stream,System.Object)">
            <summary>
            将任意一个声明为Serializable的类或者其List等集合中的数据，以二进制的格式保存到对应的流文件中。
            </summary>
            <param name="fs">推荐使用FileStream对象。此方法中不会对Stream对象进行Close。</param>
            <param name="Data">要进行保存的可序列化对象</param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.BinarySerializer.DeCode(System.IO.Stream)">
            <summary>
            从二进制流文件中，将其中的二进制数据反序列化为对应的类或集合对象。
            </summary>
            <param name="fs">推荐使用FileStream对象。此方法中不会对Stream对象进行Close。</param>
            <returns>此二进制流文件所对应的可序列化对象</returns>
            <remarks></remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:eZstd.Data.XmlList0`1" -->
        <member name="F:eZstd.Data.XmlList0`1._sourceList">
            <summary> 集合内部维护的 IList 集合</summary>
        </member>
        <member name="M:eZstd.Data.XmlList0`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary> 构造函数（不推荐，因为通过此方法构造出来的 XmlList 内部维护的IList集合
            与这里的输入参数 wrapped 集合代表同一个地址） </summary>
            <param name="wrapped">在外部继续对此集合元素的增加、插入、移除会同步到 SourceList 属性中，
            因为这二者引用的是内存中同一个集合的地址。</param>
        </member>
        <member name="M:eZstd.Data.XmlList0`1.Clone">
            <summary> 将内部维护的集合进行复制 </summary>
        </member>
        <member name="T:eZstd.Data.ExcelDbHelper">
            <summary>
            利用ADO.NET连接Excel数据库，并执行相应的操作：
            创建表格，读取数据，写入数据，获取工作簿中的所有工作表名称。
            </summary>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.ConnectToExcel(System.String,System.Byte)">
            <summary>
            创建对Excel工作簿的连接
            </summary>
            <param name="excelWorkbookPath">要进行连接的Excel工作簿的路径</param>
            <param name="iMEX"> 数据库的连接方式。
            	当 IMEX=0 时为“导出模式Export mode”，这个模式开启的 Excel 档案只能用来做“写入”用途；
             	当 IMEX=1 时为“导入模式Import mode”，这个模式开启的 Excel 档案只能用来做“读取”用途。IMEX=1将前8行的值中有字符类型的字段的数据类型看作字符类型；
            	当 IMEX=2 时为“连结模式Linked mode (full update capabilities)”，这个模式开启的 Excel 档案可同时支持“读取”与“写入”用途。</param>
            <returns>一个OleDataBase的Connection连接，此连接还没有Open。</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.IsExcelDataSource(System.String)">
            <summary>
            验证连接的数据源是否是Excel数据库
            </summary>
            <param name="excelWorkbookPath"> Excel 工作簿的绝对路径 </param>
            <returns>如果是Excel数据库，则返回True，否则返回False。</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetSheetsName(System.Data.OleDb.OleDbConnection)">
            <summary>
            从对于Excel的数据连接中获取Excel工作簿中的所有工作表（不包含Excel中的命名区域NamedRange）
            </summary>
            <param name="conn"></param>
            <returns>集合中所有工作表的名称都带有后缀 $ 。如果此连接不是连接到Excel数据库，则返回Nothing</returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetFieldNames(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            获取指定工作表中所有字段的名称，包括主键
            </summary>
            <param name="conn"></param>
            <param name="tableName"> 要在哪一个工作表中提取字段信息，表名的格式为“Sheet1$”</param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetFieldDataType(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            获取指定工作表中所有字段的数据类型。
            </summary>
            <param name="conn"></param>
            <param name="tableName"> 要在哪一个工作表中提取字段信息，表名的格式为“Sheet1$”</param>
            <remarks>Excel中字段的数据类型是以数字来表示的，其中：时间=7；</remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetDataFromSheet(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            读取Excel整张工作表中的所有字段的数据
            </summary>
            <param name="conn">OleDB的数据连接</param>
            <param name="sheetName">要读取的数据所在的工作表，名称中请自行包括后缀$</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetFieldDataFromExcel(System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary>
            读取Excel工作表中的某一个字段数据
            </summary>
            <param name="conn">OleDB的数据连接</param>
            <param name="SheetName">要读取的数据所在的工作表，名称中请自行包括后缀$</param>
            <param name="FieldName">在读取的字段</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetFieldDataFromExcel``1(System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary>
            读取Excel工作表中的某一个字段数据
            </summary>
            <param name="conn">OleDB的数据连接</param>
            <param name="SheetName">要读取的数据所在的工作表，名称中请自行包括后缀$</param>
            <param name="FieldName">在读取的字段</param>
            <typeparam name="T">要提取的字段的数据类型，比如设置为 double? 等可空类型 </typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetFieldDataFromExcel(System.Data.OleDb.OleDbConnection,System.String,System.String[])">
            <summary>
            读取Excel工作簿中的多个字段的数据
            </summary>
            <param name="conn">OleDB的数据连接</param>
            <param name="SheetName">要读取的数据所在的工作表，工作表名请自行添加后缀“$”</param>
            <param name="FieldNames">在读取的每一个字段的名称</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.GetDataSet(System.Data.OleDb.OleDbConnection,System.String)">
            <summary> 执行有参SQL语句，返回DataTable </summary>
            <param name="conn"></param>
            <param name="safeSql">数据查询语句，比如“ Selete * From [Sheet1$] ”</param>
            <returns> DataAdapter.Fill得到的DataSet中的第一个DataTable </returns>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.InsertDataTable(System.Data.OleDb.OleDbConnection,System.Data.DataTable,System.String)">
            <summary>
            将一个全新的 DataTable 对象写入 Excel 数据库中
            </summary>
            <param name="conn"> </param>
            <param name="tableSource"> 数据源，此工作表中的每一个字段中的数据都会被插入到Excel的指定工作表中。
            请手动确保工作表Sheet中有与DataTable中每一列同名的字段，而且其数据类型是兼容的。 </param>
            <param name="sheetName"> 要进行插入的Excel工作表的名称，其格式为“Sheet1$”。请确保此工作表已经存在，而且已经包含与 tableSource 的列名相对应的字段 </param>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.InsertToSheet(System.Data.OleDb.OleDbConnection,System.String,System.String,System.Object)">
            <summary>
            向Excel工作表中插入一条数据
            </summary>
            <param name="conn"></param>
            <param name="sheetName">要插入数据的工作表名称，名称中请自带后缀$ </param>
            <param name="FieldName">要插入到的字段</param>
            <param name="Value">实际插入的数据</param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.CreateNewSheet(System.Data.OleDb.OleDbConnection,System.String,System.String[])">
            <summary>
            根据指定的字段名创建一个全新的Excel工作表，但是不向其中添加任何数据。
            </summary>
            <param name="conn"></param>
            <param name="sheetName"> 要创建的工作表的名称，不能带后缀$ </param>
            <param name="fields_valueTypes"> 工作表中的每一个字段，以及字段所对应的数据类型。如果不赋值，则只创建出一个工作表，而不创建任何字段。 </param>
            <remarks>在Excel中创建工作表的语句为： "CREATE TABLE Sheet1 ( [Field1] VarChar,[Field2] VarChar)" </remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.CreateNewSheet(System.Data.OleDb.OleDbConnection,System.Data.DataTable)">
            <summary>
            根据指定的DataTable 创建一个全新的 Excel 工作表，而不添加任何数据。
            </summary>
            <param name="conn"></param>
            <param name="tableSource"> 工作表名称即 tableSource.TableName；工作表中每一个字段的名称即tableSource中每一列的列名 </param>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.ExecuteNoneQuery(System.Data.OleDb.OleDbConnection,System.String)">
            <summary> 对Excel数据库执行非查询SQL语句 </summary>
            <param name="conn"></param>
            <param name="sql"> 用来执行的非查询sql语句</param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.ConstructFieldNames(System.Collections.Generic.IList{System.String})">
            <summary>
            将要提取的字段名称转换为SQL语句中的字段名称字符
            </summary>
            <param name="FieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.ConstructDbValue(System.Collections.Generic.IList{System.Object},System.Text.StringBuilder@)">
            <summary>
            将要提取的字段名称转换为SQL语句中的字段名称字符
            </summary>
            <param name="values"></param>
            <param name="sb"></param>
        </member>
        <member name="M:eZstd.Data.ExcelDbHelper.ConvertExcelDataType(System.Type)">
            <summary>
            Create Table时，为字段名匹配字段类型
            </summary>
            <param name="type"> .NET 中的数据类型 </param>
            <returns> Excel中的数据类型 </returns>
        </member>
        <member name="T:eZstd.Data.DataTableHelper">
            <summary>
            与 DataTable 相关的格式转换等操作
            </summary>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.FillDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将实体类中所有的非[Browsable(false)]属性转换成DataTable
            </summary>
            <param name="modelList">实体类集合。如果集合中元素个数为0，则可以成功创建出一个空表格。</param>
            <typeparam name="TEntityClass">数据表所对应的实体类，
            只有实体类中的属性Property才会被创建为数据表中的对应字段，而且此Property不能有[Browsable(false)]标记。</typeparam>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.FillDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将实体类中的指定名称的非[Browsable(false)]属性转换成DataTable
            </summary>
            <param name="modelList">实体类集合。如果集合中元素个数为0，则可以成功创建出一个空表格。</param>
            <param name="fieldName">要从实体类中提取成为数据表字段的属性名称（区分大小写）</param>
            <typeparam name="TEntityClass">数据表所对应的实体类，
            只有实体类中的属性Property才会被创建为数据表中的对应字段，而且此Property不能有[Browsable(false)]标记。</typeparam>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.GetPropertiesForTableField``1">
            <summary>
            将指定实体类中的属性进行甄别，以选择出其中可以作为表格字段的属性。
            字段只能对应于属性Property，而且其不能有[Browsable(false)]标记。
            </summary>
            <typeparam name="TEntityClass">数据表所对应的实体类</typeparam>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.GetPropertiesForTableField``1(System.String[])">
            <summary>
            将指定实体类中的指定名称的属性转换为DataTable中的字段对象
            字段只能对应于属性Property，而且其不能有[Browsable(false)]标记。
            </summary>
            <param name="fieldName">要从实体类中提取成为数据表字段的属性名称（区分大小写）</param>
            <typeparam name="TEntityClass">数据表所对应的实体类</typeparam>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.FilterNull(System.Object)">
            <summary> 如果输入的值为null，则返回 DBNull.Value，否则返回这个值本身 </summary>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.GetValue(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.PrintTableOrView(System.Data.DataTable,System.String)">
            <summary>
            将表格打印为格式化的字符
            </summary>
            <param name="table">要打印的表格</param>
            <param name="label">表格的标题</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.DataTableHelper.PrintTableOrView(System.Data.DataView,System.String)">
            <summary>
            将表格视图打印为格式化的字符
            </summary>
            <param name="table">要打印的表格视图</param>
            <param name="label">视图的标题</param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Data.SqlDataSetHelper">
            <summary>
            以数据集DataSet为基础的三层架构的数据库通用方法
            </summary>
        </member>
        <member name="F:eZstd.Data.SqlDataSetHelper.ConnectString">
            private static string ConnectString = "server=(local)\\sqlexpress;database=Book;user=sa;pwd=1234";//数据库连接字符串
        </member>
        <member name="M:eZstd.Data.SqlDataSetHelper.GetDataSetByTableName(System.String)">
            <summary>
            根据表名获取数据集的表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.SqlDataSetHelper.GetDataSetBySql(System.String)">
            <summary>
            根据Sql语句获取数据集对象
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.SqlDataSetHelper.GetDataReaderByID(System.Int32)">
            <summary>
            根据id值获取DataReader对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.SqlDataSetHelper.UpdateDataTable(System.String)">
            <summary>
            更新数据
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Data.SqlDataSetHelper.UpdateDataSet(System.Data.DataSet,System.String)">
            <summary>
            根据数据集和sql语句更新数据库
            </summary>
            <param name="ds"></param>
            <param name="sql"></param>
        </member>
        <member name="T:eZstd.Data.SqlModelHelper">
            <summary>
            以数据实体为基础的三层架构的数据库通用方法
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.ExecuteCommand(System.String)">
            <summary>
            执行无参SQL语句
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.ExecuteCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带参SQL语句
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.GetScalar(System.String)">
            <summary>
            执行无参SQL语句，并返回执行记录数
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.GetScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行有参SQL语句，并返回执行记录数
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.GetReader(System.String)">
            <summary>
            执行无参SQL语句，并返回SqlDataReader
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.GetReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行有参SQL语句，并返回SqlDataReader
            </summary>
        </member>
        <member name="M:eZstd.Data.SqlModelHelper.GetDataSet(System.String)">
            <summary>
            执行有参SQL语句，返回DataTable
            </summary>
            <param name="safeSql"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Data.StringSerializer">
            <summary>
            将任意一个有 Serializable标记的类以二进制转换器将类中所有数据与字符串间的相互序列化。
            即可以将类中的数据（包括数组）序列化为字符，还可以将序列化的字符反序列化为一个类。
            </summary>
        </member>
        <member name="M:eZstd.Data.StringSerializer.Encode64(System.Object)">
            <summary>
            Encode arbitrary .NET serialisable object
            into binary data encodes as base64 string.
            </summary>
        </member>
        <member name="M:eZstd.Data.StringSerializer.Decode64(System.String)">
            <summary>
            Decode arbitrary .NET serialisable object
            from binary data encoded as base64 string.
            </summary>
        </member>
        <member name="T:eZstd.Data.StringSerializer.ZengfyLinkBinder">
            <summary>
            为了解决SerializationException，方法之一是确保此assembly放置在与acad.exe 或 revit.exe相同的文件夹中，
            另一个方法就是实现一个像这样的类。
            </summary>
            <remarks>
             Resolve System.Runtime.Serialization.SerializationException, Message =
            "Unable to find assembly 'StoreData, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'."
            One solution is to ensure that assembly resides in same directory as acad.exe or revit.exe,
            the other is to implement a class such as this, cf.
            http://www.codeproject.com/soap/Serialization_Samples.asp
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:eZstd.Data.XmlList`1" -->
        <member name="M:eZstd.Data.XmlList`1.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZstd.Dll.AssemblyHelper.DynamicDebugClass(System.String,System.String,System.Object[])">
            <summary>
            将一个程序集插件进行动态加载，并可以在不关闭主程序的情况下进行调试。
            类似于Autodesk Revit中的插件 AddinManager 所起的作用。
            </summary>
            <param name="dllPath">dll或者exe文件的绝对路径</param>
            <param name="classFullName">实例对象所属的类的完全限定名</param>
            <param name="constructorArgs">构造函数的输入实参</param>
            <returns></returns>
            <remarks>将此程序集作为动态插件加载到某程序中去后（比如将某Excel或者CAD的插件功能加载到对应的程序进程中），
            可以在不关闭对应的主程序的情况下，对插件dll进行调试，然后在主程序中重新调用调试更新后的插件功能。</remarks>
        </member>
        <member name="T:eZstd.Drawing.ColorUtils">
            <summary>
            对颜色进行处理
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ColorToValue(System.Drawing.Color)">
            <summary>
            将一个RGB颜色转换为对应的数值。
            颜色的数值与RGB参量的换算关系为：Color属性值=R + 256*G + 256^2*B
            </summary>
            <param name="c"></param>
            <returns>返回值为[0,16777215]之间的任意整数</returns>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ValueToColor(System.Double)">
            <summary>
            将一个[0,16777215]之间的数值转换为对应的RGB颜色。
            颜色的数值与RGB参量的换算关系为：Color属性值=R + 256*G + 256^2*B
            </summary>
            <param name="value">value的范围为[0,16777215]之间的任意数值</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ColorInterp(System.Double,System.Double,System.Double)">
            <summary>
            RGB 颜色插值
            </summary>
            <param name="c1">颜色1所对应的数值，其值为[0,16777215]之间的任意整数</param>
            <param name="c2">颜色2所对应的数值，其值为[0,16777215]之间的任意整数</param>
            <param name="x">x的值位于[0,1]的闭区间内，当其值为0时，它代表颜色c1，当其值为1时，它代表颜色c2</param>
            <returns>插值后的RGB颜色所对应的数值</returns>
            <remarks>颜色的数值与RGB参量的换算关系为：Color属性值=R + 256*G + 256^2*B</remarks>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ColorInterp(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            RGB 颜色插值
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="x">x的值位于[0,1]的闭区间内，当其值为0时，它代表颜色c1，当其值为1时，它代表颜色c2</param>
            <returns>插值后的RGB颜色</returns>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ClassicalExpand(System.Int32)">
            <summary> 根据经典的有限元插值色系作为基准来进行颜色的插值扩展 </summary>
            <param name="colorsCount">目标颜色集的个数</param>
            <returns>数组中元素的个数为colorsCount </returns>
        </member>
        <member name="M:eZstd.Drawing.ColorUtils.ColorExpand(System.Drawing.Color[],System.Int32)">
            <summary> 根据多个基准色平均插值出指定数量的渐变颜色集 </summary>
            <param name="baseColors">用来进行插值的基准色</param>
            <param name="colorsCount">目标颜色集的数量</param>
            <returns>数组中元素的个数为colorsCount</returns>
        </member>
        <member name="T:eZstd.Drawing.DrawShapesTest">
            <summary>
            与 GDI+ 绘图相关的测试
            </summary>
        </member>
        <member name="M:eZstd.Drawing.DrawShapesTest.MetafileCallback(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.IntPtr,System.Drawing.Imaging.PlayRecordCallback)">
            <summary>
            Provides a callback method for the EnumerateMetafile method.
            </summary>
            <param name="recordType">Member of the EmfPlusRecordType enumeration that specifies the type of metafile record.</param>
            <param name="flags">Set of flags that specify attributes of the record.</param>
            <param name="dataSize">Number of bytes in the record data.</param>
            <param name="data">Pointer to a buffer that contains the record data.</param>
            <param name="callbackData">Not used.</param>
            <returns></returns>
        </member>
        <member name="F:eZstd.Drawing.DrawShapesTest.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:eZstd.Drawing.DrawShapesTest.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:eZstd.Drawing.DrawShapesTest.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:eZstd.Drawing.TransformUtils.GetAxisTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            在单一轴上进行模型与屏幕之间的变换
            </summary>
            <param name="s1">屏幕上的端点1</param>
            <param name="s2">屏幕上的端点2</param>
            <param name="m1">s1 在模型中对应的端点1</param>
            <param name="m2">s2 在模型中对应的端点2</param>
            <param name="mp">模型中的任意一个点</param>
            <param name="sp">模型中的点 mp 在屏幕中对应的位置点</param>
            <param name="ratio">从模型到屏幕的缩放比例</param>
            <remarks>
            应用举例：
            // 转换坐标系：对 Y 方向进行变换
              float sp; float ratio;
              GetAxisTransform(
              s1: _daShaft.Top, s2: _daShaft.Top + _daShaft.Height,
              m1: elevations.Max, m2: elevations.Min,
              mp: 0f, sp: out sp, ratio: out ratio);
            
            // 将得到的结果应用到仿射矩阵中
              Matrix mY = new Matrix();
              mY.Translate(_daShaft.Left, sp);
              mY.Scale(1, ratio);
              gr.Transform = mY;  // 将变换应用到绘图面板中
            </remarks>
        </member>
        <member name="F:eZstd.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:eZstd.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:eZstd.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:eZstd.Miscellaneous.AssemblyCompiler">
            <summary> 动态编译程序集。在程序运行的过程中动态地编译出一个程序集 .dll 或者 .exe。 </summary>
        </member>
        <member name="F:eZstd.Miscellaneous.AssemblyCompiler.CodeUnit">
            <summary>
            源代码的架构
            </summary>
        </member>
        <member name="F:eZstd.Miscellaneous.AssemblyCompiler.ReferenceDlls">
            <summary>
            要引用的Dll的路径名称，比如"System.dll"
            </summary>
        </member>
        <member name="F:eZstd.Miscellaneous.AssemblyCompiler.AssemblyFullName">
            <summary>
            编译生成的Assembly的绝对路径
            </summary>
        </member>
        <member name="F:eZstd.Miscellaneous.AssemblyCompiler._compilerResults">
            <summary> 在执行了CompileAssembly方法后所得到的编译结果 </summary>
        </member>
        <member name="P:eZstd.Miscellaneous.AssemblyCompiler.CompilerResults">
            <summary> 在执行了CompileAssembly方法后所得到的编译结果 </summary>
        </member>
        <member name="M:eZstd.Miscellaneous.AssemblyCompiler.#ctor(System.CodeDom.CodeCompileUnit,System.String[])">
            <summary>
            编译出对应的 CompilerResults 对象，可以通过CompilerResults.CompiledAssembly属性来返回编译成功的Assembly对象。
            </summary>
            <param name="codeUnit">源代码的架构。 codeUnit 对象的创建可以参考<see cref="M:eZstd.Miscellaneous.AssemblyCompiler.CompileUnit"/>示例方法。</param>
            <param name="referenceDlls">要引用的Dll的路径名称，比如"System.dll"</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Miscellaneous.AssemblyCompiler.CompileAssembly(System.String)">
            <summary>
            编译出对应的 CompilerResults 对象，可以通过CompilerResults.CompiledAssembly属性来返回编译成功的Assembly对象。
            </summary>
            <param name="dllFileName">最后要编译成的程序集的路径，比如"MyAssembly.dll"或者"MyAssembly.exe"</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Miscellaneous.AssemblyCompiler.CompileUnit">
            <summary>
            示例代码：生成CodeDOM图，这一步是最复杂的部分，后面生成代码与编译都是以这里的东西为蓝本
            </summary>
            <returns> 创建好的 CodeCompileUnit 中，包含了要生成的程序集中的全部代码，
            后面只需要将通过 ICodeGenerator.GenerateCodeFromCompileUnit()方法即可以将这些代码编译为程序集。 </returns>
            <remarks>此函数仅为示例，并不在此类中执行。外部代码可以参数本函数来创建出对应的 CodeCompileUnit 源代码结构 </remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.AssemblyCompiler.DeleteAssembly">
            <summary> 删除编译生成的程序集文件 </summary>
        </member>
        <member name="T:eZstd.Miscellaneous.DebugUtils">
            <summary>
            提供一些基础性的操作工具
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.DebugUtils.ShowEnumerable(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            将集合中的每一个元素的ToString函数的结果组合到一个字符串中进行显示
            </summary>
            <param name="V"></param>
            <param name="title"></param>
            <param name="newLineHandling"> 如果元素之间是以换行分隔，则为True，否则是以逗号分隔。 </param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.DebugUtils.ShowEnumerableProperty(System.Collections.IEnumerable,System.String,System.String,System.Boolean)">
            <summary>
            将集合中的每一个元素的指定属性的ToString函数的结果组合到一个字符串中进行显示
            </summary>
            <param name="V"></param>
            <param name="PropertyName">要读取的属性的名称，注意，此属性不能带参数。</param>
            <param name="newLineHandling"> 如果元素之间是以换行分隔，则为True，否则是以逗号分隔。 </param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.DebugUtils.ShowEnumerableField(System.Collections.IEnumerable,System.String,System.String,System.Boolean)">
            <summary>
            将集合中的每一个元素的指定字段的ToString函数的结果组合到一个字符串中进行显示
            </summary>
            <param name="V"></param>
            <param name="FieldName">要读取的字段的名称。</param>
            <param name="newLineHandling"> 如果元素之间是以换行分隔，则为True，否则是以逗号分隔。 </param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.DebugUtils.ShowDebugCatch(System.Exception,System.String,System.String)">
            <summary>
            在调试阶段，为每一种报错显示对应的报错信息及出错位置。
            在软件发布前，应将此方法中的内容修改为常规的报错提醒。
            </summary>
            <param name="ex"> Catch 块中的 Exception 对象</param>
            <param name="message">报错信息提示</param>
            <param name="title"> 报错对话框的标题 </param>
        </member>
        <member name="M:eZstd.Miscellaneous.DebugUtils.GetDebugMessage(System.Exception,System.String)">
            <summary>
            在调试阶段，为每一种报错显示对应的报错信息及出错位置。
            </summary>
            <param name="ex"> Catch 块中的 Exception 对象</param>
            <param name="message">报错信息提示</param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Miscellaneous.Utils">
            <summary>
            提供一些基础性的操作工具
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Miscellaneous.Utils.GetNullableGenericArgurment(System.Type)">
            <summary>
            返回Nullable所对应的泛型。如果不是Nullable泛型，则返回null。
            </summary>
            <param name="typeIn"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.DateTimeHelper">
            <summary>
            与时间数据相关的操作，比如日期与字符、整数之间的相互转换等。
            </summary>
        </member>
        <member name="M:eZstd.DateTimeHelper.Time2Int(System.DateTime)">
            <summary> 将精确到分钟的时间数据保存为对应的32位整数 </summary>
            <param name="dt">精确度为分钟，更精细的数据将被忽略。
            由于32位数值的限制，能够识别的最大日期为4770年11月24日(23时59分)。即（2^20-1）所对应的日期。</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.DateTimeHelper.Int2Time(System.Int32)">
            <summary>
            将由 Time2Int 函数生成的整数值再转换回日期数据。返回的最大日期为4770年11月24日(23时59分) ，精度为分钟。
            </summary>
            <param name="intValue">输入的整数值并没有明显的物理含义，
            请确保这个值是通过<see cref="M:eZstd.DateTimeHelper.Time2Int(System.DateTime)"/>函数生成的。否则给出的结果不可预知，因为其中涉及到复杂的位运算操作。</param>
            <returns>返回的最大日期为4770年11月24日(23时59分) </returns>
        </member>
        <member name="M:eZstd.DateTimeHelper.String2Date(System.String)">
            <summary>
            将字符转换为日期。除了.NET能够识别的日期格式外，
            还增加了20160406（ 即 2016/04/06），以及 201604061330（即 2016/04/06 13:30）
            </summary>
            <param name="text">要转换为日期的字符。</param>
            <returns> 字符所对应的日期。如果不能转换为日期，则返回Null</returns>
        </member>
        <member name="M:eZstd.ExtensionMethods.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将某集合中的元素添加到另一个集合中去
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
        </member>
        <member name="M:eZstd.ExtensionMethods.Clone``1(``0)">
            <summary>
            Strong-typed object cloning for objects that implement <see cref="T:System.ICloneable"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.ExtensionMethods.IndexOf``2(``0,``1)">
            <summary>
            从集合中搜索指定项的下标位置（第一个元素的下标值为0），如果没有匹配项，则返回-1。
            </summary>
            <typeparam name="TCol"></typeparam>
            <param name="collection"> 匹配的数据源集合 </param>
            <typeparam name="TVal"></typeparam>
            <param name="value"> 要进行匹配的值 </param>
            <returns> 从集合中搜索指定项的下标位置（第一个元素的下标值为0），如果没有匹配项，则返回-1。 </returns>
        </member>
        <member name="T:eZstd.UserControls.eZDataGridViewUIAdd">
            <summary> 通过设计界面中的弹出菜单，来执行表格中记录行的插入、增加或删除等操作 </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewUIAdd.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewUIAdd.InsertRow(System.Object,System.EventArgs)">
            <summary>
            插入一行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewUIAdd.RemoveOneRow(System.Object,System.EventArgs)">
            <summary>
            移除一行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewUIAdd.RemoveMultipleRows(System.Object,System.EventArgs)">
            <summary>
            移除多行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.UserControls.NumberChanging">
            <summary>
            用户控件，用来增加或减少指定的时间跨度值。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.UserControls.NumberChanging.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="P:eZstd.UserControls.NumberChanging.ValueNumber">
            <summary> 控件中所对应的数值，即日期文本框上显示的用来进行日期值增减的跨度。
            正值表示增加时间跨度，负值表示送去时间跨度。 </summary>
        </member>
        <member name="P:eZstd.UserControls.NumberChanging.Unit">
            <summary> 时间跨度的单位 </summary>
        </member>
        <member name="P:eZstd.UserControls.NumberChanging.IntegerOnly">
            <summary> 是否只允许整数 </summary>
        </member>
        <member name="M:eZstd.UserControls.NumberChanging.AddTimeSpan(System.DateTime)">
            <summary> 根据当前控件中所对应的时间跨度来进行时间的增减 </summary>
        </member>
        <member name="M:eZstd.UserControls.NumberChanging.MinusTimeSpan(System.DateTime)">
            <summary> 根据当前控件中所对应的时间跨度来进行时间的增减 </summary>
        </member>
        <member name="M:eZstd.UserControls.NumberChanging.ModifyTimeSpan(System.DateTime,System.Boolean)">
            <summary> 根据当前控件中所对应的时间跨度来进行时间的增减 </summary>
            <param name="originTime"></param>
            <param name="add">如果为true，则增加时间跨度，如果为false，则减去时间跨度。</param>
            <returns></returns>
        </member>
        <member name="T:eZstd.UserControls.TextBoxNum">
            <summary> 自定义控件：只能输入数值的文本框。
            当文本框中的数值发生变化时，会触发 ValueNumberChanged 事件，可以通过此事件中的 double 类型的参数来获取最新的数值。
            </summary>
        </member>
        <member name="E:eZstd.UserControls.TextBoxNum.ValueNumberChanged">
            <summary> double 类型的参数即表示文本框中所代表的最新的数值。 </summary>
        </member>
        <member name="P:eZstd.UserControls.TextBoxNum.ValueNumber">
            <summary> 文本框中所对应的数值 </summary>
        </member>
        <member name="P:eZstd.UserControls.TextBoxNum.IntegerOnly">
            <summary> 文本框中是否只允许输入整数 </summary>
        </member>
        <member name="P:eZstd.UserControls.TextBoxNum.PositiveOnly">
            <summary> 文本框中是否只允许输入正值（包括0） </summary>
        </member>
        <member name="F:eZstd.UserControls.TextBoxNum._textPattern">
            <summary> 正则表达式的匹配模式 </summary>
        </member>
        <member name="M:eZstd.UserControls.TextBoxNum.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZstd.UserControls.TextBoxNum.ConstructRegexPattern">
            <summary> 根据是否只允许正数或者整数来设置对应的匹配选项 </summary>
        </member>
        <member name="T:eZstd.UserControls.TimeSpan2.TimeSpanUnit">
            <summary> 时间跨度的单位 </summary>
        </member>
        <member name="M:eZstd.UserControls.TimeSpan2.GetTimeFromTimeSpan(System.DateTime,System.Double,eZstd.UserControls.TimeSpan2.TimeSpanUnit)">
            <summary> 根据当前指定的时间跨度来对当前时间的增减 </summary>
            <param name="originTime">初始时间</param>
            <param name="spanValue">时间跨度的数值。正值表示增加时间跨度，负值表示送去时间跨度。</param>
            <param name="spanUnit">时间跨度的单位</param>
            <returns></returns>
        </member>
        <member name="T:eZstd.UserControls.eZDataGridView">
            <summary>
            自定义控件：DataGridView，向其中增加了：插入行、删除行、显示行号等功能.
            此控件不支持表格内容的复制粘贴，如果要用此功能，请用其派生类<see cref="T:eZstd.UserControls.eZDataGridViewPaste"/> 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:eZstd.UserControls.eZDataGridView.ShowRowNumber">
            <summary> 是否显示表格的行号 </summary>
        </member>
        <member name="P:eZstd.UserControls.eZDataGridView.KeyDelete">
            <summary> 是否响应键盘的 delete 键，以在按下此键时将选择的单元格的内容删除 </summary>
        </member>
        <member name="P:eZstd.UserControls.eZDataGridView.SupportPaste">
            <summary> 是否响应键盘的 Ctrl+ V 键，以在按下此组合键时将剪切板中的内容粘贴到表格中 </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.myDataGridView_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary> 键盘按键按下 </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.myDataGridView_RowsNumberChanged(System.Object,System.Object)">
            <summary>
            行数改变时的事件：显示行号
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.RowsResizable(System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <summary> 设置新添加的一行的Resizable属性为False </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.DeleteSelectedValue(System.Windows.Forms.KeyEventArgs)">
            <summary> 如果按下 Delete 键，则将选择的单元格的内容删除 </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.PasteFromClipBoard(System.Windows.Forms.KeyEventArgs)">
            <summary>
            如下按下Ctrl+V，则将表格中的数据粘贴到DataGridView控件中
            </summary>
            <remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
            DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。</remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridView.PasteFromTable(System.Int32,System.Int32)">
            <summary> 将表格中的数据粘贴到DataGridView控件中（通过先添加全部行，再为添加的行赋值的方式） </summary>
            <param name="startRow">粘贴的起始单元格的行位置</param>
            <param name="startCol">粘贴的起始单元格的列位置</param>
            <remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
            DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。总行数包括最后一行空数据行。</remarks>
        </member>
        <member name="T:eZstd.UserControls.eZDataGridViewPaste">
            <summary>
            支持复制粘贴功能的表格控件
            </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewPaste.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewPaste.PasteFromClipBoard(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            如下按下Ctrl+V，则将表格中的数据粘贴到DataGridView控件中
            </summary>
            <remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
            DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。</remarks>
        </member>
        <member name="M:eZstd.UserControls.eZDataGridViewPaste.PasteFromTable(System.Int32,System.Int32)">
            <summary> 将表格中的数据粘贴到DataGridView控件中（通过先添加全部行，再为添加的行赋值的方式） </summary>
            <param name="startRow">粘贴的起始单元格的行位置</param>
            <param name="startCol">粘贴的起始单元格的列位置</param>
            <remarks>DataGridView表格的索引：行号：表头为-1，第一行为0，列号：表示行编号的列为-1，第一个数据列的列号为0.
            DataGridView.Rows.Count与DataGridView.Columns.Count均只计算数据区域，而不包含表头与列头。总行数包括最后一行空数据行。</remarks>
        </member>
        <member name="T:eZstd.UserControls.ListControlValue`1">
            <summary>
            用来作为ListControl类的.Add方法中的Item参数的类。通过指定ListControl类的DisplayMember属性，来设置列表框中显示的文本。
            </summary>
            <remarks>
            保存数据时：
             With ListBoxWorksheetsName
                  .DisplayMember = LstbxDisplayAndItem.DisplayMember
                  .ValueMember = LstbxDisplayAndItem.ValueMember
                  .DataSource = arrSheetsName   '  Dim arrSheetsName(0 To sheetsCount - 1) As LstbxDisplayAndItem
             End With
            提取数据时：
             Try
                 Me.F_shtMonitorData = DirectCast(Me.ListBoxWorksheetsName.SelectedValue, Worksheet)
             Catch ex As Exception
                 Me.F_shtMonitorData = Nothing
             End Try
            或者是：
             Dim lst As LstbxDisplayAndItem = Me.ComboBoxOpenedWorkbook.SelectedItem
             Try
                Dim Wkbk As Workbook = DirectCast(lst.Value, Workbook)
             Catch ex ...
            </remarks>
            <typeparam name="Tval">Value属性所对应的类型</typeparam>
        </member>
        <member name="F:eZstd.UserControls.ListControlValue`1.DisplayMember">
            <summary>
            在列表框中进行显示的文本
            </summary>
            <remarks>此常数的值代表此类中代表要在列表框中显示的文本的属性名，即"DisplayedText"</remarks>
        </member>
        <member name="F:eZstd.UserControls.ListControlValue`1.ValueMember">
            <summary>
            列表框中每一项对应的值（任何类型的值）
            </summary>
            <remarks>此常数的值代表此类中代表列表框中的每一项绑定的数据的属性名，即"Value"</remarks>
        </member>
        <member name="M:eZstd.UserControls.ListControlValue`1.#ctor(System.String,`0)">
            <summary>
            构造函数
            </summary>
            <param name="DisplayedText">用来显示在列表的UI界面中的文本</param>
            <param name="Value">列表项对应的值</param>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.UserControls.ListControlValue`1.NothingInListBox">
            <summary>
            列表框中用来表示“什么也没有”。
            1、在声明时：listControl控件.Items.Add(New LstbxDisplayAndItem(" 无", NothingInListBox.None))
            2、在选择列表项时：listControl控件.SelectedValue = NothingInListBox.None
            3、在读取列表中的数据时，作出判断：If Not LstbxItem.Value.Equals(NothingInListBox.None) Then ...
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:eZstd.UserControls.ListControlValue`1.NothingInListBox.None">
            <summary>
            什么也没有选择
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:eZstd.Windows.HideMethodReturnedProc">
            <summary>
            用在 ShowDialogWin 或者 ShowDialogForm 类中。
            当 DialogForm 被隐藏并执行完与Revit交互的hideProc方法后被触发。此事件响应完会即会立即执行  System.Windows.Window.ShowDialog();
            </summary>
            <param name="returnedValue"> hideProc 方法执行完成后的返回值，如果 hideProc 方法没有返回值，则 returnedValue 为 null。</param>
        </member>
        <member name="T:eZstd.Windows.IShowDialogThread">
            <summary>
            对于ShowDialog打开的 WinForm 或 WPF window 进行隐藏，并在隐藏后执行相关的界面交互操作。
            </summary>
        </member>
        <member name="M:eZstd.Windows.IShowDialogThread.HideAndOperate(System.Delegate,eZstd.Windows.HideMethodReturnedProc,System.Object[])">
            <summary>
            一个伪异步方法，此方法会在执行Hide之后立即返回。
            </summary>
            <param name="hideProc"> 要与 Revit 进行交互的方法的委托。请在此方法中自行设置异常处理。
            此方法如果有返回值，则通过响应 reternProc 事件来获取返回值。 </param>
            <param name="reternProc"> 当 hideProc 执行完成并得到了返回值后接着执行reternProc方法，请在此方法中自行设置异常处理。
            执行完reternProc后，即会立即执行 Form.ShowDialog(); </param>
            <param name="hideProcArgs"> 方法 hideProc 中的输入参数，如果没有参数，则输入 null </param>
            <remarks>此方法后面不要再有任何的代码语句，如果要处理 hideProc 返回的结果，请在 reternProc 中进行操作。</remarks>
        </member>
        <member name="T:eZstd.Windows.ShowDialogForm">
            <summary>
            一个抽象类，用来对以Form.ShowDialog()方法开启的窗口进行操作。
            对于此类的派生类而言，可以通过 <see cref="M:eZstd.Windows.ShowDialogForm.HideAndOperate(System.Delegate,eZstd.Windows.HideMethodReturnedProc,System.Object[])"/> 方法来将窗口进行隐藏，
            并在隐藏的状态下进行一些常规隐藏窗口下不能进行的操作（比如与 Revit 进行 UI 上的 PickObject() 交互）。
            </summary>
            <remarks> ModelDialog 与 Revit 进行UI交互的原理：在Form打开时，不支持与Revit的UI交互，
            所以，此类通过 HideAndOperate 先将窗口进行隐藏，以跳出当前的ShowDialog的线程阻塞，
            跳出后的线程即返回到 Standard Revit API Context，此时便可以与Revit进行UI交互了。
            在 交互操作 _hideProc 执行完成并通过 _hideMethodReturnedProc 处理完其返回值后，再次通过 Form.ShowDialog() 将窗口显示出来。</remarks>
        </member>
        <member name="F:eZstd.Windows.ShowDialogForm._hideProc">
            <summary> 在窗口隐藏状态下与 Revit 进行交互 的方法 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogForm._hideProcArgs">
            <summary> _hideProc 方法的输入参数 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogForm.ReturnValue">
            <summary> _hideProc 方法的返回值 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogForm._hideMethodReturnedProc">
            <summary> 在 _hideProc 执行完成后对其返回值进行处理 </summary>
        </member>
        <member name="M:eZstd.Windows.ShowDialogForm.ShowDialog">
            <summary>
            以 可隐藏的方式显示窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Windows.ShowDialogForm.HideAndOperate(System.Delegate,eZstd.Windows.HideMethodReturnedProc,System.Object[])">
            <summary>
            一个伪异步方法，此方法会在执行Hide之后立即返回。
            </summary>
            <param name="hideProc"> 要与 Revit 进行交互的方法的委托。请在此方法中自行设置异常处理。
            此方法如果有返回值，则通过响应 reternProc 事件来获取返回值。 </param>
            <param name="reternProc"> 当 hideProc 执行完成并得到了返回值后接着执行reternProc方法，请在此方法中自行设置异常处理。
            执行完reternProc后，即会立即执行 Form.ShowDialog(); </param>
            <param name="hideProcArgs"> 方法 hideProc 中的输入参数，如果没有参数，则输入 null </param>
            <remarks>此方法后面不要再有任何的代码语句，如果要处理 hideProc 返回的结果，请在 reternProc 中进行操作。</remarks>
        </member>
        <member name="F:eZstd.Windows.ShowDialogFormTemplate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:eZstd.Windows.ShowDialogFormTemplate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:eZstd.Windows.ShowDialogFormTemplate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:eZstd.Windows.ShowDialogWin">
            <summary>
            一个抽象类，用来对以Window.ShowDialog()方法开启的窗口进行操作。
            对于此类的派生类而言，可以通过 <see cref="M:eZstd.Windows.ShowDialogWin.HideAndOperate(System.Delegate,eZstd.Windows.HideMethodReturnedProc,System.Object[])"/> 方法来将窗口进行隐藏，
            并在隐藏的状态下进行一些常规隐藏窗口下不能进行的操作（比如与 Revit 进行 UI 上的 PickObject() 交互）。
            </summary>
            <remarks> ModelDialog 与 Revit 进行UI交互的原理：在Form打开时，不支持与Revit的UI交互，
            所以，此类通过 HideAndOperate 先将窗口进行隐藏，以跳出当前的ShowDialog的线程阻塞，
            跳出后的线程即返回到 Standard Revit API Context，此时便可以与Revit进行UI交互了。
            在 交互操作 _hideProc 执行完成并通过 _hideMethodReturnedProc 处理完其返回值后，再次通过 Window.ShowDialog() 将窗口显示出来。</remarks>
        </member>
        <member name="F:eZstd.Windows.ShowDialogWin._hideProc">
            <summary> 在窗口隐藏状态下与 Revit 进行交互 的方法 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogWin._hideProcArgs">
            <summary> _hideProc 方法的输入参数 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogWin.ReturnValue">
            <summary> _hideProc 方法的返回值 </summary>
        </member>
        <member name="F:eZstd.Windows.ShowDialogWin._hideMethodReturnedProc">
            <summary> 在 _hideProc 执行完成后对其返回值进行处理 </summary>
        </member>
        <member name="M:eZstd.Windows.ShowDialogWin.ShowDialog">
            <summary>
            以 可隐藏的方式显示窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Windows.ShowDialogWin.HideAndOperate(System.Delegate,eZstd.Windows.HideMethodReturnedProc,System.Object[])">
            <summary>
            一个伪异步方法，此方法会在执行Hide之后立即返回。
            </summary>
            <param name="hideProc"> 要与 Revit 进行交互的方法的委托。请在此方法中自行设置异常处理。
            此方法如果有返回值，则通过响应 reternProc 事件来获取返回值。 </param>
            <param name="reternProc"> 当 hideProc 执行完成并得到了返回值后接着执行reternProc方法，请在此方法中自行设置异常处理。
            执行完reternProc后，即会立即执行 Window.ShowDialog(); </param>
            <param name="hideProcArgs"> 方法 hideProc 中的输入参数，如果没有参数，则输入 null </param>
            <remarks>此方法后面不要再有任何的代码语句，如果要处理 hideProc 返回的结果，请在 reternProc 中进行操作。</remarks>
        </member>
        <member name="T:eZstd.Windows.ShowDialogWinTemplate">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
        </member>
        <member name="M:eZstd.Windows.ShowDialogWinTemplate.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:eZstd.Windows.OwnerWindow">
            <summary> 将任意一个窗体作为Form的父窗口，并用在Form.Show(IWin32Window)中 </summary>
        </member>
        <member name="P:eZstd.Windows.OwnerWindow.Handle">
            <summary> 父窗口的句柄值 </summary>
        </member>
        <member name="M:eZstd.Windows.OwnerWindow.#ctor(System.IntPtr)">
            <summary> 构造函数 </summary>
            <param name="Handle">作为父窗体的窗口句柄值</param>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Windows.OwnerWindow.CreateFromProcessName(System.String)">
            <summary> 通过当前运行的进程名称来获得对应的主窗体 </summary>
            <param name="ProcessName">当前运行的进程名称，此名称可以通过“Windows任务管理器 -> 进程”进行查看。</param>
        </member>
        <member name="T:eZstd.Windows.WindowsUtil">
            <summary>
            与窗口操作相关的函数，以及鼠标、键盘的操作命令
            </summary>
        </member>
        <member name="M:eZstd.Windows.WindowsUtil.keybd_event(System.Byte,System.Byte,System.UInt32,System.UIntPtr)">
             <summary>
             向任意进程发送键盘消息
             </summary>
             <param name="bVk">按键的虚拟键值，如回车键为vk_return, tab键为vk_tab,可以参考常用模拟键的键值对照表，也可以通过System.Windows.Forms.Keys枚举来查看。</param>
             <param name="bScan">扫描码，一般不用设置，用0代替就行；</param>
             <param name="dwFlags">选项标志，如果为keydown则置0即可，如果为keyup则设成数值2，即常数 KEYEVENTF_KEYUP；</param>
             <param name="dwExtraInfo">一般也是置0即可。</param>
             <remarks>
              调用案例1：
             keybd_event(System.Windows.Forms.Keys.Escape, 0, 0, 0)  ' 按下 ESCAPE键
             keybd_event(System.Windows.Forms.Keys.NumLock, 0, KEYEVENTF_KEYUP, 0)  ' 按键弹起，其中 KEYEVENTF_KEYUP=2
              调用案例2：    模拟按下 'ALT+F4'键
             keybd_event(18, 0, 0, 0);
             keybd_event(115, 0, 0, 0);
             keybd_event(115, 0, KEYEVENTF_KEYUP, 0);
             keybd_event(18, 0, KEYEVENTF_KEYUP, 0);
            </remarks>
        </member>
        <member name="M:eZstd.Windows.WindowsUtil.mouse_event(eZstd.Windows.WindowsUtil.MouseOperation,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary> 发送鼠标消息 </summary>
            <param name="dwFlags"> (位编码)要如何操作鼠标。如果不指定 MOUSEEVENTF_ABSOLUTE，则是相对于当前的鼠标位置。 </param>
            <param name="dx">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置或相对位置 </param>
            <param name="dy">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置或相对位置 </param>
            <param name="dwData">没有使用，直接赋值为0 </param>
            <param name="dwExtraInfo">没有使用，直接赋值为0 </param>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_Move">
            <Summary> 移动鼠标 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_LeftDown">
            <Summary> 模拟鼠标左键按下 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_LeftUp">
            <Summary> 模拟鼠标左键抬起 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_RightDown">
            <Summary> 模拟鼠标右键按下 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_RightUp">
            <Summary> 模拟鼠标右键抬起 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_MiddleDown">
            <Summary> 模拟鼠标中键按下 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_MiddleUp">
            <Summary> 模拟鼠标中键抬起 </Summary>
        </member>
        <member name="F:eZstd.Windows.WindowsUtil.MouseOperation.MouseEventF_Absolute">
            <Summary> 标示是否采用绝对坐标 </Summary>
        </member>
        <member name="M:eZstd.Windows.WindowsUtil.ChooseOpenExcel(System.String)">
            <summary> 通过选择文件对话框选择要进行数据提取的Excel文件 </summary>
            <returns> 要进行数据提取的Excel文件的绝对路径 </returns>
        </member>
        <member name="M:eZstd.Windows.WindowsUtil.ChooseSaveExcel(System.String)">
            <summary> 通过选择文件对话框选择要进行数据写入的Excel文件 </summary>
            <returns> 要进行数据写入的Excel文件的绝对路径 </returns>
        </member>
        <member name="T:eZstd.Geometry.Line2D">
            <summary>
            二维直角坐标系中，无限长度的直线，它有两个基本属性：原点位置及方向矢量 
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Line2D.Origin">
            <summary> 二维直线所经过的某一个点 </summary>
        </member>
        <member name="F:eZstd.Geometry.Line2D.Direction">
            <summary> 二维直线的方向矢量，其矢量长度并无意义 </summary>
        </member>
        <member name="F:eZstd.Geometry.Line2D.k">
            <summary> 直线方程 y = kx + b 中的斜率参数k </summary>
        </member>
        <member name="F:eZstd.Geometry.Line2D.b">
            <summary> 直线方程 y = kx + b 中的截距参数b </summary>
        </member>
        <member name="F:eZstd.Geometry.Line2D.EndPoint">
            <summary>
            有限长度的射线的终点坐标
            </summary>
        </member>
        <member name="M:eZstd.Geometry.Line2D.#ctor(System.Byte)">
            <summary>
            创建一条位于空间直角坐标系的坐标轴上的单位长度直线
            </summary>
            <param name="axis">直线所在的坐标轴。其值可取1、2，分别代表x、y轴</param>
        </member>
        <member name="M:eZstd.Geometry.Line2D.#ctor(eZstd.Geometry.XY,eZstd.Geometry.XY)">
            <summary>
            构造函数
            </summary>
            <param name="origin">二维直线所经过的某一个点</param>
            <param name="direction">二维直线的方向矢量，其矢量长度并无意义</param>
        </member>
        <member name="M:eZstd.Geometry.Line2D.GetIntersectPointWith(eZstd.Geometry.Line2D)">
            <summary>
            二维平面内直线的交点，如果没有交点，则返回 null
            </summary>
            <returns>如果两直线平行或者近似平行，以至找不到交点，则返回 null </returns>
        </member>
        <member name="M:eZstd.Geometry.Line2D.GetIntersectPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            二维平面内直线 y = k1x + b1 与 y = k2x + b2 的交点
            </summary>
            <returns></returns>
        </member>
        <member name="T:eZstd.Geometry.Line3D">
            <summary>
            三维直角坐标系中，无限长度的直线，它有两个基本属性：原点位置及方向矢量
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Line3D.Origin">
            <summary>
            空间直线所经过的某一个点
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Line3D.Direction">
            <summary>
            空间直线的方向矢量，其矢量长度并无意义
            </summary>
        </member>
        <member name="M:eZstd.Geometry.Line3D.#ctor(System.Byte)">
            <summary>
            创建一条位于空间直角坐标系的坐标轴上的单位长度的直线
            </summary>
            <param name="axis">直线所在的坐标轴。其值可取1、2、3，分别代表x、y、z轴</param>
        </member>
        <member name="M:eZstd.Geometry.Line3D.#ctor(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>
            通过节点与方向来构造直线
            </summary>
            <param name="origin">空间直线所经过的某一个点</param>
            <param name="direction">空间直线的方向矢量，其矢量长度并无意义</param>
        </member>
        <member name="M:eZstd.Geometry.Line3D.GetIntersectPointWith(eZstd.Geometry.Line3D)">
            <summary>
            三维空间中两直线的交点，如果没有交点，则返回 null
            </summary>
            <returns>如果这两条射线所对应的空间直线能够相交，则返回其交点，如果不能相交，则返回 null。</returns>
            <remarks>
            空间三维直线的参数方程为：
               x=x0 + m*t; 
               y=y0 + n*t;
               z=z0 + p*t; 
            其中{x0,y0,z0} 为直线中的某个点，{m,n,p}为直线的方向向量。</remarks>
        </member>
        <member name="M:eZstd.Geometry.Line3D.GetIntersectPoint(eZstd.Geometry.Line3D,eZstd.Geometry.Line3D)">
            <summary>
            三维空间中两直线的交点
            </summary>
            <returns>如果这两条射线所对应的空间直线能够相交，则返回其交点，如果不能相交，则返回 null。</returns>
            <remarks>
            空间三维直线的参数方程为：
               x=x0 + m*t; 
               y=y0 + n*t;
               z=z0 + p*t; 
            其中{x0,y0,z0} 为直线中的某个点，{m,n,p}为直线的方向向量。</remarks>
        </member>
        <member name="M:eZstd.Geometry.Line3D.IsCoplanarWith(eZstd.Geometry.Line3D)">
            <summary> 两条直线是否在同一个三维平面上 </summary>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Geometry.Plane4">
            <summary>
            由空间共面的四个点所形成的平面
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Plane4._initialNodes">
            <summary>
            最初始的四个点，此四个点在后面的操作中可能会经历重排、缩放、旋转等操作，这些操作会体现在 Nodes 属性中，但是 _initialNodes 中的值是不会变化的。
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Plane4.Nodes">
            <summary>
            构成平面的四个点。此数组中共有四个元素
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Plane4.IsCycle">
            <summary> Nodes 数组中的四个点是否可以按顺序排成一个边界环路。如果其值为null，表示还未检测过。 </summary>
        </member>
        <member name="M:eZstd.Geometry.Plane4.#ctor">
            <summary> 默认三角形：XY平面中的第一象限的正方形（边长为1，从原点开始逆时针旋转一圈） </summary>
        </member>
        <member name="M:eZstd.Geometry.Plane4.#ctor(eZstd.Geometry.XYZ[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:eZstd.Geometry.Plane4.#ctor(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>
            
            </summary>
        </member>
        <member name="M:eZstd.Geometry.Plane4.Reset">
            <summary> 将集合中的四个点还原为最初始的状态 </summary>
        </member>
        <member name="M:eZstd.Geometry.Plane4.CheckCycle">
            <summary>
            检查代表平面的集合中的四个点是否能依次连成一个边界环路
            </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Plane4.ArrangeCycle">
            <summary>
            将代表平面的集合中的四个点进行重新排列，以使其可以依次连成一个边界环路
            </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Plane4.FindCentroid">
            <summary>
            寻找空间四个点所形成的共面的空间四边形角形的形心，如果四个点不共面，则会报错。
            在计算形心之前，必须确保此平面四边形的节点集合可以依次形成一个边界环路，即其<see cref="F:eZstd.Geometry.Plane4.IsCycle"/>要为true。
            </summary>
            <returns> 四边形的形心点的坐标 </returns>
            <remarks>在hypermesh导出的 inp文件中，输入的四个节点的顺序一定是可以形成一个边界环路的，即使此S4单元的网格形状为有凹角的异型错误网格。</remarks>
        </member>
        <member name="T:eZstd.Geometry.Ray2D">
            <summary>
            二维直角坐标系中，有限长度或无限长度的射线指向器，它有两个基本属性：原点位置，以及指定的方向矢量
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray2D.Origin">
            <summary>
            射线的起始原点
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray2D.Direction">
            <summary>
            射线的方向矢量。矢量的模代表射线的长度
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray2D.EndPoint">
            <summary>
            有限长度的射线的终点坐标
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray2D.InfiniteLength">
            <summary>
            如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的。 
            对于有限长度的射线，其长度由属性 Direction 矢量来确定。
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray2D.Line">
            <summary> 此射线所对应的无限长的直线 </summary>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.#ctor(System.Byte,System.Boolean)">
            <summary>
            创建一条位于空间直角坐标系的坐标轴上的单位长度的射线
            </summary>
            <param name="axis">射线所在的坐标轴。其值可取1、2，分别代表x、y轴</param>
            <param name="infiniteLength">如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的，而且长度为1。</param>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.#ctor(eZstd.Geometry.XY,eZstd.Geometry.XY)">
            <summary>
            创建一条从起点指向终点的有限长的射线
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.#ctor(eZstd.Geometry.XY,eZstd.Geometry.XY,System.Boolean)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="direction"></param>
            <param name="infiniteLength">如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的。
            对于有限长度的射线，其长度由 direction 矢量来确定。</param>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.IntersectWith(eZstd.Geometry.Ray2D)">
            <summary>
            两个指向器在平面上是否能够相交，如果能，则返回其交点坐标；如果两射线平行，则不能相交，此时返回 null
            </summary>
            <param name="ray2">用来判断相交的另一条射线</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.Contains(eZstd.Geometry.XY)">
            <summary>
            无限长或者有限长的射线所代表的二维矩形方框是否能够框住指定的点
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Ray2D.InfiniteRayContains(eZstd.Geometry.XY)">
            <summary>
            无限长射线所代表的二维矩形方框是否能够框住指定的点
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Geometry.Ray3D">
            <summary>
            三维直角坐标系中，有限长度或无限长度的射线指向器，它有两个基本属性：原点位置，以及指定的方向矢量
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray3D.Origin">
            <summary>
            射线的起始原点
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray3D.Direction">
            <summary>
            射线的方向矢量。矢量的模代表射线的长度
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray3D.EndPoint">
            <summary>
            有限长度的射线的终点坐标
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray3D.InfiniteLength">
            <summary>
            如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的。 
            对于有限长度的射线，其长度由属性 Direction 矢量来确定。
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Ray3D.Line">
            <summary> 此射线所对应的无限长的直线 </summary>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.#ctor(System.Byte,System.Boolean)">
            <summary>
            创建一条位于空间直角坐标系的坐标轴上的单位长度的射线
            </summary>
            <param name="axis">射线所在的坐标轴。其值可取1、2、3，分别代表x、y、z轴</param>
            <param name="infiniteLength">如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的，而且长度为1。</param>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.#ctor(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>
            一条从起点指向终点的有限长射线
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.#ctor(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="origin"></param>
            <param name="direction"></param>
            <param name="infiniteLength">如果为true，则此射线为无限长的，如果为false，则此射线是有限长度的。
            对于有限长度的射线，其长度由 direction 矢量来确定。</param>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.IsCoplanarWith(eZstd.Geometry.Ray3D)">
            <summary> 两条射线是否在同一个三维平面上 </summary>
            <param name="ray2"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.IntersectWith(eZstd.Geometry.Ray3D)">
            <summary>
            两个指向器在平面上是否能够相交，如果能，则返回其交点坐标；如果两射线平行，则不能相交，此时返回 null
            </summary>
            <param name="ray2">用来判断相交的另一条射线</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.Contains(eZstd.Geometry.XYZ)">
            <summary>
            无限长或者有限长的射线所代表的三维矩形方框是否能够框住指定的点
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Ray3D.InfiniteRayContains(eZstd.Geometry.XYZ)">
            <summary>
            无限长射线所代表的三维矩形方框是否能够框住指定的点
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:eZstd.Geometry.Triangle">
            <summary> 空间中三个点形成的平面三角形 </summary>
        </member>
        <member name="F:eZstd.Geometry.Triangle._initialNodes">
            <summary>
            最初始的三个点，此四个点在后面的操作中可能会经历重排、缩放、旋转等操作，这些操作会体现在 Nodes 属性中，但是 _initialNodes 中的值是不会变化的。
            </summary>
        </member>
        <member name="F:eZstd.Geometry.Triangle.Nodes">
            <summary>
            构成平面的四个点。此数组中共有四个元素
            </summary>
        </member>
        <member name="M:eZstd.Geometry.Triangle.#ctor">
            <summary> 默认三角形：XY平面中的第一象限的直角三角形（两直角边长为1） </summary>
        </member>
        <member name="M:eZstd.Geometry.Triangle.#ctor(eZstd.Geometry.XYZ[])">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZstd.Geometry.Triangle.#ctor(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZstd.Geometry.Triangle.Reset">
            <summary> 将集合中的四个点还原为最初始的状态 </summary>
        </member>
        <member name="M:eZstd.Geometry.Triangle.FindCentroid">
            <summary> 寻找三个点所形成的空间三角形的形心 </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Triangle.FindCentroid(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>
            寻找三个点所形成的空间三角形的形心
            </summary>
            <param name="node1"></param>
            <param name="node2"></param>
            <param name="node3"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Triangle.get_Area">
            <summary> 计算空间三角形的面积  </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.Triangle.Area(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary> 计算空间三角形的面积  </summary>
            <returns></returns>
        </member>
        <member name="T:eZstd.Geometry.XY">
            <summary>
            二维平面坐标系中的空间点或空间方向矢量
            </summary>
        </member>
        <member name="F:eZstd.Geometry.XY.AngleTolerance">
            <summary>
            角度容差，单位为弧度。当两个向量之间的夹角小于此常数时，认为此两个向量方向相同。
            此常数的值可以借鉴 Revit 2016（X64）中的容差值，即 0.00174532925199433 (rad)。
            </summary>
        </member>
        <member name="F:eZstd.Geometry.XY.VertexTolerance">
            <summary>
            距离容差，具体单位视整个模型的全局单位而定。在此距离之内的两个点会被认为是重合的。
            此常数的值可以借鉴 Revit 2016（X64）中的容差值，即  0.0005233832795 inch = 0.01329394 mm。
            </summary>
        </member>
        <member name="M:eZstd.Geometry.XY.#ctor">
            <summary> 默认点 (0, 0) </summary>
        </member>
        <member name="M:eZstd.Geometry.XY.Distance(eZstd.Geometry.XY,eZstd.Geometry.XY)">
            <summary> 计算空间两个点的距离 </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XY.DistanceTo(eZstd.Geometry.XY)">
            <summary> 计算空间两个点的距离 </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XY.IsAlmostEqualTo(eZstd.Geometry.XY)">
            <summary>
            比较两个点是否重合（容差为整个系统的容差 AngleTolerance）
            </summary>
            <param name="point2"></param>
        </member>
        <member name="M:eZstd.Geometry.XY.IsAlmostEqualTo(eZstd.Geometry.XY,System.Double)">
            <summary>
            比较两个点是否重合
            </summary>
            <param name="point2"></param>
            <param name="tolerance"> 用户指定的距离容差 </param>
        </member>
        <member name="M:eZstd.Geometry.XY.Reverse">
            <summary> 将空间矢量反向，保持其长度不变 </summary>
        </member>
        <member name="M:eZstd.Geometry.XY.Normalize">
            <summary>
            将空间矢量进行归一化，使其长度变为 1 。
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Geometry.XY.SetLength(System.Double)">
            <summary>
            将一个空间矢量缩放到指定的长度（方向不变）
            </summary>
            <param name="newLength">缩放后的长度</param>
            <returns> 缩放后的新矢量 </returns>
        </member>
        <member name="M:eZstd.Geometry.XY.IsCollinearWith(eZstd.Geometry.XY)">
            <summary> 两个方向矢量是否共线（方向相同或者相反）。容差为整个系统的容差 AngleTolerance。</summary>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XY.IsCollinearWith(eZstd.Geometry.XY,System.Double)">
            <summary> 两个方向矢量是否共线（方向相同或者相反）。。容差为用户指定的角度容差。 </summary>
            <param name="v2"></param>
            <param name="tolerance">用户指定的角度容差</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XY.op_Addition(eZstd.Geometry.XY,eZstd.Geometry.XY)">
            <summary>  执行向量运算 V = V1 + V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XY.op_Subtraction(eZstd.Geometry.XY,eZstd.Geometry.XY)">
            <summary>  执行向量运算 V = V1 - V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XY.op_Multiply(eZstd.Geometry.XY,System.Double)">
            <summary>  将向量 V1 中的分量均乘以 s </summary>
        </member>
        <member name="T:eZstd.Geometry.XYZ">
            <summary>
            一个空间的坐标点或者空间的矢量
            </summary>
        </member>
        <member name="F:eZstd.Geometry.XYZ.AngleTolerance">
            <summary>
            角度容差，单位为弧度。当两个向量之间的夹角小于此常数时，认为此两个向量方向相同。
            </summary>
            <remarks>此常数的值借鉴于 Revit 2016（X64）中的容差值。</remarks>
        </member>
        <member name="F:eZstd.Geometry.XYZ.VertexTolerance">
            <summary>
            距离容差，具体单位视整个模型的全局单位而定。在此距离之内的两个点会被认为是重合的。
            此常数的值可以借鉴 Revit 2016（X64）中的容差值，即  0.0005233832795 inch = 0.01329394 mm。
            </summary>
            <remarks> </remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.#ctor">
            <summary> 默认点 (0, 0, 0) </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Distance(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary> 计算空间两个点的距离 </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.DistanceTo(eZstd.Geometry.XYZ)">
            <summary> 计算空间两个点的距离 </summary>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Move(eZstd.Geometry.XYZ)">
            <summary> 一个空间点沿空间的位移矢量移动后的新位置 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Move(eZstd.Geometry.XYZ,System.Double)">
            <summary>
            在三维空间中，将一个点 point 沿指定的方向 direction 延伸指定的距离 length
            </summary>
            <param name="direction"></param>
            <param name="length"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.VectorTo(eZstd.Geometry.XYZ)">
            <summary> 从本坐标点指向输入的 node2 的位移矢量 </summary>
            <param name="point2"> 矢量的终点 </param>
            <returns> 一个空间矢量，起始点为 node1，终点为 node2 </returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.IsAlmostEqualTo(eZstd.Geometry.XYZ)">
            <summary>
            比较两个点是否重合（容差为整个系统的容差 AngleTolerance）
            </summary>
            <param name="point2"></param>
        </member>
        <member name="M:eZstd.Geometry.XYZ.IsAlmostEqualTo(eZstd.Geometry.XYZ,System.Double)">
            <summary>
            比较两个点是否重合
            </summary>
            <param name="point2"></param>
            <param name="tolerance"> 用户指定的距离容差 </param>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Reverse">
            <summary> 将空间矢量反向，保持其长度不变 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Normalize">
            <summary>
            将空间矢量进行归一化，使其长度变为 1 。
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.SetLength(System.Double)">
            <summary>
            将一个空间矢量缩放到指定的长度（方向不变）
            </summary>
            <param name="newLength">缩放后的长度</param>
            <returns> 缩放后的新矢量 </returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.GetLength">
            <summary> 空间矢量的长度 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.DotProduct(eZstd.Geometry.XYZ)">
            <summary>
            向量的点乘（内积）：D = V1 . V2
            </summary>
            <param name="vector2"></param>
            <returns></returns>
            <remarks>此标量值的几何意义为向量a在向量b上的投影长度a'与向量b的长度的乘积</remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.CrossProduct(eZstd.Geometry.XYZ)">
            <summary>
            向量的叉乘（外积）：V = V1 X V2
            </summary>
            <param name="vector2"></param>
            <returns></returns>
            <remarks> 两个向量的外积矢量V，其模（长度）是由这两个向量所形成的平行四边形的面积；
            其方向为以V1、V2 分别作为X轴、Y轴，在进行右手法则后所得到的Z轴的方向。 </remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.AngleTo(eZstd.Geometry.XYZ)">
            <summary>
            计算两个空间向量之间的夹角，单位为弧度，范围为[0,pi]
            </summary>
            <param name="v2"></param>
            <returns></returns>
            <remarks>如果要考查大于180度的向量夹角，则要进行附加的判断。</remarks>
        </member>
        <member name="M:eZstd.Geometry.XYZ.IsCollinearWith(eZstd.Geometry.XYZ)">
            <summary> 两个方向矢量是否共线（方向相同或者相反）。容差为整个系统的容差 AngleTolerance。</summary>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.IsCollinearWith(eZstd.Geometry.XYZ,System.Double)">
            <summary> 两个方向矢量是否共线（方向相同或者相反）。。容差为用户指定的角度容差。 </summary>
            <param name="v2"></param>
            <param name="tolerance">用户指定的角度容差</param>
            <returns></returns>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Add(eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 + V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Substract(eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 - V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Add(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 + V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.Substract(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 - V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.op_Addition(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 + V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.op_Subtraction(eZstd.Geometry.XYZ,eZstd.Geometry.XYZ)">
            <summary>  执行向量运算 V = V1 - V2 </summary>
        </member>
        <member name="M:eZstd.Geometry.XYZ.op_Multiply(eZstd.Geometry.XYZ,System.Double)">
            <summary>  将向量 V1 中的分量均乘以 s </summary>
        </member>
        <member name="T:eZstd.MatrixPack.CholeskyDecomposition">
            <summary>
            	Cholesky Decomposition of a symmetric, positive definite matrix. 
            即对称正定矩阵的 Cholesky 分解，以及求解线性方程组的平方根法。
            </summary>
            <remarks>
            	For a symmetric, positive definite matrix <c>A</c>, the Cholesky decomposition is a
            	lower triangular matrix <c>L</c> so that <c>A = L * L'</c>. 其中 L'是L的共轭转置矩阵。
               只要A满足以上两个条件，L是唯一确定的，而且L的对角元素肯定是正数。
            	If the matrix is not symmetric or positive definite, the constructor returns a partial 
            	decomposition and sets two internal variables that can be queried using the
            	<see cref="P:eZstd.MatrixPack.CholeskyDecomposition.IsSymmetric"/> and <see cref="P:eZstd.MatrixPack.CholeskyDecomposition.IsPositiveDefinite"/> properties.
            </remarks>
        </member>
        <member name="M:eZstd.MatrixPack.CholeskyDecomposition.#ctor(eZstd.MatrixPack.Matrix)">
            <summary>Construct a Cholesky Decomposition.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.CholeskyDecomposition.IsSymmetric">
            <summary>Returns <see langword="true"/> if the matrix is symmetric.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.CholeskyDecomposition.IsPositiveDefinite">
            <summary>Returns <see langword="true"/> if the matrix is positive definite（正定矩阵）.
            若 n*n 实对称矩阵A对任意非零n维实向量x恒有xt*A*x > 0 f（其中xt为向量x的转置向量），则称A为正定矩阵。</summary>
        </member>
        <member name="P:eZstd.MatrixPack.CholeskyDecomposition.LeftTriangularFactor">
            <summary>Returns the left triangular factor <c>L</c> so that <c>A = L * L'</c>.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.CholeskyDecomposition.Solve(eZstd.MatrixPack.Matrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="rhs">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * L' * X = B</c>.</returns>
            <remarks>
                基于正定矩阵的 Cholesky 分解来求解 A*x=b的方法称为平方根法。
                可以验证，正定矩阵的Cholesky的分解的乘除法总计算量约为n^3/6（由于对称性，计算量约为LU分解的一半）。
                Cholesky 分解的优点之一是不必选主元，此外，Cholesky 方法还有一个突出的优点，即数值稳定性，在乘除的过程中，Ljk的数量级不会增长。
                进一步地可以参考“改进的平方根法”，其计算量与平方根法一样，但是没有开方运算。
            </remarks>
            <exception cref="T:System.ArgumentException">Matrix dimensions do not match.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is not symmetrix and positive definite.</exception>
        </member>
        <member name="T:eZstd.MatrixPack.EigenvalueDecomposition">
            <summary>
            	Determines the eigenvalues(特征值) and eigenvectors(特征向量) of a real square matrix.
            </summary>
            <remarks>
            	If <c>A</c> is symmetric, then <c>A = V * D * V'</c> and <c>A = V * V'</c>
            	where the eigenvalue matrix <c>D</c> is diagonal and the eigenvector matrix <c>V</c> is orthogonal.
            	If <c>A</c> is not symmetric, the eigenvalue matrix <c>D</c> is block diagonal
            	with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            	<c>lambda+i*mu</c>, in 2-by-2 blocks, <c>[lambda, mu; -mu, lambda]</c>.
            	The columns of <c>V</c> represent the eigenvectors in the sense that <c>A * V = V * D</c>.
            	The matrix V may be badly conditioned, or even singular, so the validity of the equation
            	<c>A=V*D*inverse(V)</c> depends upon the condition of <c>V</c>.
            </remarks>
        </member>
        <member name="M:eZstd.MatrixPack.EigenvalueDecomposition.#ctor(eZstd.MatrixPack.Matrix)">
            <summary>Construct an eigenvalue decomposition.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.EigenvalueDecomposition.RealEigenvalues">
            <summary>Returns the real parts of the eigenvalues.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.EigenvalueDecomposition.ImaginaryEigenvalues">
            <summary>Returns the imaginary parts of the eigenvalues.</summary>	
        </member>
        <member name="P:eZstd.MatrixPack.EigenvalueDecomposition.EigenvectorMatrix">
            <summary>Returns the eigenvector matrix.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.EigenvalueDecomposition.DiagonalMatrix">
            <summary>Returns the block diagonal eigenvalue matrix.</summary>
        </member>
        <member name="T:eZstd.MatrixPack.LuDecomposition">
            <summary>
              LU decomposition of a rectangular matrix（不限定为方阵）.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with m >= n, the LU decomposition is an m-by-n
              unit lower triangular matrix <c>L</c>, an n-by-n upper triangular matrix <c>U</c>,
              and a permutation vector <c>piv</c> of length m so that <c>A(piv)=L*U</c>.
              If m &lt; n, then <c>L</c> is m-by-m and <c>U</c> is m-by-n.
              The LU decompostion with pivoting always exists, even if the matrix is
              singular, so the constructor will never fail.  The primary use of the
              LU decomposition is in the solution of square systems of simultaneous
              linear equations. This will fail if <see cref="P:eZstd.MatrixPack.LuDecomposition.IsNonSingular"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:eZstd.MatrixPack.LuDecomposition.pivotVector">
            <summary>
            矩阵的主元所在矩阵中所对应的下标，一般指主对角线上的元素,左上角到右下角。如果不是方阵就是左上角到最下一行,
            </summary>
        </member>
        <member name="M:eZstd.MatrixPack.LuDecomposition.#ctor(eZstd.MatrixPack.Matrix)">
            <summary>Construct a LU decomposition.</summary>	
        </member>
        <member name="P:eZstd.MatrixPack.LuDecomposition.IsNonSingular">
            <summary>Returns if the matrix is non-singular（非奇异的）.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.LuDecomposition.Determinant">
            <summary>Returns the determinant（行列式，方阵才有行列式） of the matrix.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.LuDecomposition.LowerTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.LuDecomposition.UpperTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.LuDecomposition.PivotPermutationVector">
            <summary>Returns the pivot permuation vector.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.LuDecomposition.Solve(eZstd.MatrixPack.Matrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.
            比如求解最简单的线性方程组 A * x = b . </summary>
            <param name="B">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * U * X = B</c>.</returns>
        </member>
        <member name="T:eZstd.MatrixPack.Matrix">
            <summary>Matrix provides the fundamental operations of numerical linear algebra. 
            Matrix 类代表了任意形态（比如一维向量、方阵等）的 m*n 二维矩阵。</summary>
            <remarks> Matrix 代表了任意形态（比如一维向量、方阵等）的 m*n 二维矩阵。</remarks>
        </member>
        <member name="F:eZstd.MatrixPack.Matrix.data">
            <summary> 二维嵌套数组，第一个下标代表行号，第二个下标代表列号。 </summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Constructs an empty matrix of the given size.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Constructs a matrix of the given size and assigns a given value to all diagonal elements.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="value">Value to assign to the diagnoal elements.</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.#ctor(System.Double[][])">
            <summary>Constructs a matrix from the given array.</summary>
            <param name="data">The array the matrix gets constructed from.</param>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Array">
            <summary> 二维嵌套数组，第一个下标代表行号，第二个下标代表列号。 </summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Rows">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Columns">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.IsSquare">
            <summary>Return <see langword="true"/> if the matrix is a square matrix.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.IsSymmetric">
            <summary>Returns <see langword="true"/> if the matrix is symmetric.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Item(System.Int32,System.Int32)">
            <summary>Access the value at the given location.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Submatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Start row index</param>
            <param name="i1">End row index</param>
            <param name="j0">Start column index</param>
            <param name="j1">End column index</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Submatrix(System.Int32[],System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="r">Array of row indices</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Submatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Starttial row index</param>
            <param name="i1">End row index</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Submatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="rowIndices">要从父矩阵中提取出来的行号。Array of row indices</param>
            <param name="startColumn">Start column index</param>
            <param name="endColumn">End column index</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.GetColumn(System.Int32)">
            <summary> 提取矩阵中的某一列的数据 </summary>
            <param name="column">要提取的列的列号</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.GetRow(System.Int32)">
            <summary> 提取矩阵中的某一行的数据 </summary>
            <param name="row">要提取的行的行号</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.GetVector(System.Int32[],System.Int32)">
            <summary> 提取矩阵中的某一列中指定行的数据 </summary>
            <param name="rowIndices">要提取行的行号集合</param>
            <param name="column">要提取的列的列号</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.GetVector(System.Int32,System.Int32[])">
            <summary> 提取矩阵中的某一行中指定列的数据 </summary>
            <param name="columnIndices">要提取列的列号集合</param>
            <param name="row">要提取的行的行号</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Clone">
            <summary>Creates a copy of the matrix.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Transpose">
            <summary>Returns the transposed matrix.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Norm1">
            <summary>Returns the One Norm for the matrix.</summary>
            <value>The maximum column sum.</value>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.InfinityNorm">
            <summary>Returns the Infinity Norm for the matrix.</summary>
            <value>The maximum row sum.</value>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.FrobeniusNorm">
            <summary>Returns the Frobenius Norm for the matrix.</summary>
            <value>The square root of sum of squares of all elements.</value>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.op_UnaryNegation(eZstd.MatrixPack.Matrix)">
            <summary>Unary minus.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.op_Addition(eZstd.MatrixPack.Matrix,eZstd.MatrixPack.Matrix)">
            <summary>Matrix addition.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.op_Subtraction(eZstd.MatrixPack.Matrix,eZstd.MatrixPack.Matrix)">
            <summary>Matrix subtraction.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.op_Multiply(eZstd.MatrixPack.Matrix,System.Double)">
            <summary>Matrix-scalar multiplication.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.op_Multiply(eZstd.MatrixPack.Matrix,eZstd.MatrixPack.Matrix)">
            <summary>Matrix-matrix multiplication.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Solve(eZstd.MatrixPack.Matrix)">
            <summary> 对矩阵方程 A * X = B 进行求解。</summary>
            <param name="rhs">right hand side of the equation A * X = B .线性方程 A * X = B ，的右手边的参数，即 B </param>
            <returns> 如果矩阵A为方阵，则返回LU分解的求解结果，如果不是方阵，则返回QR分解的最小二乘解。
            Returns the LHS (left hand side) solution vetor if the matrix is square or the least squares solution otherwise.</returns>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Inverse">
            <summary>Inverse of the matrix if matrix is square, pseudoinverse otherwise.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Determinant">
            <summary>Determinant if matrix is square. 方阵的行列式 </summary>
        </member>
        <member name="P:eZstd.MatrixPack.Matrix.Trace">
            <summary>Returns the trace of the matrix.</summary>
            <returns>Sum of the diagonal elements.</returns>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Random(System.Int32,System.Int32)">
            <summary>Returns a matrix filled with random values.</summary>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.Diagonal(System.Int32,System.Int32,System.Double)">
            <summary>Returns a diagonal matrix（对角矩阵：只有i=j的位置的元素值才不为0） of the given size.</summary>
            <param name="value">对角位置的元素的值。</param>
        </member>
        <member name="M:eZstd.MatrixPack.Matrix.ToString">
            <summary>Returns the matrix in a textual form.</summary>
        </member>
        <member name="T:eZstd.MatrixPack.QrDecomposition">
            <summary>
              QR decomposition for a rectangular matrix.
              若n阶实非奇异矩阵A可以分解为正交矩阵Q与实非奇异上三角矩阵R的乘积,即A=QR,则称该分解式为矩阵A的QR分解;
              进而A是m×n列满秩矩阵,若A=QR, 其中Q是m×n矩阵,QT*Q=E(称Q为列正交矩阵),R为非奇异上三角矩阵,也称为矩阵A的QR分解.
            </summary>
            <remarks>
              QR分解法是目前求一般矩阵全部特征值的最有效并广泛应用的方法，一般矩阵先经过正交相似变化成为Hessenberg矩阵，然后再应用QR方法求特征值和特征向量。
              For an m-by-n matrix <c>A</c> with <c>m &gt;= n</c>, the QR decomposition is an m-by-n
              orthogonal matrix <c>Q</c> and an n-by-n upper triangular 
              matrix <c>R</c> so that <c>A = Q * R</c>.
              The QR decompostion always exists, even if the matrix does not have
              full rank, so the constructor will never fail.  The primary use of the
              QR decomposition is in the least squares solution of nonsquare systems
              of simultaneous（联立的） linear equations.
              This will fail if <see cref="P:eZstd.MatrixPack.QrDecomposition.IsFullRank"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:eZstd.MatrixPack.QrDecomposition.#ctor(eZstd.MatrixPack.Matrix)">
            <summary>Construct a QR decomposition.</summary>	
        </member>
        <member name="M:eZstd.MatrixPack.QrDecomposition.Solve(eZstd.MatrixPack.Matrix)">
            <summary>矩阵方程AX=B的最小二乘解。
            Least squares solution of <c>A * X = B</c></summary>
            <param name="rhs">Right-hand-side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>A matrix that minimized the two norm of <c>Q * R * X - B</c>.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must be the same.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is rank deficient.</exception>
        </member>
        <member name="P:eZstd.MatrixPack.QrDecomposition.IsFullRank">
            <summary>Shows if the matrix <c>A</c> is of full rank.</summary>
            <value>The value is <see langword="true"/> if <c>R</c>, and hence <c>A</c>, has full rank.</value>
        </member>
        <member name="P:eZstd.MatrixPack.QrDecomposition.UpperTriangularFactor">
            <summary>Returns the upper triangular factor <c>R</c>.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.QrDecomposition.OrthogonalFactor">
            <summary>Returns the orthogonal factor <c>Q</c>.</summary>
        </member>
        <member name="T:eZstd.MatrixPack.SingularValueDecomposition">
            <summary>
            	Singular Value Decomposition（奇异值分解） for a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with <c>m >= n</c>, the singular value decomposition is
              an m-by-n orthogonal matrix <c>U</c>, an n-by-n diagonal matrix <c>S</c>, and
              an n-by-n orthogonal matrix <c>V</c> so that <c>A = U * S * V'</c>.
              The singular values, <c>sigma[k] = S[k,k]</c>, are ordered so that
              <c>sigma[0] >= sigma[1] >= ... >= sigma[n-1]</c>.
              The singular value decompostion always exists, so the constructor will
              never fail. The matrix condition number and the effective numerical
              rank can be computed from this decomposition.
            </remarks>
        </member>
        <member name="M:eZstd.MatrixPack.SingularValueDecomposition.#ctor(eZstd.MatrixPack.Matrix)">
            <summary>Construct singular value decomposition.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.SingularValueDecomposition.Condition">
            <summary>Returns the condition number <c>max(S) / min(S)</c>.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.SingularValueDecomposition.Norm2">
            <summary>Returns the Two norm.</summary>
        </member>
        <member name="P:eZstd.MatrixPack.SingularValueDecomposition.Rank">
            <summary>Returns the effective numerical matrix rank.</summary>
            <value>Number of non-negligible singular values.</value>
        </member>
        <member name="P:eZstd.MatrixPack.SingularValueDecomposition.Diagonal">
            <summary>Return the one-dimensional array of singular values.</summary>		
        </member>
        <member name="T:OldW.DllActivator.IDllActivator">
            <summary>
            用于在IExternalCommand.Execute方法中，将整个项目的所有dll加载到进程中。
            以避免出现在后面出现无法加载文件或者程序集的问题。
            此接口是专门为AddinManager在调试时设计的，在最终软件发布之前，此接口以及所有与之相关的类以及调用方法都可以删除。
            </summary>
            <remarks>在每一次调用Execute方法的开关，都可以用如下代码来将对应项目的所有引用激活。
            DllActivator.DllActivator_Projects dat = new DllActivator.DllActivator_Projects();
            dat.ActivateReferences();
            </remarks>
        </member>
        <member name="M:OldW.DllActivator.IDllActivator.ActivateReferences">
            <summary> 激活本DLL所引用的那些DLLs </summary>
        </member>
        <member name="T:OldW.DllActivator.DllActivator_std">
            <summary> 用于 OldW Revit 插件中多个dll之前的AddinManager调试 </summary>
        </member>
        <member name="M:OldW.DllActivator.DllActivator_std.ActivateReferences">
            <summary>
            激活本DLL所引用的那些DLLs
            </summary>
        </member>
    </members>
</doc>
